
Bai5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a64  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004bec  08004bec  00005bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c14  08004c14  0000601c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c14  08004c14  00005c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c1c  08004c1c  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c1c  08004c1c  00005c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c20  08004c20  00005c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004c24  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000601c  2**0
                  CONTENTS
 10 .bss          000001cc  2000001c  2000001c  0000601c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e8  200001e8  0000601c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016944  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039ae  00000000  00000000  0001c990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c0  00000000  00000000  00020340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001036  00000000  00000000  00021800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023dd7  00000000  00000000  00022836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bd43  00000000  00000000  0004660d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d26f7  00000000  00000000  00062350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00134a47  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005650  00000000  00000000  00134a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  0013a0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004bd4 	.word	0x08004bd4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08004bd4 	.word	0x08004bd4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2108      	movs	r1, #8
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <button_init+0x14>)
 80004c2:	f001 fccb 	bl	8001e5c <HAL_GPIO_WritePin>
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40020c00 	.word	0x40020c00

080004d0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08e      	sub	sp, #56	@ 0x38
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80004d6:	f107 031c 	add.w	r3, r7, #28
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80004ea:	463b      	mov	r3, r7
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
 80004f8:	615a      	str	r2, [r3, #20]
 80004fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80004fc:	4b2f      	ldr	r3, [pc, #188]	@ (80005bc <MX_FSMC_Init+0xec>)
 80004fe:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000502:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000504:	4b2d      	ldr	r3, [pc, #180]	@ (80005bc <MX_FSMC_Init+0xec>)
 8000506:	4a2e      	ldr	r2, [pc, #184]	@ (80005c0 <MX_FSMC_Init+0xf0>)
 8000508:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800050a:	4b2c      	ldr	r3, [pc, #176]	@ (80005bc <MX_FSMC_Init+0xec>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000510:	4b2a      	ldr	r3, [pc, #168]	@ (80005bc <MX_FSMC_Init+0xec>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000516:	4b29      	ldr	r3, [pc, #164]	@ (80005bc <MX_FSMC_Init+0xec>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800051c:	4b27      	ldr	r3, [pc, #156]	@ (80005bc <MX_FSMC_Init+0xec>)
 800051e:	2210      	movs	r2, #16
 8000520:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000522:	4b26      	ldr	r3, [pc, #152]	@ (80005bc <MX_FSMC_Init+0xec>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000528:	4b24      	ldr	r3, [pc, #144]	@ (80005bc <MX_FSMC_Init+0xec>)
 800052a:	2200      	movs	r2, #0
 800052c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800052e:	4b23      	ldr	r3, [pc, #140]	@ (80005bc <MX_FSMC_Init+0xec>)
 8000530:	2200      	movs	r2, #0
 8000532:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000534:	4b21      	ldr	r3, [pc, #132]	@ (80005bc <MX_FSMC_Init+0xec>)
 8000536:	2200      	movs	r2, #0
 8000538:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800053a:	4b20      	ldr	r3, [pc, #128]	@ (80005bc <MX_FSMC_Init+0xec>)
 800053c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000540:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000542:	4b1e      	ldr	r3, [pc, #120]	@ (80005bc <MX_FSMC_Init+0xec>)
 8000544:	2200      	movs	r2, #0
 8000546:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000548:	4b1c      	ldr	r3, [pc, #112]	@ (80005bc <MX_FSMC_Init+0xec>)
 800054a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800054e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000550:	4b1a      	ldr	r3, [pc, #104]	@ (80005bc <MX_FSMC_Init+0xec>)
 8000552:	2200      	movs	r2, #0
 8000554:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000556:	4b19      	ldr	r3, [pc, #100]	@ (80005bc <MX_FSMC_Init+0xec>)
 8000558:	2200      	movs	r2, #0
 800055a:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800055c:	4b17      	ldr	r3, [pc, #92]	@ (80005bc <MX_FSMC_Init+0xec>)
 800055e:	2200      	movs	r2, #0
 8000560:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000562:	230f      	movs	r3, #15
 8000564:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000566:	230f      	movs	r3, #15
 8000568:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800056a:	233c      	movs	r3, #60	@ 0x3c
 800056c:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000572:	2310      	movs	r3, #16
 8000574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000576:	2311      	movs	r3, #17
 8000578:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800057a:	2300      	movs	r3, #0
 800057c:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800057e:	2308      	movs	r3, #8
 8000580:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000582:	230f      	movs	r3, #15
 8000584:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000586:	2309      	movs	r3, #9
 8000588:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800058e:	2310      	movs	r3, #16
 8000590:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000592:	2311      	movs	r3, #17
 8000594:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000596:	2300      	movs	r3, #0
 8000598:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800059a:	463a      	mov	r2, r7
 800059c:	f107 031c 	add.w	r3, r7, #28
 80005a0:	4619      	mov	r1, r3
 80005a2:	4806      	ldr	r0, [pc, #24]	@ (80005bc <MX_FSMC_Init+0xec>)
 80005a4:	f002 fce0 	bl	8002f68 <HAL_SRAM_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80005ae:	f000 fd64 	bl	800107a <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80005b2:	bf00      	nop
 80005b4:	3738      	adds	r7, #56	@ 0x38
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000038 	.word	0x20000038
 80005c0:	a0000104 	.word	0xa0000104

080005c4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80005d8:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <HAL_FSMC_MspInit+0x88>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d131      	bne.n	8000644 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	@ (800064c <HAL_FSMC_MspInit+0x88>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <HAL_FSMC_MspInit+0x8c>)
 80005ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005ee:	4a18      	ldr	r2, [pc, #96]	@ (8000650 <HAL_FSMC_MspInit+0x8c>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6393      	str	r3, [r2, #56]	@ 0x38
 80005f6:	4b16      	ldr	r3, [pc, #88]	@ (8000650 <HAL_FSMC_MspInit+0x8c>)
 80005f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000602:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000606:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000608:	2302      	movs	r3, #2
 800060a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000610:	2303      	movs	r3, #3
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000614:	230c      	movs	r3, #12
 8000616:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	480d      	ldr	r0, [pc, #52]	@ (8000654 <HAL_FSMC_MspInit+0x90>)
 800061e:	f001 fa81 	bl	8001b24 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000622:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000626:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000628:	2302      	movs	r3, #2
 800062a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000630:	2303      	movs	r3, #3
 8000632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000634:	230c      	movs	r3, #12
 8000636:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4619      	mov	r1, r3
 800063c:	4806      	ldr	r0, [pc, #24]	@ (8000658 <HAL_FSMC_MspInit+0x94>)
 800063e:	f001 fa71 	bl	8001b24 <HAL_GPIO_Init>
 8000642:	e000      	b.n	8000646 <HAL_FSMC_MspInit+0x82>
    return;
 8000644:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000088 	.word	0x20000088
 8000650:	40023800 	.word	0x40023800
 8000654:	40021000 	.word	0x40021000
 8000658:	40020c00 	.word	0x40020c00

0800065c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000664:	f7ff ffae 	bl	80005c4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	@ 0x30
 8000674:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
 800068a:	4b6f      	ldr	r3, [pc, #444]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	4a6e      	ldr	r2, [pc, #440]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 8000690:	f043 0310 	orr.w	r3, r3, #16
 8000694:	6313      	str	r3, [r2, #48]	@ 0x30
 8000696:	4b6c      	ldr	r3, [pc, #432]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	f003 0310 	and.w	r3, r3, #16
 800069e:	61bb      	str	r3, [r7, #24]
 80006a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
 80006a6:	4b68      	ldr	r3, [pc, #416]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	4a67      	ldr	r2, [pc, #412]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b2:	4b65      	ldr	r3, [pc, #404]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	4b61      	ldr	r3, [pc, #388]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a60      	ldr	r2, [pc, #384]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 80006c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b5e      	ldr	r3, [pc, #376]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	4b5a      	ldr	r3, [pc, #360]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a59      	ldr	r2, [pc, #356]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b57      	ldr	r3, [pc, #348]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	4b53      	ldr	r3, [pc, #332]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a52      	ldr	r2, [pc, #328]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 8000700:	f043 0308 	orr.w	r3, r3, #8
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b50      	ldr	r3, [pc, #320]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b4c      	ldr	r3, [pc, #304]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a4b      	ldr	r2, [pc, #300]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 800071c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b49      	ldr	r3, [pc, #292]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b45      	ldr	r3, [pc, #276]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a44      	ldr	r2, [pc, #272]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b42      	ldr	r3, [pc, #264]	@ (8000848 <MX_GPIO_Init+0x1d8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2170      	movs	r1, #112	@ 0x70
 800074e:	483f      	ldr	r0, [pc, #252]	@ (800084c <MX_GPIO_Init+0x1dc>)
 8000750:	f001 fb84 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800075a:	483d      	ldr	r0, [pc, #244]	@ (8000850 <MX_GPIO_Init+0x1e0>)
 800075c:	f001 fb7e 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2140      	movs	r1, #64	@ 0x40
 8000764:	483b      	ldr	r0, [pc, #236]	@ (8000854 <MX_GPIO_Init+0x1e4>)
 8000766:	f001 fb79 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000770:	4839      	ldr	r0, [pc, #228]	@ (8000858 <MX_GPIO_Init+0x1e8>)
 8000772:	f001 fb73 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2108      	movs	r1, #8
 800077a:	4838      	ldr	r0, [pc, #224]	@ (800085c <MX_GPIO_Init+0x1ec>)
 800077c:	f001 fb6e 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000780:	2370      	movs	r3, #112	@ 0x70
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4619      	mov	r1, r3
 8000796:	482d      	ldr	r0, [pc, #180]	@ (800084c <MX_GPIO_Init+0x1dc>)
 8000798:	f001 f9c4 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800079c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	4826      	ldr	r0, [pc, #152]	@ (8000850 <MX_GPIO_Init+0x1e0>)
 80007b6:	f001 f9b5 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80007ba:	23c0      	movs	r3, #192	@ 0xc0
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	4822      	ldr	r0, [pc, #136]	@ (8000858 <MX_GPIO_Init+0x1e8>)
 80007ce:	f001 f9a9 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80007d2:	2330      	movs	r3, #48	@ 0x30
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	481a      	ldr	r0, [pc, #104]	@ (8000850 <MX_GPIO_Init+0x1e0>)
 80007e6:	f001 f99d 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80007ea:	2340      	movs	r3, #64	@ 0x40
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	4814      	ldr	r0, [pc, #80]	@ (8000854 <MX_GPIO_Init+0x1e4>)
 8000802:	f001 f98f 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000806:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	480e      	ldr	r0, [pc, #56]	@ (8000858 <MX_GPIO_Init+0x1e8>)
 8000820:	f001 f980 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000824:	2308      	movs	r3, #8
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4808      	ldr	r0, [pc, #32]	@ (800085c <MX_GPIO_Init+0x1ec>)
 800083c:	f001 f972 	bl	8001b24 <HAL_GPIO_Init>

}
 8000840:	bf00      	nop
 8000842:	3730      	adds	r7, #48	@ 0x30
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800
 800084c:	40021000 	.word	0x40021000
 8000850:	40020800 	.word	0x40020800
 8000854:	40021800 	.word	0x40021800
 8000858:	40020000 	.word	0x40020000
 800085c:	40020c00 	.word	0x40020c00

08000860 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_I2C1_Init+0x50>)
 8000866:	4a13      	ldr	r2, [pc, #76]	@ (80008b4 <MX_I2C1_Init+0x54>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_I2C1_Init+0x50>)
 800086c:	4a12      	ldr	r2, [pc, #72]	@ (80008b8 <MX_I2C1_Init+0x58>)
 800086e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_I2C1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_I2C1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_I2C1_Init+0x50>)
 800087e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000882:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <MX_I2C1_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_I2C1_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <MX_I2C1_Init+0x50>)
 800089e:	f001 faf7 	bl	8001e90 <HAL_I2C_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a8:	f000 fbe7 	bl	800107a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2000008c 	.word	0x2000008c
 80008b4:	40005400 	.word	0x40005400
 80008b8:	000186a0 	.word	0x000186a0

080008bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	@ 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a19      	ldr	r2, [pc, #100]	@ (8000940 <HAL_I2C_MspInit+0x84>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d12b      	bne.n	8000936 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <HAL_I2C_MspInit+0x88>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a17      	ldr	r2, [pc, #92]	@ (8000944 <HAL_I2C_MspInit+0x88>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <HAL_I2C_MspInit+0x88>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008fa:	23c0      	movs	r3, #192	@ 0xc0
 80008fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008fe:	2312      	movs	r3, #18
 8000900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800090a:	2304      	movs	r3, #4
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	480c      	ldr	r0, [pc, #48]	@ (8000948 <HAL_I2C_MspInit+0x8c>)
 8000916:	f001 f905 	bl	8001b24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <HAL_I2C_MspInit+0x88>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	4a08      	ldr	r2, [pc, #32]	@ (8000944 <HAL_I2C_MspInit+0x88>)
 8000924:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000928:	6413      	str	r3, [r2, #64]	@ 0x40
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <HAL_I2C_MspInit+0x88>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	@ 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40005400 	.word	0x40005400
 8000944:	40023800 	.word	0x40023800
 8000948:	40020400 	.word	0x40020400

0800094c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000956:	4a04      	ldr	r2, [pc, #16]	@ (8000968 <LCD_WR_REG+0x1c>)
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	8013      	strh	r3, [r2, #0]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	600ffffe 	.word	0x600ffffe

0800096c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000976:	4a04      	ldr	r2, [pc, #16]	@ (8000988 <LCD_WR_DATA+0x1c>)
 8000978:	88fb      	ldrh	r3, [r7, #6]
 800097a:	8053      	strh	r3, [r2, #2]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	600ffffe 	.word	0x600ffffe

0800098c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <LCD_RD_DATA+0x20>)
 8000994:	885b      	ldrh	r3, [r3, #2]
 8000996:	b29b      	uxth	r3, r3
 8000998:	80fb      	strh	r3, [r7, #6]
	return ram;
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	b29b      	uxth	r3, r3
}
 800099e:	4618      	mov	r0, r3
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	600ffffe 	.word	0x600ffffe

080009b0 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	091b      	lsrs	r3, r3, #4
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	f003 0303 	and.w	r3, r3, #3
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d007      	beq.n	80009da <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <lcd_SetDir+0x44>)
 80009cc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80009d0:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80009d2:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <lcd_SetDir+0x44>)
 80009d4:	22f0      	movs	r2, #240	@ 0xf0
 80009d6:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80009d8:	e006      	b.n	80009e8 <lcd_SetDir+0x38>
		lcddev.width=240;
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <lcd_SetDir+0x44>)
 80009dc:	22f0      	movs	r2, #240	@ 0xf0
 80009de:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80009e0:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <lcd_SetDir+0x44>)
 80009e2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80009e6:	805a      	strh	r2, [r3, #2]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	200000e0 	.word	0x200000e0

080009f8 <lcd_init>:


void lcd_init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a02:	48aa      	ldr	r0, [pc, #680]	@ (8000cac <lcd_init+0x2b4>)
 8000a04:	f001 fa2a 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000a08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a0c:	f000 fec2 	bl	8001794 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a16:	48a5      	ldr	r0, [pc, #660]	@ (8000cac <lcd_init+0x2b4>)
 8000a18:	f001 fa20 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000a1c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a20:	f000 feb8 	bl	8001794 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff ffc3 	bl	80009b0 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000a2a:	20d3      	movs	r0, #211	@ 0xd3
 8000a2c:	f7ff ff8e 	bl	800094c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000a30:	f7ff ffac 	bl	800098c <LCD_RD_DATA>
 8000a34:	4603      	mov	r3, r0
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b9d      	ldr	r3, [pc, #628]	@ (8000cb0 <lcd_init+0x2b8>)
 8000a3a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000a3c:	f7ff ffa6 	bl	800098c <LCD_RD_DATA>
 8000a40:	4603      	mov	r3, r0
 8000a42:	461a      	mov	r2, r3
 8000a44:	4b9a      	ldr	r3, [pc, #616]	@ (8000cb0 <lcd_init+0x2b8>)
 8000a46:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000a48:	f7ff ffa0 	bl	800098c <LCD_RD_DATA>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b97      	ldr	r3, [pc, #604]	@ (8000cb0 <lcd_init+0x2b8>)
 8000a52:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000a54:	4b96      	ldr	r3, [pc, #600]	@ (8000cb0 <lcd_init+0x2b8>)
 8000a56:	889b      	ldrh	r3, [r3, #4]
 8000a58:	021b      	lsls	r3, r3, #8
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	4b94      	ldr	r3, [pc, #592]	@ (8000cb0 <lcd_init+0x2b8>)
 8000a5e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000a60:	f7ff ff94 	bl	800098c <LCD_RD_DATA>
 8000a64:	4603      	mov	r3, r0
 8000a66:	461a      	mov	r2, r3
 8000a68:	4b91      	ldr	r3, [pc, #580]	@ (8000cb0 <lcd_init+0x2b8>)
 8000a6a:	889b      	ldrh	r3, [r3, #4]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	4b8f      	ldr	r3, [pc, #572]	@ (8000cb0 <lcd_init+0x2b8>)
 8000a72:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000a74:	20cf      	movs	r0, #207	@ 0xcf
 8000a76:	f7ff ff69 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff ff76 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000a80:	20c1      	movs	r0, #193	@ 0xc1
 8000a82:	f7ff ff73 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000a86:	2030      	movs	r0, #48	@ 0x30
 8000a88:	f7ff ff70 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000a8c:	20ed      	movs	r0, #237	@ 0xed
 8000a8e:	f7ff ff5d 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000a92:	2064      	movs	r0, #100	@ 0x64
 8000a94:	f7ff ff6a 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f7ff ff67 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000a9e:	2012      	movs	r0, #18
 8000aa0:	f7ff ff64 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000aa4:	2081      	movs	r0, #129	@ 0x81
 8000aa6:	f7ff ff61 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000aaa:	20e8      	movs	r0, #232	@ 0xe8
 8000aac:	f7ff ff4e 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000ab0:	2085      	movs	r0, #133	@ 0x85
 8000ab2:	f7ff ff5b 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000ab6:	2010      	movs	r0, #16
 8000ab8:	f7ff ff58 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000abc:	207a      	movs	r0, #122	@ 0x7a
 8000abe:	f7ff ff55 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000ac2:	20cb      	movs	r0, #203	@ 0xcb
 8000ac4:	f7ff ff42 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000ac8:	2039      	movs	r0, #57	@ 0x39
 8000aca:	f7ff ff4f 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000ace:	202c      	movs	r0, #44	@ 0x2c
 8000ad0:	f7ff ff4c 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f7ff ff49 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000ada:	2034      	movs	r0, #52	@ 0x34
 8000adc:	f7ff ff46 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000ae0:	2002      	movs	r0, #2
 8000ae2:	f7ff ff43 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000ae6:	20f7      	movs	r0, #247	@ 0xf7
 8000ae8:	f7ff ff30 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000aec:	2020      	movs	r0, #32
 8000aee:	f7ff ff3d 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000af2:	20ea      	movs	r0, #234	@ 0xea
 8000af4:	f7ff ff2a 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000af8:	2000      	movs	r0, #0
 8000afa:	f7ff ff37 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000afe:	2000      	movs	r0, #0
 8000b00:	f7ff ff34 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000b04:	20c0      	movs	r0, #192	@ 0xc0
 8000b06:	f7ff ff21 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000b0a:	201b      	movs	r0, #27
 8000b0c:	f7ff ff2e 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000b10:	20c1      	movs	r0, #193	@ 0xc1
 8000b12:	f7ff ff1b 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000b16:	2001      	movs	r0, #1
 8000b18:	f7ff ff28 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000b1c:	20c5      	movs	r0, #197	@ 0xc5
 8000b1e:	f7ff ff15 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000b22:	2030      	movs	r0, #48	@ 0x30
 8000b24:	f7ff ff22 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000b28:	2030      	movs	r0, #48	@ 0x30
 8000b2a:	f7ff ff1f 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000b2e:	20c7      	movs	r0, #199	@ 0xc7
 8000b30:	f7ff ff0c 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000b34:	20b7      	movs	r0, #183	@ 0xb7
 8000b36:	f7ff ff19 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000b3a:	2036      	movs	r0, #54	@ 0x36
 8000b3c:	f7ff ff06 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8000b40:	2008      	movs	r0, #8
 8000b42:	f7ff ff13 	bl	800096c <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8000b46:	203a      	movs	r0, #58	@ 0x3a
 8000b48:	f7ff ff00 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000b4c:	2055      	movs	r0, #85	@ 0x55
 8000b4e:	f7ff ff0d 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000b52:	20b1      	movs	r0, #177	@ 0xb1
 8000b54:	f7ff fefa 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff ff07 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000b5e:	201a      	movs	r0, #26
 8000b60:	f7ff ff04 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000b64:	20b6      	movs	r0, #182	@ 0xb6
 8000b66:	f7ff fef1 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000b6a:	200a      	movs	r0, #10
 8000b6c:	f7ff fefe 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000b70:	20a2      	movs	r0, #162	@ 0xa2
 8000b72:	f7ff fefb 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000b76:	20f2      	movs	r0, #242	@ 0xf2
 8000b78:	f7ff fee8 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f7ff fef5 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000b82:	2026      	movs	r0, #38	@ 0x26
 8000b84:	f7ff fee2 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f7ff feef 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8000b8e:	20e0      	movs	r0, #224	@ 0xe0
 8000b90:	f7ff fedc 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8000b94:	200f      	movs	r0, #15
 8000b96:	f7ff fee9 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8000b9a:	202a      	movs	r0, #42	@ 0x2a
 8000b9c:	f7ff fee6 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000ba0:	2028      	movs	r0, #40	@ 0x28
 8000ba2:	f7ff fee3 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000ba6:	2008      	movs	r0, #8
 8000ba8:	f7ff fee0 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000bac:	200e      	movs	r0, #14
 8000bae:	f7ff fedd 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000bb2:	2008      	movs	r0, #8
 8000bb4:	f7ff feda 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8000bb8:	2054      	movs	r0, #84	@ 0x54
 8000bba:	f7ff fed7 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8000bbe:	20a9      	movs	r0, #169	@ 0xa9
 8000bc0:	f7ff fed4 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8000bc4:	2043      	movs	r0, #67	@ 0x43
 8000bc6:	f7ff fed1 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8000bca:	200a      	movs	r0, #10
 8000bcc:	f7ff fece 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000bd0:	200f      	movs	r0, #15
 8000bd2:	f7ff fecb 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff fec8 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff fec5 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff fec2 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000be8:	2000      	movs	r0, #0
 8000bea:	f7ff febf 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8000bee:	20e1      	movs	r0, #225	@ 0xe1
 8000bf0:	f7ff feac 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f7ff feb9 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8000bfa:	2015      	movs	r0, #21
 8000bfc:	f7ff feb6 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8000c00:	2017      	movs	r0, #23
 8000c02:	f7ff feb3 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8000c06:	2007      	movs	r0, #7
 8000c08:	f7ff feb0 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8000c0c:	2011      	movs	r0, #17
 8000c0e:	f7ff fead 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8000c12:	2006      	movs	r0, #6
 8000c14:	f7ff feaa 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8000c18:	202b      	movs	r0, #43	@ 0x2b
 8000c1a:	f7ff fea7 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8000c1e:	2056      	movs	r0, #86	@ 0x56
 8000c20:	f7ff fea4 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8000c24:	203c      	movs	r0, #60	@ 0x3c
 8000c26:	f7ff fea1 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8000c2a:	2005      	movs	r0, #5
 8000c2c:	f7ff fe9e 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000c30:	2010      	movs	r0, #16
 8000c32:	f7ff fe9b 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000c36:	200f      	movs	r0, #15
 8000c38:	f7ff fe98 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000c3c:	203f      	movs	r0, #63	@ 0x3f
 8000c3e:	f7ff fe95 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000c42:	203f      	movs	r0, #63	@ 0x3f
 8000c44:	f7ff fe92 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000c48:	200f      	movs	r0, #15
 8000c4a:	f7ff fe8f 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8000c4e:	202b      	movs	r0, #43	@ 0x2b
 8000c50:	f7ff fe7c 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f7ff fe89 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff fe86 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f7ff fe83 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8000c66:	203f      	movs	r0, #63	@ 0x3f
 8000c68:	f7ff fe80 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8000c6c:	202a      	movs	r0, #42	@ 0x2a
 8000c6e:	f7ff fe6d 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff fe7a 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff fe77 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f7ff fe74 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8000c84:	20ef      	movs	r0, #239	@ 0xef
 8000c86:	f7ff fe71 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8000c8a:	2011      	movs	r0, #17
 8000c8c:	f7ff fe5e 	bl	800094c <LCD_WR_REG>
	HAL_Delay(120);
 8000c90:	2078      	movs	r0, #120	@ 0x78
 8000c92:	f000 fd7f 	bl	8001794 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8000c96:	2029      	movs	r0, #41	@ 0x29
 8000c98:	f7ff fe58 	bl	800094c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ca2:	4804      	ldr	r0, [pc, #16]	@ (8000cb4 <lcd_init+0x2bc>)
 8000ca4:	f001 f8da 	bl	8001e5c <HAL_GPIO_WritePin>
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40020800 	.word	0x40020800
 8000cb0:	200000e0 	.word	0x200000e0
 8000cb4:	40020000 	.word	0x40020000

08000cb8 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2140      	movs	r1, #64	@ 0x40
 8000cc0:	4802      	ldr	r0, [pc, #8]	@ (8000ccc <led7_init+0x14>)
 8000cc2:	f001 f8cb 	bl	8001e5c <HAL_GPIO_WritePin>
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40021800 	.word	0x40021800

08000cd0 <led7_Scan>:

void led7_Scan(){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8000cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd4 <led7_Scan+0x104>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	4b3d      	ldr	r3, [pc, #244]	@ (8000dd4 <led7_Scan+0x104>)
 8000cde:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8000ce0:	4b3d      	ldr	r3, [pc, #244]	@ (8000dd8 <led7_Scan+0x108>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a3d      	ldr	r2, [pc, #244]	@ (8000ddc <led7_Scan+0x10c>)
 8000ce6:	5cd3      	ldrb	r3, [r2, r3]
 8000ce8:	021b      	lsls	r3, r3, #8
 8000cea:	b21a      	sxth	r2, r3
 8000cec:	4b39      	ldr	r3, [pc, #228]	@ (8000dd4 <led7_Scan+0x104>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	b21b      	sxth	r3, r3
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	4b36      	ldr	r3, [pc, #216]	@ (8000dd4 <led7_Scan+0x104>)
 8000cfa:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8000cfc:	4b36      	ldr	r3, [pc, #216]	@ (8000dd8 <led7_Scan+0x108>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	d847      	bhi.n	8000d94 <led7_Scan+0xc4>
 8000d04:	a201      	add	r2, pc, #4	@ (adr r2, 8000d0c <led7_Scan+0x3c>)
 8000d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0a:	bf00      	nop
 8000d0c:	08000d1d 	.word	0x08000d1d
 8000d10:	08000d3b 	.word	0x08000d3b
 8000d14:	08000d59 	.word	0x08000d59
 8000d18:	08000d77 	.word	0x08000d77
	case 0:
		spi_buffer |= 0x00b0;
 8000d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd4 <led7_Scan+0x104>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd4 <led7_Scan+0x104>)
 8000d28:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd4 <led7_Scan+0x104>)
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	4b27      	ldr	r3, [pc, #156]	@ (8000dd4 <led7_Scan+0x104>)
 8000d36:	801a      	strh	r2, [r3, #0]
		break;
 8000d38:	e02d      	b.n	8000d96 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8000d3a:	4b26      	ldr	r3, [pc, #152]	@ (8000dd4 <led7_Scan+0x104>)
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	4b23      	ldr	r3, [pc, #140]	@ (8000dd4 <led7_Scan+0x104>)
 8000d46:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8000d48:	4b22      	ldr	r3, [pc, #136]	@ (8000dd4 <led7_Scan+0x104>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	f023 0320 	bic.w	r3, r3, #32
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <led7_Scan+0x104>)
 8000d54:	801a      	strh	r2, [r3, #0]
		break;
 8000d56:	e01e      	b.n	8000d96 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8000d58:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd4 <led7_Scan+0x104>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <led7_Scan+0x104>)
 8000d64:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8000d66:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd4 <led7_Scan+0x104>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	f023 0310 	bic.w	r3, r3, #16
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	4b18      	ldr	r3, [pc, #96]	@ (8000dd4 <led7_Scan+0x104>)
 8000d72:	801a      	strh	r2, [r3, #0]
		break;
 8000d74:	e00f      	b.n	8000d96 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8000d76:	4b17      	ldr	r3, [pc, #92]	@ (8000dd4 <led7_Scan+0x104>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <led7_Scan+0x104>)
 8000d82:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8000d84:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <led7_Scan+0x104>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <led7_Scan+0x104>)
 8000d90:	801a      	strh	r2, [r3, #0]
		break;
 8000d92:	e000      	b.n	8000d96 <led7_Scan+0xc6>
	default:
		break;
 8000d94:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8000d96:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <led7_Scan+0x108>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	425a      	negs	r2, r3
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	f002 0203 	and.w	r2, r2, #3
 8000da6:	bf58      	it	pl
 8000da8:	4253      	negpl	r3, r2
 8000daa:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd8 <led7_Scan+0x108>)
 8000dac:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2140      	movs	r1, #64	@ 0x40
 8000db2:	480b      	ldr	r0, [pc, #44]	@ (8000de0 <led7_Scan+0x110>)
 8000db4:	f001 f852 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8000db8:	2301      	movs	r3, #1
 8000dba:	2202      	movs	r2, #2
 8000dbc:	4905      	ldr	r1, [pc, #20]	@ (8000dd4 <led7_Scan+0x104>)
 8000dbe:	4809      	ldr	r0, [pc, #36]	@ (8000de4 <led7_Scan+0x114>)
 8000dc0:	f001 fecb 	bl	8002b5a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2140      	movs	r1, #64	@ 0x40
 8000dc8:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <led7_Scan+0x110>)
 8000dca:	f001 f847 	bl	8001e5c <HAL_GPIO_WritePin>
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000000e 	.word	0x2000000e
 8000dd8:	200000e8 	.word	0x200000e8
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	40021800 	.word	0x40021800
 8000de4:	200000fc 	.word	0x200000fc

08000de8 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	4613      	mov	r3, r2
 8000df4:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0e      	blt.n	8000e1a <led7_SetDigit+0x32>
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2b09      	cmp	r3, #9
 8000e00:	dc0b      	bgt.n	8000e1a <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8000e02:	4a09      	ldr	r2, [pc, #36]	@ (8000e28 <led7_SetDigit+0x40>)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4413      	add	r3, r2
 8000e08:	781a      	ldrb	r2, [r3, #0]
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	b2d9      	uxtb	r1, r3
 8000e10:	4a06      	ldr	r2, [pc, #24]	@ (8000e2c <led7_SetDigit+0x44>)
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	4413      	add	r3, r2
 8000e16:	460a      	mov	r2, r1
 8000e18:	701a      	strb	r2, [r3, #0]
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000004 	.word	0x20000004
 8000e2c:	20000000 	.word	0x20000000

08000e30 <led7_SetColon>:

void led7_SetColon(uint8_t status){
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d107      	bne.n	8000e50 <led7_SetColon+0x20>
 8000e40:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <led7_SetColon+0x3c>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	f023 0308 	bic.w	r3, r3, #8
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <led7_SetColon+0x3c>)
 8000e4c:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 8000e4e:	e006      	b.n	8000e5e <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <led7_SetColon+0x3c>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	f043 0308 	orr.w	r3, r3, #8
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <led7_SetColon+0x3c>)
 8000e5c:	801a      	strh	r2, [r3, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	2000000e 	.word	0x2000000e

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e76:	f000 fc1b 	bl	80016b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7a:	f000 f847 	bl	8000f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7e:	f7ff fbf7 	bl	8000670 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e82:	f000 fad3 	bl	800142c <MX_TIM2_Init>
  MX_SPI1_Init();
 8000e86:	f000 f9d5 	bl	8001234 <MX_SPI1_Init>
  MX_FSMC_Init();
 8000e8a:	f7ff fb21 	bl	80004d0 <MX_FSMC_Init>
  MX_I2C1_Init();
 8000e8e:	f7ff fce7 	bl	8000860 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000e92:	f000 fb69 	bl	8001568 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8000e96:	f000 f8a3 	bl	8000fe0 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t toggle = 1;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	73fb      	strb	r3, [r7, #15]
  setTimer2(250);
 8000e9e:	20fa      	movs	r0, #250	@ 0xfa
 8000ea0:	f000 f8fc 	bl	800109c <setTimer2>

  uint16_t buffer7Led[4] = {1, 2, 3, 4};
 8000ea4:	4a18      	ldr	r2, [pc, #96]	@ (8000f08 <main+0x98>)
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eac:	e883 0003 	stmia.w	r3, {r0, r1}
  uint16_t swap = 1;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	81bb      	strh	r3, [r7, #12]
  setTimerColon(0);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f000 f90d 	bl	80010d4 <setTimerColon>
  setTimerClock(1000);
 8000eba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ebe:	f000 f933 	bl	8001128 <setTimerClock>
  while (1)
  {
    /* USER CODE END WHILE */
	  if(isFlagColon() == 1)
 8000ec2:	f000 f91d 	bl	8001100 <isFlagColon>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d107      	bne.n	8000edc <main+0x6c>
	  {
		  toggle = 1 - toggle;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	f1c3 0301 	rsb	r3, r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
		  led7_SetColon(toggle);
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ffaa 	bl	8000e30 <led7_SetColon>
	  }
	  if(isFlagClock() == 1)
 8000edc:	f000 f93a 	bl	8001154 <isFlagClock>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d1ed      	bne.n	8000ec2 <main+0x52>
	  {
		  set_7seg(buffer7Led[0], buffer7Led[1], buffer7Led[2], buffer7Led[3]);
 8000ee6:	88b8      	ldrh	r0, [r7, #4]
 8000ee8:	88f9      	ldrh	r1, [r7, #6]
 8000eea:	893a      	ldrh	r2, [r7, #8]
 8000eec:	897b      	ldrh	r3, [r7, #10]
 8000eee:	f000 f899 	bl	8001024 <set_7seg>
		  swap = buffer7Led[0];
 8000ef2:	88bb      	ldrh	r3, [r7, #4]
 8000ef4:	81bb      	strh	r3, [r7, #12]
		  buffer7Led[0] = buffer7Led[1];
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	80bb      	strh	r3, [r7, #4]
		  buffer7Led[1] = buffer7Led[2];
 8000efa:	893b      	ldrh	r3, [r7, #8]
 8000efc:	80fb      	strh	r3, [r7, #6]
		  buffer7Led[2] = buffer7Led[3];
 8000efe:	897b      	ldrh	r3, [r7, #10]
 8000f00:	813b      	strh	r3, [r7, #8]
		  buffer7Led[3] = swap;
 8000f02:	89bb      	ldrh	r3, [r7, #12]
 8000f04:	817b      	strh	r3, [r7, #10]
	  if(isFlagColon() == 1)
 8000f06:	e7dc      	b.n	8000ec2 <main+0x52>
 8000f08:	08004bec 	.word	0x08004bec

08000f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	@ 0x50
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	2230      	movs	r2, #48	@ 0x30
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f003 fe2e 	bl	8004b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	4b28      	ldr	r3, [pc, #160]	@ (8000fd8 <SystemClock_Config+0xcc>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f38:	4a27      	ldr	r2, [pc, #156]	@ (8000fd8 <SystemClock_Config+0xcc>)
 8000f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f40:	4b25      	ldr	r3, [pc, #148]	@ (8000fd8 <SystemClock_Config+0xcc>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	4b22      	ldr	r3, [pc, #136]	@ (8000fdc <SystemClock_Config+0xd0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a21      	ldr	r2, [pc, #132]	@ (8000fdc <SystemClock_Config+0xd0>)
 8000f56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fdc <SystemClock_Config+0xd0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f70:	2310      	movs	r3, #16
 8000f72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f74:	2302      	movs	r3, #2
 8000f76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f7c:	2308      	movs	r3, #8
 8000f7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f80:	23a8      	movs	r3, #168	@ 0xa8
 8000f82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8c:	f107 0320 	add.w	r3, r7, #32
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 f8c1 	bl	8002118 <HAL_RCC_OscConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f9c:	f000 f86d 	bl	800107a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000fb2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2105      	movs	r1, #5
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 fb22 	bl	8002608 <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fca:	f000 f856 	bl	800107a <Error_Handler>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3750      	adds	r7, #80	@ 0x50
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40007000 	.word	0x40007000

08000fe0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2120      	movs	r1, #32
 8000fe8:	480d      	ldr	r0, [pc, #52]	@ (8001020 <system_init+0x40>)
 8000fea:	f000 ff37 	bl	8001e5c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2140      	movs	r1, #64	@ 0x40
 8000ff2:	480b      	ldr	r0, [pc, #44]	@ (8001020 <system_init+0x40>)
 8000ff4:	f000 ff32 	bl	8001e5c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2110      	movs	r1, #16
 8000ffc:	4808      	ldr	r0, [pc, #32]	@ (8001020 <system_init+0x40>)
 8000ffe:	f000 ff2d 	bl	8001e5c <HAL_GPIO_WritePin>
	  timer_init();
 8001002:	f000 f841 	bl	8001088 <timer_init>
	  led7_init();
 8001006:	f7ff fe57 	bl	8000cb8 <led7_init>
	  button_init();
 800100a:	f7ff fa55 	bl	80004b8 <button_init>
	  lcd_init();
 800100e:	f7ff fcf3 	bl	80009f8 <lcd_init>
	  uart_init_rs232();
 8001012:	f000 fa7d 	bl	8001510 <uart_init_rs232>
	  setTimer2(50);
 8001016:	2032      	movs	r0, #50	@ 0x32
 8001018:	f000 f840 	bl	800109c <setTimer2>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40021000 	.word	0x40021000

08001024 <set_7seg>:
		uart_Rs232SendString("\n");
	}
}

void set_7seg(uint16_t led1, uint16_t led2, uint16_t led3, uint16_t led4)
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4604      	mov	r4, r0
 800102c:	4608      	mov	r0, r1
 800102e:	4611      	mov	r1, r2
 8001030:	461a      	mov	r2, r3
 8001032:	4623      	mov	r3, r4
 8001034:	80fb      	strh	r3, [r7, #6]
 8001036:	4603      	mov	r3, r0
 8001038:	80bb      	strh	r3, [r7, #4]
 800103a:	460b      	mov	r3, r1
 800103c:	807b      	strh	r3, [r7, #2]
 800103e:	4613      	mov	r3, r2
 8001040:	803b      	strh	r3, [r7, #0]
	led7_SetDigit(led1, 0, 1);
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	2201      	movs	r2, #1
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fecd 	bl	8000de8 <led7_SetDigit>
	led7_SetDigit(led2, 1, 1);
 800104e:	88bb      	ldrh	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	2101      	movs	r1, #1
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fec7 	bl	8000de8 <led7_SetDigit>
	led7_SetDigit(led3, 2, 0);
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	2200      	movs	r2, #0
 800105e:	2102      	movs	r1, #2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fec1 	bl	8000de8 <led7_SetDigit>
	led7_SetDigit(led4, 3, 0);
 8001066:	883b      	ldrh	r3, [r7, #0]
 8001068:	2200      	movs	r2, #0
 800106a:	2103      	movs	r1, #3
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff febb 	bl	8000de8 <led7_SetDigit>
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bd90      	pop	{r4, r7, pc}

0800107a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107e:	b672      	cpsid	i
}
 8001080:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001082:	bf00      	nop
 8001084:	e7fd      	b.n	8001082 <Error_Handler+0x8>
	...

08001088 <timer_init>:
uint16_t timerColon = 0;
uint16_t flag_timerColon = 0;
uint16_t timerClock = 0;
uint16_t flag_timerClock = 0;

void timer_init(){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800108c:	4802      	ldr	r0, [pc, #8]	@ (8001098 <timer_init+0x10>)
 800108e:	f001 ffff 	bl	8003090 <HAL_TIM_Base_Start_IT>
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000154 	.word	0x20000154

0800109c <setTimer2>:

void setTimer2(uint16_t duration){
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80010a6:	4a08      	ldr	r2, [pc, #32]	@ (80010c8 <setTimer2+0x2c>)
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <setTimer2+0x2c>)
 80010ae:	881a      	ldrh	r2, [r3, #0]
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <setTimer2+0x30>)
 80010b2:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <setTimer2+0x34>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	801a      	strh	r2, [r3, #0]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200000f0 	.word	0x200000f0
 80010cc:	200000ee 	.word	0x200000ee
 80010d0:	200000ec 	.word	0x200000ec

080010d4 <setTimerColon>:

void setTimerColon(uint16_t timer)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	80fb      	strh	r3, [r7, #6]
	timerColon = timer;
 80010de:	4a06      	ldr	r2, [pc, #24]	@ (80010f8 <setTimerColon+0x24>)
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	8013      	strh	r3, [r2, #0]
	flag_timerColon = 0;
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <setTimerColon+0x28>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	801a      	strh	r2, [r3, #0]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200000f2 	.word	0x200000f2
 80010fc:	200000f4 	.word	0x200000f4

08001100 <isFlagColon>:

uint8_t isFlagColon()
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	if(flag_timerColon == 1)
 8001104:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <isFlagColon+0x24>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d104      	bne.n	8001116 <isFlagColon+0x16>
	{
		flag_timerColon = 0;
 800110c:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <isFlagColon+0x24>)
 800110e:	2200      	movs	r2, #0
 8001110:	801a      	strh	r2, [r3, #0]
		return 1;
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <isFlagColon+0x18>
	}
	return 0;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	200000f4 	.word	0x200000f4

08001128 <setTimerClock>:

void setTimerClock(uint16_t timer)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
	timerClock = timer;
 8001132:	4a06      	ldr	r2, [pc, #24]	@ (800114c <setTimerClock+0x24>)
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	8013      	strh	r3, [r2, #0]
	flag_timerClock = 0;
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <setTimerClock+0x28>)
 800113a:	2200      	movs	r2, #0
 800113c:	801a      	strh	r2, [r3, #0]
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	200000f6 	.word	0x200000f6
 8001150:	200000f8 	.word	0x200000f8

08001154 <isFlagClock>:

uint8_t isFlagClock()
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
	if(flag_timerClock == 1)
 8001158:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <isFlagClock+0x24>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d104      	bne.n	800116a <isFlagClock+0x16>
	{
		flag_timerClock = 0;
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <isFlagClock+0x24>)
 8001162:	2200      	movs	r2, #0
 8001164:	801a      	strh	r2, [r3, #0]
		return 1;
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <isFlagClock+0x18>
	}
	return 0;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	200000f8 	.word	0x200000f8

0800117c <HAL_TIM_PeriodElapsedCallback>:
		return 1;
	}
	return 0;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800118c:	d13d      	bne.n	800120a <HAL_TIM_PeriodElapsedCallback+0x8e>
		if(timer2_counter > 0){
 800118e:	4b22      	ldr	r3, [pc, #136]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d010      	beq.n	80011b8 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001196:	4b20      	ldr	r3, [pc, #128]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	3b01      	subs	r3, #1
 800119c:	b29a      	uxth	r2, r3
 800119e:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80011a0:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80011a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d106      	bne.n	80011b8 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80011aa:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80011b2:	881a      	ldrh	r2, [r3, #0]
 80011b4:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80011b6:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timerColon > 0){
 80011b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00f      	beq.n	80011e0 <HAL_TIM_PeriodElapsedCallback+0x64>
			timerColon--;
 80011c0:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80011ca:	801a      	strh	r2, [r3, #0]
			if(timerColon == 0) {
 80011cc:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d105      	bne.n	80011e0 <HAL_TIM_PeriodElapsedCallback+0x64>
				flag_timerColon = 1;
 80011d4:	4b14      	ldr	r3, [pc, #80]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	801a      	strh	r2, [r3, #0]
				timerColon = 250;
 80011da:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80011dc:	22fa      	movs	r2, #250	@ 0xfa
 80011de:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timerClock > 0){
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d010      	beq.n	800120a <HAL_TIM_PeriodElapsedCallback+0x8e>
			timerClock--;
 80011e8:	4b10      	ldr	r3, [pc, #64]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80011f2:	801a      	strh	r2, [r3, #0]
			if(timerClock == 0) {
 80011f4:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d106      	bne.n	800120a <HAL_TIM_PeriodElapsedCallback+0x8e>
				flag_timerClock = 1;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80011fe:	2201      	movs	r2, #1
 8001200:	801a      	strh	r2, [r3, #0]
				timerClock = 1000;
 8001202:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001204:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001208:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	led7_Scan();
 800120a:	f7ff fd61 	bl	8000cd0 <led7_Scan>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200000ee 	.word	0x200000ee
 800121c:	200000ec 	.word	0x200000ec
 8001220:	200000f0 	.word	0x200000f0
 8001224:	200000f2 	.word	0x200000f2
 8001228:	200000f4 	.word	0x200000f4
 800122c:	200000f6 	.word	0x200000f6
 8001230:	200000f8 	.word	0x200000f8

08001234 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001238:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <MX_SPI1_Init+0x64>)
 800123a:	4a18      	ldr	r2, [pc, #96]	@ (800129c <MX_SPI1_Init+0x68>)
 800123c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800123e:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <MX_SPI1_Init+0x64>)
 8001240:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001244:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001246:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <MX_SPI1_Init+0x64>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <MX_SPI1_Init+0x64>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001252:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <MX_SPI1_Init+0x64>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001258:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <MX_SPI1_Init+0x64>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <MX_SPI1_Init+0x64>)
 8001260:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001264:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001266:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_SPI1_Init+0x64>)
 8001268:	2200      	movs	r2, #0
 800126a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800126c:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <MX_SPI1_Init+0x64>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_SPI1_Init+0x64>)
 8001274:	2200      	movs	r2, #0
 8001276:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <MX_SPI1_Init+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_SPI1_Init+0x64>)
 8001280:	220a      	movs	r2, #10
 8001282:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001284:	4804      	ldr	r0, [pc, #16]	@ (8001298 <MX_SPI1_Init+0x64>)
 8001286:	f001 fbdf 	bl	8002a48 <HAL_SPI_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001290:	f7ff fef3 	bl	800107a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200000fc 	.word	0x200000fc
 800129c:	40013000 	.word	0x40013000

080012a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	@ 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a19      	ldr	r2, [pc, #100]	@ (8001324 <HAL_SPI_MspInit+0x84>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d12b      	bne.n	800131a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <HAL_SPI_MspInit+0x88>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	4a17      	ldr	r2, [pc, #92]	@ (8001328 <HAL_SPI_MspInit+0x88>)
 80012cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d2:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <HAL_SPI_MspInit+0x88>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <HAL_SPI_MspInit+0x88>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a10      	ldr	r2, [pc, #64]	@ (8001328 <HAL_SPI_MspInit+0x88>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <HAL_SPI_MspInit+0x88>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80012fa:	2338      	movs	r3, #56	@ 0x38
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800130a:	2305      	movs	r3, #5
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	@ (800132c <HAL_SPI_MspInit+0x8c>)
 8001316:	f000 fc05 	bl	8001b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	@ 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40013000 	.word	0x40013000
 8001328:	40023800 	.word	0x40023800
 800132c:	40020400 	.word	0x40020400

08001330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <HAL_MspInit+0x4c>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133e:	4a0f      	ldr	r2, [pc, #60]	@ (800137c <HAL_MspInit+0x4c>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001344:	6453      	str	r3, [r2, #68]	@ 0x44
 8001346:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <HAL_MspInit+0x4c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4b09      	ldr	r3, [pc, #36]	@ (800137c <HAL_MspInit+0x4c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	4a08      	ldr	r2, [pc, #32]	@ (800137c <HAL_MspInit+0x4c>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001360:	6413      	str	r3, [r2, #64]	@ 0x40
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <HAL_MspInit+0x4c>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800

08001380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <NMI_Handler+0x4>

08001388 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <MemManage_Handler+0x4>

08001398 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <BusFault_Handler+0x4>

080013a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <UsageFault_Handler+0x4>

080013a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d6:	f000 f9bd 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013e4:	4802      	ldr	r0, [pc, #8]	@ (80013f0 <TIM2_IRQHandler+0x10>)
 80013e6:	f001 fec3 	bl	8003170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000154 	.word	0x20000154

080013f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013f8:	4802      	ldr	r0, [pc, #8]	@ (8001404 <USART1_IRQHandler+0x10>)
 80013fa:	f002 fb8b 	bl	8003b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200001a0 	.word	0x200001a0

08001408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800140c:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <SystemInit+0x20>)
 800140e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001412:	4a05      	ldr	r2, [pc, #20]	@ (8001428 <SystemInit+0x20>)
 8001414:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001418:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001448:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <MX_TIM2_Init+0x94>)
 800144a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800144e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001450:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <MX_TIM2_Init+0x94>)
 8001452:	f240 3247 	movw	r2, #839	@ 0x347
 8001456:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001458:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <MX_TIM2_Init+0x94>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800145e:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <MX_TIM2_Init+0x94>)
 8001460:	2263      	movs	r2, #99	@ 0x63
 8001462:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <MX_TIM2_Init+0x94>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <MX_TIM2_Init+0x94>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001470:	4813      	ldr	r0, [pc, #76]	@ (80014c0 <MX_TIM2_Init+0x94>)
 8001472:	f001 fdbd 	bl	8002ff0 <HAL_TIM_Base_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800147c:	f7ff fdfd 	bl	800107a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001480:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001484:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	4619      	mov	r1, r3
 800148c:	480c      	ldr	r0, [pc, #48]	@ (80014c0 <MX_TIM2_Init+0x94>)
 800148e:	f001 ff77 	bl	8003380 <HAL_TIM_ConfigClockSource>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001498:	f7ff fdef 	bl	800107a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <MX_TIM2_Init+0x94>)
 80014aa:	f002 f993 	bl	80037d4 <HAL_TIMEx_MasterConfigSynchronization>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014b4:	f7ff fde1 	bl	800107a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000154 	.word	0x20000154

080014c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014d4:	d115      	bne.n	8001502 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <HAL_TIM_Base_MspInit+0x48>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	4a0b      	ldr	r2, [pc, #44]	@ (800150c <HAL_TIM_Base_MspInit+0x48>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e6:	4b09      	ldr	r3, [pc, #36]	@ (800150c <HAL_TIM_Base_MspInit+0x48>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	201c      	movs	r0, #28
 80014f8:	f000 fa4b 	bl	8001992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014fc:	201c      	movs	r0, #28
 80014fe:	f000 fa64 	bl	80019ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800

08001510 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001514:	2201      	movs	r2, #1
 8001516:	4903      	ldr	r1, [pc, #12]	@ (8001524 <uart_init_rs232+0x14>)
 8001518:	4803      	ldr	r0, [pc, #12]	@ (8001528 <uart_init_rs232+0x18>)
 800151a:	f002 faca 	bl	8003ab2 <HAL_UART_Receive_IT>
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2000019c 	.word	0x2000019c
 8001528:	200001a0 	.word	0x200001a0

0800152c <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a08      	ldr	r2, [pc, #32]	@ (800155c <HAL_UART_RxCpltCallback+0x30>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d10a      	bne.n	8001554 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 800153e:	230a      	movs	r3, #10
 8001540:	2201      	movs	r2, #1
 8001542:	4907      	ldr	r1, [pc, #28]	@ (8001560 <HAL_UART_RxCpltCallback+0x34>)
 8001544:	4807      	ldr	r0, [pc, #28]	@ (8001564 <HAL_UART_RxCpltCallback+0x38>)
 8001546:	f002 fa22 	bl	800398e <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800154a:	2201      	movs	r2, #1
 800154c:	4904      	ldr	r1, [pc, #16]	@ (8001560 <HAL_UART_RxCpltCallback+0x34>)
 800154e:	4805      	ldr	r0, [pc, #20]	@ (8001564 <HAL_UART_RxCpltCallback+0x38>)
 8001550:	f002 faaf 	bl	8003ab2 <HAL_UART_Receive_IT>
	}
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40011000 	.word	0x40011000
 8001560:	2000019c 	.word	0x2000019c
 8001564:	200001a0 	.word	0x200001a0

08001568 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800156c:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <MX_USART1_UART_Init+0x4c>)
 800156e:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <MX_USART1_UART_Init+0x50>)
 8001570:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <MX_USART1_UART_Init+0x4c>)
 8001574:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001578:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <MX_USART1_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <MX_USART1_UART_Init+0x4c>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001586:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <MX_USART1_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <MX_USART1_UART_Init+0x4c>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <MX_USART1_UART_Init+0x4c>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <MX_USART1_UART_Init+0x4c>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	@ (80015b4 <MX_USART1_UART_Init+0x4c>)
 80015a0:	f002 f9a8 	bl	80038f4 <HAL_UART_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015aa:	f7ff fd66 	bl	800107a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200001a0 	.word	0x200001a0
 80015b8:	40011000 	.word	0x40011000

080015bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	@ 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001650 <HAL_UART_MspInit+0x94>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d134      	bne.n	8001648 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <HAL_UART_MspInit+0x98>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001654 <HAL_UART_MspInit+0x98>)
 80015e8:	f043 0310 	orr.w	r3, r3, #16
 80015ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ee:	4b19      	ldr	r3, [pc, #100]	@ (8001654 <HAL_UART_MspInit+0x98>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <HAL_UART_MspInit+0x98>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a14      	ldr	r2, [pc, #80]	@ (8001654 <HAL_UART_MspInit+0x98>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <HAL_UART_MspInit+0x98>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001616:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001628:	2307      	movs	r3, #7
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4809      	ldr	r0, [pc, #36]	@ (8001658 <HAL_UART_MspInit+0x9c>)
 8001634:	f000 fa76 	bl	8001b24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	2100      	movs	r1, #0
 800163c:	2025      	movs	r0, #37	@ 0x25
 800163e:	f000 f9a8 	bl	8001992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001642:	2025      	movs	r0, #37	@ 0x25
 8001644:	f000 f9c1 	bl	80019ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001648:	bf00      	nop
 800164a:	3728      	adds	r7, #40	@ 0x28
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40011000 	.word	0x40011000
 8001654:	40023800 	.word	0x40023800
 8001658:	40020000 	.word	0x40020000

0800165c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001694 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001660:	480d      	ldr	r0, [pc, #52]	@ (8001698 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001662:	490e      	ldr	r1, [pc, #56]	@ (800169c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001664:	4a0e      	ldr	r2, [pc, #56]	@ (80016a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800166c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001676:	4a0b      	ldr	r2, [pc, #44]	@ (80016a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001678:	4c0b      	ldr	r4, [pc, #44]	@ (80016a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001686:	f7ff febf 	bl	8001408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168a:	f003 fa7f 	bl	8004b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168e:	f7ff fbef 	bl	8000e70 <main>
  bx  lr    
 8001692:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001694:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80016a0:	08004c24 	.word	0x08004c24
  ldr r2, =_sbss
 80016a4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80016a8:	200001e8 	.word	0x200001e8

080016ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC_IRQHandler>
	...

080016b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b4:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0d      	ldr	r2, [pc, #52]	@ (80016f0 <HAL_Init+0x40>)
 80016ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c0:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <HAL_Init+0x40>)
 80016c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016cc:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <HAL_Init+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a07      	ldr	r2, [pc, #28]	@ (80016f0 <HAL_Init+0x40>)
 80016d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d8:	2003      	movs	r0, #3
 80016da:	f000 f94f 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016de:	200f      	movs	r0, #15
 80016e0:	f000 f808 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e4:	f7ff fe24 	bl	8001330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023c00 	.word	0x40023c00

080016f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016fc:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <HAL_InitTick+0x54>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b12      	ldr	r3, [pc, #72]	@ (800174c <HAL_InitTick+0x58>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f967 	bl	80019e6 <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00e      	b.n	8001740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d80a      	bhi.n	800173e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f000 f92f 	bl	8001992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001734:	4a06      	ldr	r2, [pc, #24]	@ (8001750 <HAL_InitTick+0x5c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000010 	.word	0x20000010
 800174c:	20000018 	.word	0x20000018
 8001750:	20000014 	.word	0x20000014

08001754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	@ (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000018 	.word	0x20000018
 8001778:	200001e4 	.word	0x200001e4

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	@ (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	200001e4 	.word	0x200001e4

08001794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff ffee 	bl	800177c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <HAL_Delay+0x44>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ba:	bf00      	nop
 80017bc:	f7ff ffde 	bl	800177c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000018 	.word	0x20000018

080017dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800180c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180e:	4a04      	ldr	r2, [pc, #16]	@ (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	60d3      	str	r3, [r2, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	@ (800183c <__NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	2b00      	cmp	r3, #0
 8001850:	db0b      	blt.n	800186a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	f003 021f 	and.w	r2, r3, #31
 8001858:	4907      	ldr	r1, [pc, #28]	@ (8001878 <__NVIC_EnableIRQ+0x38>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	2001      	movs	r0, #1
 8001862:	fa00 f202 	lsl.w	r2, r0, r2
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	@ (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	@ (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	@ 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
         );
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	@ 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001948:	d301      	bcc.n	800194e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194a:	2301      	movs	r3, #1
 800194c:	e00f      	b.n	800196e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194e:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <SysTick_Config+0x40>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001956:	210f      	movs	r1, #15
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f7ff ff8e 	bl	800187c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <SysTick_Config+0x40>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001966:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <SysTick_Config+0x40>)
 8001968:	2207      	movs	r2, #7
 800196a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	e000e010 	.word	0xe000e010

0800197c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff29 	bl	80017dc <__NVIC_SetPriorityGrouping>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a4:	f7ff ff3e 	bl	8001824 <__NVIC_GetPriorityGrouping>
 80019a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	6978      	ldr	r0, [r7, #20]
 80019b0:	f7ff ff8e 	bl	80018d0 <NVIC_EncodePriority>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff5d 	bl	800187c <__NVIC_SetPriority>
}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff31 	bl	8001840 <__NVIC_EnableIRQ>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffa2 	bl	8001938 <SysTick_Config>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b084      	sub	sp, #16
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff feb6 	bl	800177c <HAL_GetTick>
 8001a10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d008      	beq.n	8001a30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2280      	movs	r2, #128	@ 0x80
 8001a22:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e052      	b.n	8001ad6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0216 	bic.w	r2, r2, #22
 8001a3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	695a      	ldr	r2, [r3, #20]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d103      	bne.n	8001a60 <HAL_DMA_Abort+0x62>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d007      	beq.n	8001a70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0208 	bic.w	r2, r2, #8
 8001a6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0201 	bic.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a80:	e013      	b.n	8001aaa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a82:	f7ff fe7b 	bl	800177c <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d90c      	bls.n	8001aaa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2220      	movs	r2, #32
 8001a94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2203      	movs	r2, #3
 8001a9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e015      	b.n	8001ad6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1e4      	bne.n	8001a82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001abc:	223f      	movs	r2, #63	@ 0x3f
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d004      	beq.n	8001afc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2280      	movs	r2, #128	@ 0x80
 8001af6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e00c      	b.n	8001b16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2205      	movs	r2, #5
 8001b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0201 	bic.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	@ 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	e16b      	b.n	8001e18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b40:	2201      	movs	r2, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	f040 815a 	bne.w	8001e12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d005      	beq.n	8001b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d130      	bne.n	8001bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bac:	2201      	movs	r2, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 0201 	and.w	r2, r3, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d017      	beq.n	8001c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d123      	bne.n	8001c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	08da      	lsrs	r2, r3, #3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3208      	adds	r2, #8
 8001c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	220f      	movs	r2, #15
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	08da      	lsrs	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3208      	adds	r2, #8
 8001c62:	69b9      	ldr	r1, [r7, #24]
 8001c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0203 	and.w	r2, r3, #3
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80b4 	beq.w	8001e12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b60      	ldr	r3, [pc, #384]	@ (8001e30 <HAL_GPIO_Init+0x30c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	4a5f      	ldr	r2, [pc, #380]	@ (8001e30 <HAL_GPIO_Init+0x30c>)
 8001cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cba:	4b5d      	ldr	r3, [pc, #372]	@ (8001e30 <HAL_GPIO_Init+0x30c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc6:	4a5b      	ldr	r2, [pc, #364]	@ (8001e34 <HAL_GPIO_Init+0x310>)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	220f      	movs	r2, #15
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a52      	ldr	r2, [pc, #328]	@ (8001e38 <HAL_GPIO_Init+0x314>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d02b      	beq.n	8001d4a <HAL_GPIO_Init+0x226>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a51      	ldr	r2, [pc, #324]	@ (8001e3c <HAL_GPIO_Init+0x318>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d025      	beq.n	8001d46 <HAL_GPIO_Init+0x222>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a50      	ldr	r2, [pc, #320]	@ (8001e40 <HAL_GPIO_Init+0x31c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d01f      	beq.n	8001d42 <HAL_GPIO_Init+0x21e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4f      	ldr	r2, [pc, #316]	@ (8001e44 <HAL_GPIO_Init+0x320>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d019      	beq.n	8001d3e <HAL_GPIO_Init+0x21a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4e      	ldr	r2, [pc, #312]	@ (8001e48 <HAL_GPIO_Init+0x324>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_GPIO_Init+0x216>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4d      	ldr	r2, [pc, #308]	@ (8001e4c <HAL_GPIO_Init+0x328>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00d      	beq.n	8001d36 <HAL_GPIO_Init+0x212>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e50 <HAL_GPIO_Init+0x32c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <HAL_GPIO_Init+0x20e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4b      	ldr	r2, [pc, #300]	@ (8001e54 <HAL_GPIO_Init+0x330>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_GPIO_Init+0x20a>
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	e00e      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d2e:	2308      	movs	r3, #8
 8001d30:	e00c      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d32:	2306      	movs	r3, #6
 8001d34:	e00a      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d36:	2305      	movs	r3, #5
 8001d38:	e008      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	e006      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e004      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e002      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	f002 0203 	and.w	r2, r2, #3
 8001d52:	0092      	lsls	r2, r2, #2
 8001d54:	4093      	lsls	r3, r2
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d5c:	4935      	ldr	r1, [pc, #212]	@ (8001e34 <HAL_GPIO_Init+0x310>)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	3302      	adds	r3, #2
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d8e:	4a32      	ldr	r2, [pc, #200]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d94:	4b30      	ldr	r3, [pc, #192]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001db8:	4a27      	ldr	r2, [pc, #156]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dbe:	4b26      	ldr	r3, [pc, #152]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e0c:	4a12      	ldr	r2, [pc, #72]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3301      	adds	r3, #1
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	2b0f      	cmp	r3, #15
 8001e1c:	f67f ae90 	bls.w	8001b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3724      	adds	r7, #36	@ 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40013800 	.word	0x40013800
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40020c00 	.word	0x40020c00
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40021400 	.word	0x40021400
 8001e50:	40021800 	.word	0x40021800
 8001e54:	40021c00 	.word	0x40021c00
 8001e58:	40013c00 	.word	0x40013c00

08001e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e6c:	787b      	ldrb	r3, [r7, #1]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e78:	e003      	b.n	8001e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e7a:	887b      	ldrh	r3, [r7, #2]
 8001e7c:	041a      	lsls	r2, r3, #16
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	619a      	str	r2, [r3, #24]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e12b      	b.n	80020fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7fe fd00 	bl	80008bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2224      	movs	r2, #36	@ 0x24
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0201 	bic.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ee2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ef4:	f000 fd80 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
 8001ef8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4a81      	ldr	r2, [pc, #516]	@ (8002104 <HAL_I2C_Init+0x274>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d807      	bhi.n	8001f14 <HAL_I2C_Init+0x84>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4a80      	ldr	r2, [pc, #512]	@ (8002108 <HAL_I2C_Init+0x278>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	bf94      	ite	ls
 8001f0c:	2301      	movls	r3, #1
 8001f0e:	2300      	movhi	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	e006      	b.n	8001f22 <HAL_I2C_Init+0x92>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4a7d      	ldr	r2, [pc, #500]	@ (800210c <HAL_I2C_Init+0x27c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	bf94      	ite	ls
 8001f1c:	2301      	movls	r3, #1
 8001f1e:	2300      	movhi	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0e7      	b.n	80020fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4a78      	ldr	r2, [pc, #480]	@ (8002110 <HAL_I2C_Init+0x280>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	0c9b      	lsrs	r3, r3, #18
 8001f34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4a6a      	ldr	r2, [pc, #424]	@ (8002104 <HAL_I2C_Init+0x274>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d802      	bhi.n	8001f64 <HAL_I2C_Init+0xd4>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3301      	adds	r3, #1
 8001f62:	e009      	b.n	8001f78 <HAL_I2C_Init+0xe8>
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f6a:	fb02 f303 	mul.w	r3, r2, r3
 8001f6e:	4a69      	ldr	r2, [pc, #420]	@ (8002114 <HAL_I2C_Init+0x284>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	099b      	lsrs	r3, r3, #6
 8001f76:	3301      	adds	r3, #1
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	495c      	ldr	r1, [pc, #368]	@ (8002104 <HAL_I2C_Init+0x274>)
 8001f94:	428b      	cmp	r3, r1
 8001f96:	d819      	bhi.n	8001fcc <HAL_I2C_Init+0x13c>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	1e59      	subs	r1, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fa6:	1c59      	adds	r1, r3, #1
 8001fa8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fac:	400b      	ands	r3, r1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_I2C_Init+0x138>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	1e59      	subs	r1, r3, #1
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc6:	e051      	b.n	800206c <HAL_I2C_Init+0x1dc>
 8001fc8:	2304      	movs	r3, #4
 8001fca:	e04f      	b.n	800206c <HAL_I2C_Init+0x1dc>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d111      	bne.n	8001ff8 <HAL_I2C_Init+0x168>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1e58      	subs	r0, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6859      	ldr	r1, [r3, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	440b      	add	r3, r1
 8001fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	e012      	b.n	800201e <HAL_I2C_Init+0x18e>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1e58      	subs	r0, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6859      	ldr	r1, [r3, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	0099      	lsls	r1, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	fbb0 f3f3 	udiv	r3, r0, r3
 800200e:	3301      	adds	r3, #1
 8002010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf0c      	ite	eq
 8002018:	2301      	moveq	r3, #1
 800201a:	2300      	movne	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_I2C_Init+0x196>
 8002022:	2301      	movs	r3, #1
 8002024:	e022      	b.n	800206c <HAL_I2C_Init+0x1dc>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10e      	bne.n	800204c <HAL_I2C_Init+0x1bc>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1e58      	subs	r0, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6859      	ldr	r1, [r3, #4]
 8002036:	460b      	mov	r3, r1
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	440b      	add	r3, r1
 800203c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002040:	3301      	adds	r3, #1
 8002042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002046:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800204a:	e00f      	b.n	800206c <HAL_I2C_Init+0x1dc>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1e58      	subs	r0, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6859      	ldr	r1, [r3, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	0099      	lsls	r1, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002062:	3301      	adds	r3, #1
 8002064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002068:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	6809      	ldr	r1, [r1, #0]
 8002070:	4313      	orrs	r3, r2
 8002072:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69da      	ldr	r2, [r3, #28]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800209a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6911      	ldr	r1, [r2, #16]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68d2      	ldr	r2, [r2, #12]
 80020a6:	4311      	orrs	r1, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	430b      	orrs	r3, r1
 80020ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	000186a0 	.word	0x000186a0
 8002108:	001e847f 	.word	0x001e847f
 800210c:	003d08ff 	.word	0x003d08ff
 8002110:	431bde83 	.word	0x431bde83
 8002114:	10624dd3 	.word	0x10624dd3

08002118 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e267      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d075      	beq.n	8002222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002136:	4b88      	ldr	r3, [pc, #544]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b04      	cmp	r3, #4
 8002140:	d00c      	beq.n	800215c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002142:	4b85      	ldr	r3, [pc, #532]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800214a:	2b08      	cmp	r3, #8
 800214c:	d112      	bne.n	8002174 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800214e:	4b82      	ldr	r3, [pc, #520]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002156:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800215a:	d10b      	bne.n	8002174 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	4b7e      	ldr	r3, [pc, #504]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d05b      	beq.n	8002220 <HAL_RCC_OscConfig+0x108>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d157      	bne.n	8002220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e242      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800217c:	d106      	bne.n	800218c <HAL_RCC_OscConfig+0x74>
 800217e:	4b76      	ldr	r3, [pc, #472]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a75      	ldr	r2, [pc, #468]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e01d      	b.n	80021c8 <HAL_RCC_OscConfig+0xb0>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x98>
 8002196:	4b70      	ldr	r3, [pc, #448]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a6f      	ldr	r2, [pc, #444]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 800219c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a6c      	ldr	r2, [pc, #432]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e00b      	b.n	80021c8 <HAL_RCC_OscConfig+0xb0>
 80021b0:	4b69      	ldr	r3, [pc, #420]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a68      	ldr	r2, [pc, #416]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80021b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b66      	ldr	r3, [pc, #408]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a65      	ldr	r2, [pc, #404]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80021c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7ff fad4 	bl	800177c <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d8:	f7ff fad0 	bl	800177c <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	@ 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e207      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0xc0>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff fac0 	bl	800177c <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002200:	f7ff fabc 	bl	800177c <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	@ 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e1f3      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	4b51      	ldr	r3, [pc, #324]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0xe8>
 800221e:	e000      	b.n	8002222 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d063      	beq.n	80022f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800222e:	4b4a      	ldr	r3, [pc, #296]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00b      	beq.n	8002252 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800223a:	4b47      	ldr	r3, [pc, #284]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002242:	2b08      	cmp	r3, #8
 8002244:	d11c      	bne.n	8002280 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002246:	4b44      	ldr	r3, [pc, #272]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d116      	bne.n	8002280 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002252:	4b41      	ldr	r3, [pc, #260]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_RCC_OscConfig+0x152>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d001      	beq.n	800226a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e1c7      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226a:	4b3b      	ldr	r3, [pc, #236]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4937      	ldr	r1, [pc, #220]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227e:	e03a      	b.n	80022f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d020      	beq.n	80022ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002288:	4b34      	ldr	r3, [pc, #208]	@ (800235c <HAL_RCC_OscConfig+0x244>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228e:	f7ff fa75 	bl	800177c <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002296:	f7ff fa71 	bl	800177c <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e1a8      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b4:	4b28      	ldr	r3, [pc, #160]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4925      	ldr	r1, [pc, #148]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]
 80022c8:	e015      	b.n	80022f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ca:	4b24      	ldr	r3, [pc, #144]	@ (800235c <HAL_RCC_OscConfig+0x244>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7ff fa54 	bl	800177c <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022d8:	f7ff fa50 	bl	800177c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e187      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d036      	beq.n	8002370 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d016      	beq.n	8002338 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230a:	4b15      	ldr	r3, [pc, #84]	@ (8002360 <HAL_RCC_OscConfig+0x248>)
 800230c:	2201      	movs	r2, #1
 800230e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002310:	f7ff fa34 	bl	800177c <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002318:	f7ff fa30 	bl	800177c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e167      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232a:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 800232c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x200>
 8002336:	e01b      	b.n	8002370 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002338:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <HAL_RCC_OscConfig+0x248>)
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7ff fa1d 	bl	800177c <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002344:	e00e      	b.n	8002364 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002346:	f7ff fa19 	bl	800177c <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d907      	bls.n	8002364 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e150      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
 8002358:	40023800 	.word	0x40023800
 800235c:	42470000 	.word	0x42470000
 8002360:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002364:	4b88      	ldr	r3, [pc, #544]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1ea      	bne.n	8002346 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 8097 	beq.w	80024ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002382:	4b81      	ldr	r3, [pc, #516]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10f      	bne.n	80023ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	4b7d      	ldr	r3, [pc, #500]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	4a7c      	ldr	r2, [pc, #496]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800239c:	6413      	str	r3, [r2, #64]	@ 0x40
 800239e:	4b7a      	ldr	r3, [pc, #488]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023aa:	2301      	movs	r3, #1
 80023ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ae:	4b77      	ldr	r3, [pc, #476]	@ (800258c <HAL_RCC_OscConfig+0x474>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d118      	bne.n	80023ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ba:	4b74      	ldr	r3, [pc, #464]	@ (800258c <HAL_RCC_OscConfig+0x474>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a73      	ldr	r2, [pc, #460]	@ (800258c <HAL_RCC_OscConfig+0x474>)
 80023c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c6:	f7ff f9d9 	bl	800177c <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ce:	f7ff f9d5 	bl	800177c <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e10c      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	4b6a      	ldr	r3, [pc, #424]	@ (800258c <HAL_RCC_OscConfig+0x474>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x2ea>
 80023f4:	4b64      	ldr	r3, [pc, #400]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f8:	4a63      	ldr	r2, [pc, #396]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002400:	e01c      	b.n	800243c <HAL_RCC_OscConfig+0x324>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b05      	cmp	r3, #5
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x30c>
 800240a:	4b5f      	ldr	r3, [pc, #380]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240e:	4a5e      	ldr	r2, [pc, #376]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	6713      	str	r3, [r2, #112]	@ 0x70
 8002416:	4b5c      	ldr	r3, [pc, #368]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800241a:	4a5b      	ldr	r2, [pc, #364]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6713      	str	r3, [r2, #112]	@ 0x70
 8002422:	e00b      	b.n	800243c <HAL_RCC_OscConfig+0x324>
 8002424:	4b58      	ldr	r3, [pc, #352]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002428:	4a57      	ldr	r2, [pc, #348]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 800242a:	f023 0301 	bic.w	r3, r3, #1
 800242e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002430:	4b55      	ldr	r3, [pc, #340]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002434:	4a54      	ldr	r2, [pc, #336]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002436:	f023 0304 	bic.w	r3, r3, #4
 800243a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d015      	beq.n	8002470 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002444:	f7ff f99a 	bl	800177c <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244a:	e00a      	b.n	8002462 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244c:	f7ff f996 	bl	800177c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e0cb      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002462:	4b49      	ldr	r3, [pc, #292]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0ee      	beq.n	800244c <HAL_RCC_OscConfig+0x334>
 800246e:	e014      	b.n	800249a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002470:	f7ff f984 	bl	800177c <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002476:	e00a      	b.n	800248e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002478:	f7ff f980 	bl	800177c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e0b5      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248e:	4b3e      	ldr	r3, [pc, #248]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1ee      	bne.n	8002478 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800249a:	7dfb      	ldrb	r3, [r7, #23]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d105      	bne.n	80024ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a0:	4b39      	ldr	r3, [pc, #228]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 80024a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a4:	4a38      	ldr	r2, [pc, #224]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 80024a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80a1 	beq.w	80025f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024b6:	4b34      	ldr	r3, [pc, #208]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d05c      	beq.n	800257c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d141      	bne.n	800254e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ca:	4b31      	ldr	r3, [pc, #196]	@ (8002590 <HAL_RCC_OscConfig+0x478>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7ff f954 	bl	800177c <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d8:	f7ff f950 	bl	800177c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e087      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ea:	4b27      	ldr	r3, [pc, #156]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	019b      	lsls	r3, r3, #6
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250c:	085b      	lsrs	r3, r3, #1
 800250e:	3b01      	subs	r3, #1
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002518:	061b      	lsls	r3, r3, #24
 800251a:	491b      	ldr	r1, [pc, #108]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002520:	4b1b      	ldr	r3, [pc, #108]	@ (8002590 <HAL_RCC_OscConfig+0x478>)
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002526:	f7ff f929 	bl	800177c <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252e:	f7ff f925 	bl	800177c <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e05c      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002540:	4b11      	ldr	r3, [pc, #68]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x416>
 800254c:	e054      	b.n	80025f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254e:	4b10      	ldr	r3, [pc, #64]	@ (8002590 <HAL_RCC_OscConfig+0x478>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7ff f912 	bl	800177c <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255c:	f7ff f90e 	bl	800177c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e045      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256e:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x444>
 800257a:	e03d      	b.n	80025f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d107      	bne.n	8002594 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e038      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
 8002588:	40023800 	.word	0x40023800
 800258c:	40007000 	.word	0x40007000
 8002590:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002594:	4b1b      	ldr	r3, [pc, #108]	@ (8002604 <HAL_RCC_OscConfig+0x4ec>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d028      	beq.n	80025f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d121      	bne.n	80025f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d11a      	bne.n	80025f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025c4:	4013      	ands	r3, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d111      	bne.n	80025f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025da:	085b      	lsrs	r3, r3, #1
 80025dc:	3b01      	subs	r3, #1
 80025de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d107      	bne.n	80025f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800

08002608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0cc      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800261c:	4b68      	ldr	r3, [pc, #416]	@ (80027c0 <HAL_RCC_ClockConfig+0x1b8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d90c      	bls.n	8002644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b65      	ldr	r3, [pc, #404]	@ (80027c0 <HAL_RCC_ClockConfig+0x1b8>)
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b63      	ldr	r3, [pc, #396]	@ (80027c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0b8      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d020      	beq.n	8002692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800265c:	4b59      	ldr	r3, [pc, #356]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	4a58      	ldr	r2, [pc, #352]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002666:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002674:	4b53      	ldr	r3, [pc, #332]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4a52      	ldr	r2, [pc, #328]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800267e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002680:	4b50      	ldr	r3, [pc, #320]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	494d      	ldr	r1, [pc, #308]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d044      	beq.n	8002728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	4b47      	ldr	r3, [pc, #284]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d119      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e07f      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d003      	beq.n	80026c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c6:	4b3f      	ldr	r3, [pc, #252]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d109      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e06f      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d6:	4b3b      	ldr	r3, [pc, #236]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e067      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e6:	4b37      	ldr	r3, [pc, #220]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f023 0203 	bic.w	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4934      	ldr	r1, [pc, #208]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f8:	f7ff f840 	bl	800177c <HAL_GetTick>
 80026fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002700:	f7ff f83c 	bl	800177c <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e04f      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002716:	4b2b      	ldr	r3, [pc, #172]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 020c 	and.w	r2, r3, #12
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	429a      	cmp	r2, r3
 8002726:	d1eb      	bne.n	8002700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002728:	4b25      	ldr	r3, [pc, #148]	@ (80027c0 <HAL_RCC_ClockConfig+0x1b8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d20c      	bcs.n	8002750 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b22      	ldr	r3, [pc, #136]	@ (80027c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b20      	ldr	r3, [pc, #128]	@ (80027c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e032      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800275c:	4b19      	ldr	r3, [pc, #100]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4916      	ldr	r1, [pc, #88]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800277a:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	490e      	ldr	r1, [pc, #56]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	4313      	orrs	r3, r2
 800278c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800278e:	f000 f821 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8002792:	4602      	mov	r2, r0
 8002794:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	490a      	ldr	r1, [pc, #40]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 80027a0:	5ccb      	ldrb	r3, [r1, r3]
 80027a2:	fa22 f303 	lsr.w	r3, r2, r3
 80027a6:	4a09      	ldr	r2, [pc, #36]	@ (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027aa:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe ffa0 	bl	80016f4 <HAL_InitTick>

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40023c00 	.word	0x40023c00
 80027c4:	40023800 	.word	0x40023800
 80027c8:	08004bfc 	.word	0x08004bfc
 80027cc:	20000010 	.word	0x20000010
 80027d0:	20000014 	.word	0x20000014

080027d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027d8:	b094      	sub	sp, #80	@ 0x50
 80027da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	647b      	str	r3, [r7, #68]	@ 0x44
 80027e0:	2300      	movs	r3, #0
 80027e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027e4:	2300      	movs	r3, #0
 80027e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ec:	4b79      	ldr	r3, [pc, #484]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d00d      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x40>
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	f200 80e1 	bhi.w	80029c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0x34>
 8002802:	2b04      	cmp	r3, #4
 8002804:	d003      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0x3a>
 8002806:	e0db      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002808:	4b73      	ldr	r3, [pc, #460]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800280a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800280c:	e0db      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800280e:	4b73      	ldr	r3, [pc, #460]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x208>)
 8002810:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002812:	e0d8      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002814:	4b6f      	ldr	r3, [pc, #444]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800281c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800281e:	4b6d      	ldr	r3, [pc, #436]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d063      	beq.n	80028f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282a:	4b6a      	ldr	r3, [pc, #424]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	099b      	lsrs	r3, r3, #6
 8002830:	2200      	movs	r2, #0
 8002832:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002834:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800283c:	633b      	str	r3, [r7, #48]	@ 0x30
 800283e:	2300      	movs	r3, #0
 8002840:	637b      	str	r3, [r7, #52]	@ 0x34
 8002842:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002846:	4622      	mov	r2, r4
 8002848:	462b      	mov	r3, r5
 800284a:	f04f 0000 	mov.w	r0, #0
 800284e:	f04f 0100 	mov.w	r1, #0
 8002852:	0159      	lsls	r1, r3, #5
 8002854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002858:	0150      	lsls	r0, r2, #5
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4621      	mov	r1, r4
 8002860:	1a51      	subs	r1, r2, r1
 8002862:	6139      	str	r1, [r7, #16]
 8002864:	4629      	mov	r1, r5
 8002866:	eb63 0301 	sbc.w	r3, r3, r1
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002878:	4659      	mov	r1, fp
 800287a:	018b      	lsls	r3, r1, #6
 800287c:	4651      	mov	r1, sl
 800287e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002882:	4651      	mov	r1, sl
 8002884:	018a      	lsls	r2, r1, #6
 8002886:	4651      	mov	r1, sl
 8002888:	ebb2 0801 	subs.w	r8, r2, r1
 800288c:	4659      	mov	r1, fp
 800288e:	eb63 0901 	sbc.w	r9, r3, r1
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800289e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028a6:	4690      	mov	r8, r2
 80028a8:	4699      	mov	r9, r3
 80028aa:	4623      	mov	r3, r4
 80028ac:	eb18 0303 	adds.w	r3, r8, r3
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	462b      	mov	r3, r5
 80028b4:	eb49 0303 	adc.w	r3, r9, r3
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028c6:	4629      	mov	r1, r5
 80028c8:	024b      	lsls	r3, r1, #9
 80028ca:	4621      	mov	r1, r4
 80028cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028d0:	4621      	mov	r1, r4
 80028d2:	024a      	lsls	r2, r1, #9
 80028d4:	4610      	mov	r0, r2
 80028d6:	4619      	mov	r1, r3
 80028d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028da:	2200      	movs	r2, #0
 80028dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028e4:	f7fd fc70 	bl	80001c8 <__aeabi_uldivmod>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4613      	mov	r3, r2
 80028ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028f0:	e058      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f2:	4b38      	ldr	r3, [pc, #224]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	099b      	lsrs	r3, r3, #6
 80028f8:	2200      	movs	r2, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	4611      	mov	r1, r2
 80028fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002902:	623b      	str	r3, [r7, #32]
 8002904:	2300      	movs	r3, #0
 8002906:	627b      	str	r3, [r7, #36]	@ 0x24
 8002908:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800290c:	4642      	mov	r2, r8
 800290e:	464b      	mov	r3, r9
 8002910:	f04f 0000 	mov.w	r0, #0
 8002914:	f04f 0100 	mov.w	r1, #0
 8002918:	0159      	lsls	r1, r3, #5
 800291a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800291e:	0150      	lsls	r0, r2, #5
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4641      	mov	r1, r8
 8002926:	ebb2 0a01 	subs.w	sl, r2, r1
 800292a:	4649      	mov	r1, r9
 800292c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800293c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002940:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002944:	ebb2 040a 	subs.w	r4, r2, sl
 8002948:	eb63 050b 	sbc.w	r5, r3, fp
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	00eb      	lsls	r3, r5, #3
 8002956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800295a:	00e2      	lsls	r2, r4, #3
 800295c:	4614      	mov	r4, r2
 800295e:	461d      	mov	r5, r3
 8002960:	4643      	mov	r3, r8
 8002962:	18e3      	adds	r3, r4, r3
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	464b      	mov	r3, r9
 8002968:	eb45 0303 	adc.w	r3, r5, r3
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	e9d7 4500 	ldrd	r4, r5, [r7]
 800297a:	4629      	mov	r1, r5
 800297c:	028b      	lsls	r3, r1, #10
 800297e:	4621      	mov	r1, r4
 8002980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002984:	4621      	mov	r1, r4
 8002986:	028a      	lsls	r2, r1, #10
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800298e:	2200      	movs	r2, #0
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	61fa      	str	r2, [r7, #28]
 8002994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002998:	f7fd fc16 	bl	80001c8 <__aeabi_uldivmod>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4613      	mov	r3, r2
 80029a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029a4:	4b0b      	ldr	r3, [pc, #44]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	0c1b      	lsrs	r3, r3, #16
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	3301      	adds	r3, #1
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80029b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029be:	e002      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029c0:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80029c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3750      	adds	r7, #80	@ 0x50
 80029cc:	46bd      	mov	sp, r7
 80029ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	00f42400 	.word	0x00f42400
 80029dc:	007a1200 	.word	0x007a1200

080029e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e4:	4b03      	ldr	r3, [pc, #12]	@ (80029f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	20000010 	.word	0x20000010

080029f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029fc:	f7ff fff0 	bl	80029e0 <HAL_RCC_GetHCLKFreq>
 8002a00:	4602      	mov	r2, r0
 8002a02:	4b05      	ldr	r3, [pc, #20]	@ (8002a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	0a9b      	lsrs	r3, r3, #10
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	4903      	ldr	r1, [pc, #12]	@ (8002a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a0e:	5ccb      	ldrb	r3, [r1, r3]
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	08004c0c 	.word	0x08004c0c

08002a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a24:	f7ff ffdc 	bl	80029e0 <HAL_RCC_GetHCLKFreq>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	0b5b      	lsrs	r3, r3, #13
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	4903      	ldr	r1, [pc, #12]	@ (8002a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a36:	5ccb      	ldrb	r3, [r1, r3]
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40023800 	.word	0x40023800
 8002a44:	08004c0c 	.word	0x08004c0c

08002a48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e07b      	b.n	8002b52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d108      	bne.n	8002a74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a6a:	d009      	beq.n	8002a80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	61da      	str	r2, [r3, #28]
 8002a72:	e005      	b.n	8002a80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe fc00 	bl	80012a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ab6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b04:	ea42 0103 	orr.w	r1, r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	f003 0104 	and.w	r1, r3, #4
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	f003 0210 	and.w	r2, r3, #16
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69da      	ldr	r2, [r3, #28]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b088      	sub	sp, #32
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	603b      	str	r3, [r7, #0]
 8002b66:	4613      	mov	r3, r2
 8002b68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_SPI_Transmit+0x22>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e126      	b.n	8002dca <HAL_SPI_Transmit+0x270>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b84:	f7fe fdfa 	bl	800177c <HAL_GetTick>
 8002b88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b8a:	88fb      	ldrh	r3, [r7, #6]
 8002b8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d002      	beq.n	8002ba0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b9e:	e10b      	b.n	8002db8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <HAL_SPI_Transmit+0x52>
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d102      	bne.n	8002bb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bb0:	e102      	b.n	8002db8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	88fa      	ldrh	r2, [r7, #6]
 8002bca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	88fa      	ldrh	r2, [r7, #6]
 8002bd0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bf8:	d10f      	bne.n	8002c1a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c24:	2b40      	cmp	r3, #64	@ 0x40
 8002c26:	d007      	beq.n	8002c38 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c40:	d14b      	bne.n	8002cda <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_SPI_Transmit+0xf6>
 8002c4a:	8afb      	ldrh	r3, [r7, #22]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d13e      	bne.n	8002cce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c54:	881a      	ldrh	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c60:	1c9a      	adds	r2, r3, #2
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c74:	e02b      	b.n	8002cce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d112      	bne.n	8002caa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	881a      	ldrh	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c94:	1c9a      	adds	r2, r3, #2
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ca8:	e011      	b.n	8002cce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002caa:	f7fe fd67 	bl	800177c <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d803      	bhi.n	8002cc2 <HAL_SPI_Transmit+0x168>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d102      	bne.n	8002cc8 <HAL_SPI_Transmit+0x16e>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d102      	bne.n	8002cce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ccc:	e074      	b.n	8002db8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1ce      	bne.n	8002c76 <HAL_SPI_Transmit+0x11c>
 8002cd8:	e04c      	b.n	8002d74 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_SPI_Transmit+0x18e>
 8002ce2:	8afb      	ldrh	r3, [r7, #22]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d140      	bne.n	8002d6a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	330c      	adds	r3, #12
 8002cf2:	7812      	ldrb	r2, [r2, #0]
 8002cf4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d0e:	e02c      	b.n	8002d6a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d113      	bne.n	8002d46 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	330c      	adds	r3, #12
 8002d28:	7812      	ldrb	r2, [r2, #0]
 8002d2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d44:	e011      	b.n	8002d6a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d46:	f7fe fd19 	bl	800177c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d803      	bhi.n	8002d5e <HAL_SPI_Transmit+0x204>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d102      	bne.n	8002d64 <HAL_SPI_Transmit+0x20a>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d102      	bne.n	8002d6a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d68:	e026      	b.n	8002db8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1cd      	bne.n	8002d10 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	6839      	ldr	r1, [r7, #0]
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f8b3 	bl	8002ee4 <SPI_EndRxTxTransaction>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10a      	bne.n	8002da8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	77fb      	strb	r3, [r7, #31]
 8002db4:	e000      	b.n	8002db8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002db6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002dc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3720      	adds	r7, #32
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	4613      	mov	r3, r2
 8002de2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002de4:	f7fe fcca 	bl	800177c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	4413      	add	r3, r2
 8002df2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002df4:	f7fe fcc2 	bl	800177c <HAL_GetTick>
 8002df8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dfa:	4b39      	ldr	r3, [pc, #228]	@ (8002ee0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	015b      	lsls	r3, r3, #5
 8002e00:	0d1b      	lsrs	r3, r3, #20
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	fb02 f303 	mul.w	r3, r2, r3
 8002e08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e0a:	e054      	b.n	8002eb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e12:	d050      	beq.n	8002eb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e14:	f7fe fcb2 	bl	800177c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	69fa      	ldr	r2, [r7, #28]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d902      	bls.n	8002e2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d13d      	bne.n	8002ea6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e42:	d111      	bne.n	8002e68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e4c:	d004      	beq.n	8002e58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e56:	d107      	bne.n	8002e68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e70:	d10f      	bne.n	8002e92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e017      	b.n	8002ed6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	bf0c      	ite	eq
 8002ec6:	2301      	moveq	r3, #1
 8002ec8:	2300      	movne	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d19b      	bne.n	8002e0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3720      	adds	r7, #32
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000010 	.word	0x20000010

08002ee4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f60 <SPI_EndRxTxTransaction+0x7c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f64 <SPI_EndRxTxTransaction+0x80>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	0d5b      	lsrs	r3, r3, #21
 8002efc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f00:	fb02 f303 	mul.w	r3, r2, r3
 8002f04:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f0e:	d112      	bne.n	8002f36 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2200      	movs	r2, #0
 8002f18:	2180      	movs	r1, #128	@ 0x80
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7ff ff5a 	bl	8002dd4 <SPI_WaitFlagStateUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d016      	beq.n	8002f54 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2a:	f043 0220 	orr.w	r2, r3, #32
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e00f      	b.n	8002f56 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00a      	beq.n	8002f52 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f4c:	2b80      	cmp	r3, #128	@ 0x80
 8002f4e:	d0f2      	beq.n	8002f36 <SPI_EndRxTxTransaction+0x52>
 8002f50:	e000      	b.n	8002f54 <SPI_EndRxTxTransaction+0x70>
        break;
 8002f52:	bf00      	nop
  }

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000010 	.word	0x20000010
 8002f64:	165e9f81 	.word	0x165e9f81

08002f68 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e034      	b.n	8002fe8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f7fd fb62 	bl	800065c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	3308      	adds	r3, #8
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	f001 fd1a 	bl	80049dc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	f001 fd64 	bl	8004a80 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6858      	ldr	r0, [r3, #4]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	f001 fd99 	bl	8004afc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	6892      	ldr	r2, [r2, #8]
 8002fd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	6892      	ldr	r2, [r2, #8]
 8002fde:	f041 0101 	orr.w	r1, r1, #1
 8002fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e041      	b.n	8003086 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fe fa54 	bl	80014c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3304      	adds	r3, #4
 800302c:	4619      	mov	r1, r3
 800302e:	4610      	mov	r0, r2
 8003030:	f000 fa96 	bl	8003560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d001      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e04e      	b.n	8003146 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a23      	ldr	r2, [pc, #140]	@ (8003154 <HAL_TIM_Base_Start_IT+0xc4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d022      	beq.n	8003110 <HAL_TIM_Base_Start_IT+0x80>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d2:	d01d      	beq.n	8003110 <HAL_TIM_Base_Start_IT+0x80>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003158 <HAL_TIM_Base_Start_IT+0xc8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d018      	beq.n	8003110 <HAL_TIM_Base_Start_IT+0x80>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1e      	ldr	r2, [pc, #120]	@ (800315c <HAL_TIM_Base_Start_IT+0xcc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d013      	beq.n	8003110 <HAL_TIM_Base_Start_IT+0x80>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003160 <HAL_TIM_Base_Start_IT+0xd0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00e      	beq.n	8003110 <HAL_TIM_Base_Start_IT+0x80>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003164 <HAL_TIM_Base_Start_IT+0xd4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d009      	beq.n	8003110 <HAL_TIM_Base_Start_IT+0x80>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a19      	ldr	r2, [pc, #100]	@ (8003168 <HAL_TIM_Base_Start_IT+0xd8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d004      	beq.n	8003110 <HAL_TIM_Base_Start_IT+0x80>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a18      	ldr	r2, [pc, #96]	@ (800316c <HAL_TIM_Base_Start_IT+0xdc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d111      	bne.n	8003134 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2b06      	cmp	r3, #6
 8003120:	d010      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0201 	orr.w	r2, r2, #1
 8003130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003132:	e007      	b.n	8003144 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40010000 	.word	0x40010000
 8003158:	40000400 	.word	0x40000400
 800315c:	40000800 	.word	0x40000800
 8003160:	40000c00 	.word	0x40000c00
 8003164:	40010400 	.word	0x40010400
 8003168:	40014000 	.word	0x40014000
 800316c:	40001800 	.word	0x40001800

08003170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b02      	cmp	r3, #2
 8003184:	d122      	bne.n	80031cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b02      	cmp	r3, #2
 8003192:	d11b      	bne.n	80031cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0202 	mvn.w	r2, #2
 800319c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f9b5 	bl	8003522 <HAL_TIM_IC_CaptureCallback>
 80031b8:	e005      	b.n	80031c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f9a7 	bl	800350e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f9b8 	bl	8003536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d122      	bne.n	8003220 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d11b      	bne.n	8003220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0204 	mvn.w	r2, #4
 80031f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2202      	movs	r2, #2
 80031f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f98b 	bl	8003522 <HAL_TIM_IC_CaptureCallback>
 800320c:	e005      	b.n	800321a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f97d 	bl	800350e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f98e 	bl	8003536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b08      	cmp	r3, #8
 800322c:	d122      	bne.n	8003274 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b08      	cmp	r3, #8
 800323a:	d11b      	bne.n	8003274 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0208 	mvn.w	r2, #8
 8003244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2204      	movs	r2, #4
 800324a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f961 	bl	8003522 <HAL_TIM_IC_CaptureCallback>
 8003260:	e005      	b.n	800326e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f953 	bl	800350e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f964 	bl	8003536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	2b10      	cmp	r3, #16
 8003280:	d122      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b10      	cmp	r3, #16
 800328e:	d11b      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0210 	mvn.w	r2, #16
 8003298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2208      	movs	r2, #8
 800329e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f937 	bl	8003522 <HAL_TIM_IC_CaptureCallback>
 80032b4:	e005      	b.n	80032c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f929 	bl	800350e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f93a 	bl	8003536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d10e      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d107      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0201 	mvn.w	r2, #1
 80032ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fd ff44 	bl	800117c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032fe:	2b80      	cmp	r3, #128	@ 0x80
 8003300:	d10e      	bne.n	8003320 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330c:	2b80      	cmp	r3, #128	@ 0x80
 800330e:	d107      	bne.n	8003320 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fae0 	bl	80038e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800332a:	2b40      	cmp	r3, #64	@ 0x40
 800332c:	d10e      	bne.n	800334c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003338:	2b40      	cmp	r3, #64	@ 0x40
 800333a:	d107      	bne.n	800334c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8ff 	bl	800354a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b20      	cmp	r3, #32
 8003358:	d10e      	bne.n	8003378 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 0320 	and.w	r3, r3, #32
 8003364:	2b20      	cmp	r3, #32
 8003366:	d107      	bne.n	8003378 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0220 	mvn.w	r2, #32
 8003370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 faaa 	bl	80038cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_TIM_ConfigClockSource+0x1c>
 8003398:	2302      	movs	r3, #2
 800339a:	e0b4      	b.n	8003506 <HAL_TIM_ConfigClockSource+0x186>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80033ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033d4:	d03e      	beq.n	8003454 <HAL_TIM_ConfigClockSource+0xd4>
 80033d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033da:	f200 8087 	bhi.w	80034ec <HAL_TIM_ConfigClockSource+0x16c>
 80033de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033e2:	f000 8086 	beq.w	80034f2 <HAL_TIM_ConfigClockSource+0x172>
 80033e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ea:	d87f      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x16c>
 80033ec:	2b70      	cmp	r3, #112	@ 0x70
 80033ee:	d01a      	beq.n	8003426 <HAL_TIM_ConfigClockSource+0xa6>
 80033f0:	2b70      	cmp	r3, #112	@ 0x70
 80033f2:	d87b      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x16c>
 80033f4:	2b60      	cmp	r3, #96	@ 0x60
 80033f6:	d050      	beq.n	800349a <HAL_TIM_ConfigClockSource+0x11a>
 80033f8:	2b60      	cmp	r3, #96	@ 0x60
 80033fa:	d877      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x16c>
 80033fc:	2b50      	cmp	r3, #80	@ 0x50
 80033fe:	d03c      	beq.n	800347a <HAL_TIM_ConfigClockSource+0xfa>
 8003400:	2b50      	cmp	r3, #80	@ 0x50
 8003402:	d873      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x16c>
 8003404:	2b40      	cmp	r3, #64	@ 0x40
 8003406:	d058      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0x13a>
 8003408:	2b40      	cmp	r3, #64	@ 0x40
 800340a:	d86f      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x16c>
 800340c:	2b30      	cmp	r3, #48	@ 0x30
 800340e:	d064      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x15a>
 8003410:	2b30      	cmp	r3, #48	@ 0x30
 8003412:	d86b      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x16c>
 8003414:	2b20      	cmp	r3, #32
 8003416:	d060      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x15a>
 8003418:	2b20      	cmp	r3, #32
 800341a:	d867      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x16c>
 800341c:	2b00      	cmp	r3, #0
 800341e:	d05c      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x15a>
 8003420:	2b10      	cmp	r3, #16
 8003422:	d05a      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x15a>
 8003424:	e062      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	6899      	ldr	r1, [r3, #8]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f000 f9ad 	bl	8003794 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003448:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	609a      	str	r2, [r3, #8]
      break;
 8003452:	e04f      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6899      	ldr	r1, [r3, #8]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f000 f996 	bl	8003794 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003476:	609a      	str	r2, [r3, #8]
      break;
 8003478:	e03c      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6859      	ldr	r1, [r3, #4]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	461a      	mov	r2, r3
 8003488:	f000 f90a 	bl	80036a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2150      	movs	r1, #80	@ 0x50
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f963 	bl	800375e <TIM_ITRx_SetConfig>
      break;
 8003498:	e02c      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6859      	ldr	r1, [r3, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	461a      	mov	r2, r3
 80034a8:	f000 f929 	bl	80036fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2160      	movs	r1, #96	@ 0x60
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f953 	bl	800375e <TIM_ITRx_SetConfig>
      break;
 80034b8:	e01c      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6859      	ldr	r1, [r3, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	461a      	mov	r2, r3
 80034c8:	f000 f8ea 	bl	80036a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2140      	movs	r1, #64	@ 0x40
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f943 	bl	800375e <TIM_ITRx_SetConfig>
      break;
 80034d8:	e00c      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4619      	mov	r1, r3
 80034e4:	4610      	mov	r0, r2
 80034e6:	f000 f93a 	bl	800375e <TIM_ITRx_SetConfig>
      break;
 80034ea:	e003      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
      break;
 80034f0:	e000      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003504:	7bfb      	ldrb	r3, [r7, #15]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a40      	ldr	r2, [pc, #256]	@ (8003674 <TIM_Base_SetConfig+0x114>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d013      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800357e:	d00f      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a3d      	ldr	r2, [pc, #244]	@ (8003678 <TIM_Base_SetConfig+0x118>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00b      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a3c      	ldr	r2, [pc, #240]	@ (800367c <TIM_Base_SetConfig+0x11c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d007      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a3b      	ldr	r2, [pc, #236]	@ (8003680 <TIM_Base_SetConfig+0x120>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d003      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a3a      	ldr	r2, [pc, #232]	@ (8003684 <TIM_Base_SetConfig+0x124>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d108      	bne.n	80035b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003674 <TIM_Base_SetConfig+0x114>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d02b      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035c0:	d027      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003678 <TIM_Base_SetConfig+0x118>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d023      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a2b      	ldr	r2, [pc, #172]	@ (800367c <TIM_Base_SetConfig+0x11c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d01f      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003680 <TIM_Base_SetConfig+0x120>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d01b      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a29      	ldr	r2, [pc, #164]	@ (8003684 <TIM_Base_SetConfig+0x124>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d017      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a28      	ldr	r2, [pc, #160]	@ (8003688 <TIM_Base_SetConfig+0x128>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a27      	ldr	r2, [pc, #156]	@ (800368c <TIM_Base_SetConfig+0x12c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00f      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a26      	ldr	r2, [pc, #152]	@ (8003690 <TIM_Base_SetConfig+0x130>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00b      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a25      	ldr	r2, [pc, #148]	@ (8003694 <TIM_Base_SetConfig+0x134>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d007      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a24      	ldr	r2, [pc, #144]	@ (8003698 <TIM_Base_SetConfig+0x138>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d003      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a23      	ldr	r2, [pc, #140]	@ (800369c <TIM_Base_SetConfig+0x13c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d108      	bne.n	8003624 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a0a      	ldr	r2, [pc, #40]	@ (8003674 <TIM_Base_SetConfig+0x114>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <TIM_Base_SetConfig+0xf8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a0c      	ldr	r2, [pc, #48]	@ (8003684 <TIM_Base_SetConfig+0x124>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d103      	bne.n	8003660 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	615a      	str	r2, [r3, #20]
}
 8003666:	bf00      	nop
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40010000 	.word	0x40010000
 8003678:	40000400 	.word	0x40000400
 800367c:	40000800 	.word	0x40000800
 8003680:	40000c00 	.word	0x40000c00
 8003684:	40010400 	.word	0x40010400
 8003688:	40014000 	.word	0x40014000
 800368c:	40014400 	.word	0x40014400
 8003690:	40014800 	.word	0x40014800
 8003694:	40001800 	.word	0x40001800
 8003698:	40001c00 	.word	0x40001c00
 800369c:	40002000 	.word	0x40002000

080036a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	f023 0201 	bic.w	r2, r3, #1
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f023 030a 	bic.w	r3, r3, #10
 80036dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	621a      	str	r2, [r3, #32]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036fe:	b480      	push	{r7}
 8003700:	b087      	sub	sp, #28
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	f023 0210 	bic.w	r2, r3, #16
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003728:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	031b      	lsls	r3, r3, #12
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4313      	orrs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800373a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	621a      	str	r2, [r3, #32]
}
 8003752:	bf00      	nop
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800375e:	b480      	push	{r7}
 8003760:	b085      	sub	sp, #20
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003774:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	f043 0307 	orr.w	r3, r3, #7
 8003780:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	609a      	str	r2, [r3, #8]
}
 8003788:	bf00      	nop
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	021a      	lsls	r2, r3, #8
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	609a      	str	r2, [r3, #8]
}
 80037c8:	bf00      	nop
 80037ca:	371c      	adds	r7, #28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e05a      	b.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a21      	ldr	r2, [pc, #132]	@ (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d022      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003838:	d01d      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1d      	ldr	r2, [pc, #116]	@ (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d018      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1b      	ldr	r2, [pc, #108]	@ (80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d013      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a1a      	ldr	r2, [pc, #104]	@ (80038bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00e      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a18      	ldr	r2, [pc, #96]	@ (80038c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d009      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a17      	ldr	r2, [pc, #92]	@ (80038c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d004      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a15      	ldr	r2, [pc, #84]	@ (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d10c      	bne.n	8003890 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800387c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	4313      	orrs	r3, r2
 8003886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40010000 	.word	0x40010000
 80038b4:	40000400 	.word	0x40000400
 80038b8:	40000800 	.word	0x40000800
 80038bc:	40000c00 	.word	0x40000c00
 80038c0:	40010400 	.word	0x40010400
 80038c4:	40014000 	.word	0x40014000
 80038c8:	40001800 	.word	0x40001800

080038cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e03f      	b.n	8003986 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fd fe4e 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2224      	movs	r2, #36	@ 0x24
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fddb 	bl	80044f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800394c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695a      	ldr	r2, [r3, #20]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800395c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800396c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b08a      	sub	sp, #40	@ 0x28
 8003992:	af02      	add	r7, sp, #8
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	603b      	str	r3, [r7, #0]
 800399a:	4613      	mov	r3, r2
 800399c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d17c      	bne.n	8003aa8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <HAL_UART_Transmit+0x2c>
 80039b4:	88fb      	ldrh	r3, [r7, #6]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e075      	b.n	8003aaa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_UART_Transmit+0x3e>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e06e      	b.n	8003aaa <HAL_UART_Transmit+0x11c>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2221      	movs	r2, #33	@ 0x21
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039e2:	f7fd fecb 	bl	800177c <HAL_GetTick>
 80039e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	88fa      	ldrh	r2, [r7, #6]
 80039ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	88fa      	ldrh	r2, [r7, #6]
 80039f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039fc:	d108      	bne.n	8003a10 <HAL_UART_Transmit+0x82>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d104      	bne.n	8003a10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	e003      	b.n	8003a18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8003a20:	e02a      	b.n	8003a78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2180      	movs	r1, #128	@ 0x80
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 fb1f 	bl	8004070 <UART_WaitOnFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e036      	b.n	8003aaa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10b      	bne.n	8003a5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	3302      	adds	r3, #2
 8003a56:	61bb      	str	r3, [r7, #24]
 8003a58:	e007      	b.n	8003a6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	781a      	ldrb	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	3301      	adds	r3, #1
 8003a68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1cf      	bne.n	8003a22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2140      	movs	r1, #64	@ 0x40
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 faef 	bl	8004070 <UART_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e006      	b.n	8003aaa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e000      	b.n	8003aaa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003aa8:	2302      	movs	r3, #2
  }
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	4613      	mov	r3, r2
 8003abe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d11d      	bne.n	8003b08 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_UART_Receive_IT+0x26>
 8003ad2:	88fb      	ldrh	r3, [r7, #6]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e016      	b.n	8003b0a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_UART_Receive_IT+0x38>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e00f      	b.n	8003b0a <HAL_UART_Receive_IT+0x58>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003af8:	88fb      	ldrh	r3, [r7, #6]
 8003afa:	461a      	mov	r2, r3
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 fb24 	bl	800414c <UART_Start_Receive_IT>
 8003b04:	4603      	mov	r3, r0
 8003b06:	e000      	b.n	8003b0a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003b08:	2302      	movs	r3, #2
  }
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b0ba      	sub	sp, #232	@ 0xe8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10f      	bne.n	8003b7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b5e:	f003 0320 	and.w	r3, r3, #32
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <HAL_UART_IRQHandler+0x66>
 8003b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fc03 	bl	800437e <UART_Receive_IT>
      return;
 8003b78:	e256      	b.n	8004028 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 80de 	beq.w	8003d40 <HAL_UART_IRQHandler+0x22c>
 8003b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d106      	bne.n	8003b9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b94:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80d1 	beq.w	8003d40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <HAL_UART_IRQHandler+0xae>
 8003baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bba:	f043 0201 	orr.w	r2, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00b      	beq.n	8003be6 <HAL_UART_IRQHandler+0xd2>
 8003bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	f043 0202 	orr.w	r2, r3, #2
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00b      	beq.n	8003c0a <HAL_UART_IRQHandler+0xf6>
 8003bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	f043 0204 	orr.w	r2, r3, #4
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d011      	beq.n	8003c3a <HAL_UART_IRQHandler+0x126>
 8003c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d105      	bne.n	8003c2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d005      	beq.n	8003c3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	f043 0208 	orr.w	r2, r3, #8
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 81ed 	beq.w	800401e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <HAL_UART_IRQHandler+0x14e>
 8003c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fb8e 	bl	800437e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6c:	2b40      	cmp	r3, #64	@ 0x40
 8003c6e:	bf0c      	ite	eq
 8003c70:	2301      	moveq	r3, #1
 8003c72:	2300      	movne	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d103      	bne.n	8003c8e <HAL_UART_IRQHandler+0x17a>
 8003c86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d04f      	beq.n	8003d2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fa96 	bl	80041c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ca0:	d141      	bne.n	8003d26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3314      	adds	r3, #20
 8003ca8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3314      	adds	r3, #20
 8003cca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003cce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ce6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1d9      	bne.n	8003ca2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d013      	beq.n	8003d1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfa:	4a7d      	ldr	r2, [pc, #500]	@ (8003ef0 <HAL_UART_IRQHandler+0x3dc>)
 8003cfc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fd feeb 	bl	8001ade <HAL_DMA_Abort_IT>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d016      	beq.n	8003d3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d1c:	e00e      	b.n	8003d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f990 	bl	8004044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d24:	e00a      	b.n	8003d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f98c 	bl	8004044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2c:	e006      	b.n	8003d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f988 	bl	8004044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8003d3a:	e170      	b.n	800401e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3c:	bf00      	nop
    return;
 8003d3e:	e16e      	b.n	800401e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	f040 814a 	bne.w	8003fde <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 8143 	beq.w	8003fde <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 813c 	beq.w	8003fde <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d66:	2300      	movs	r3, #0
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d86:	2b40      	cmp	r3, #64	@ 0x40
 8003d88:	f040 80b4 	bne.w	8003ef4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 8140 	beq.w	8004022 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003daa:	429a      	cmp	r2, r3
 8003dac:	f080 8139 	bcs.w	8004022 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003db6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dc2:	f000 8088 	beq.w	8003ed6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	330c      	adds	r3, #12
 8003dcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dd4:	e853 3f00 	ldrex	r3, [r3]
 8003dd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003de4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	330c      	adds	r3, #12
 8003dee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003df2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003df6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003dfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1d9      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3314      	adds	r3, #20
 8003e18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e1c:	e853 3f00 	ldrex	r3, [r3]
 8003e20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3314      	adds	r3, #20
 8003e32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1e1      	bne.n	8003e12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3314      	adds	r3, #20
 8003e54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3314      	adds	r3, #20
 8003e6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1e3      	bne.n	8003e4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e9e:	e853 3f00 	ldrex	r3, [r3]
 8003ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ea4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ea6:	f023 0310 	bic.w	r3, r3, #16
 8003eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	330c      	adds	r3, #12
 8003eb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003eb8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003eba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ebe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ec0:	e841 2300 	strex	r3, r2, [r1]
 8003ec4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e3      	bne.n	8003e94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fd fd94 	bl	80019fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f8b6 	bl	8004058 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eec:	e099      	b.n	8004022 <HAL_UART_IRQHandler+0x50e>
 8003eee:	bf00      	nop
 8003ef0:	08004287 	.word	0x08004287
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 808b 	beq.w	8004026 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8086 	beq.w	8004026 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	330c      	adds	r3, #12
 8003f20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e3      	bne.n	8003f1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3314      	adds	r3, #20
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	623b      	str	r3, [r7, #32]
   return(result);
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3314      	adds	r3, #20
 8003f72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f76:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f7e:	e841 2300 	strex	r3, r2, [r1]
 8003f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e3      	bne.n	8003f52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0310 	bic.w	r3, r3, #16
 8003fae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	330c      	adds	r3, #12
 8003fb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003fbc:	61fa      	str	r2, [r7, #28]
 8003fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	69b9      	ldr	r1, [r7, #24]
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e3      	bne.n	8003f98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f83e 	bl	8004058 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fdc:	e023      	b.n	8004026 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d009      	beq.n	8003ffe <HAL_UART_IRQHandler+0x4ea>
 8003fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f959 	bl	80042ae <UART_Transmit_IT>
    return;
 8003ffc:	e014      	b.n	8004028 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00e      	beq.n	8004028 <HAL_UART_IRQHandler+0x514>
 800400a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800400e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	d008      	beq.n	8004028 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f999 	bl	800434e <UART_EndTransmit_IT>
    return;
 800401c:	e004      	b.n	8004028 <HAL_UART_IRQHandler+0x514>
    return;
 800401e:	bf00      	nop
 8004020:	e002      	b.n	8004028 <HAL_UART_IRQHandler+0x514>
      return;
 8004022:	bf00      	nop
 8004024:	e000      	b.n	8004028 <HAL_UART_IRQHandler+0x514>
      return;
 8004026:	bf00      	nop
  }
}
 8004028:	37e8      	adds	r7, #232	@ 0xe8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop

08004030 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b090      	sub	sp, #64	@ 0x40
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	4613      	mov	r3, r2
 800407e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004080:	e050      	b.n	8004124 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004082:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004088:	d04c      	beq.n	8004124 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800408a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800408c:	2b00      	cmp	r3, #0
 800408e:	d007      	beq.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004090:	f7fd fb74 	bl	800177c <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800409c:	429a      	cmp	r2, r3
 800409e:	d241      	bcs.n	8004124 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	330c      	adds	r3, #12
 80040a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80040b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	330c      	adds	r3, #12
 80040be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040c0:	637a      	str	r2, [r7, #52]	@ 0x34
 80040c2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80040c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80040ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e5      	bne.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3314      	adds	r3, #20
 80040da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	e853 3f00 	ldrex	r3, [r3]
 80040e2:	613b      	str	r3, [r7, #16]
   return(result);
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f023 0301 	bic.w	r3, r3, #1
 80040ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3314      	adds	r3, #20
 80040f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040f4:	623a      	str	r2, [r7, #32]
 80040f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	69f9      	ldr	r1, [r7, #28]
 80040fa:	6a3a      	ldr	r2, [r7, #32]
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	61bb      	str	r3, [r7, #24]
   return(result);
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e5      	bne.n	80040d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e00f      	b.n	8004144 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4013      	ands	r3, r2
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	429a      	cmp	r2, r3
 8004132:	bf0c      	ite	eq
 8004134:	2301      	moveq	r3, #1
 8004136:	2300      	movne	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	461a      	mov	r2, r3
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	429a      	cmp	r2, r3
 8004140:	d09f      	beq.n	8004082 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3740      	adds	r7, #64	@ 0x40
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	4613      	mov	r3, r2
 8004158:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	88fa      	ldrh	r2, [r7, #6]
 8004164:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	88fa      	ldrh	r2, [r7, #6]
 800416a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2222      	movs	r2, #34	@ 0x22
 8004176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004190:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695a      	ldr	r2, [r3, #20]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0201 	orr.w	r2, r2, #1
 80041a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0220 	orr.w	r2, r2, #32
 80041b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b095      	sub	sp, #84	@ 0x54
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	330c      	adds	r3, #12
 80041ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	330c      	adds	r3, #12
 80041e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80041ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e5      	bne.n	80041c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3314      	adds	r3, #20
 8004202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	61fb      	str	r3, [r7, #28]
   return(result);
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f023 0301 	bic.w	r3, r3, #1
 8004212:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3314      	adds	r3, #20
 800421a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800421c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800421e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004224:	e841 2300 	strex	r3, r2, [r1]
 8004228:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e5      	bne.n	80041fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004234:	2b01      	cmp	r3, #1
 8004236:	d119      	bne.n	800426c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	330c      	adds	r3, #12
 800423e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	e853 3f00 	ldrex	r3, [r3]
 8004246:	60bb      	str	r3, [r7, #8]
   return(result);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f023 0310 	bic.w	r3, r3, #16
 800424e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	330c      	adds	r3, #12
 8004256:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004258:	61ba      	str	r2, [r7, #24]
 800425a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425c:	6979      	ldr	r1, [r7, #20]
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	e841 2300 	strex	r3, r2, [r1]
 8004264:	613b      	str	r3, [r7, #16]
   return(result);
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e5      	bne.n	8004238 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800427a:	bf00      	nop
 800427c:	3754      	adds	r7, #84	@ 0x54
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004292:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f7ff fecf 	bl	8004044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042a6:	bf00      	nop
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b21      	cmp	r3, #33	@ 0x21
 80042c0:	d13e      	bne.n	8004340 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ca:	d114      	bne.n	80042f6 <UART_Transmit_IT+0x48>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d110      	bne.n	80042f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	1c9a      	adds	r2, r3, #2
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	621a      	str	r2, [r3, #32]
 80042f4:	e008      	b.n	8004308 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	1c59      	adds	r1, r3, #1
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6211      	str	r1, [r2, #32]
 8004300:	781a      	ldrb	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b01      	subs	r3, #1
 8004310:	b29b      	uxth	r3, r3
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	4619      	mov	r1, r3
 8004316:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10f      	bne.n	800433c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800432a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800433a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	e000      	b.n	8004342 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004340:	2302      	movs	r3, #2
  }
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b082      	sub	sp, #8
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004364:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7ff fe5e 	bl	8004030 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b08c      	sub	sp, #48	@ 0x30
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b22      	cmp	r3, #34	@ 0x22
 8004390:	f040 80ab 	bne.w	80044ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800439c:	d117      	bne.n	80043ce <UART_Receive_IT+0x50>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d113      	bne.n	80043ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043bc:	b29a      	uxth	r2, r3
 80043be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c6:	1c9a      	adds	r2, r3, #2
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80043cc:	e026      	b.n	800441c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043e0:	d007      	beq.n	80043f2 <UART_Receive_IT+0x74>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10a      	bne.n	8004400 <UART_Receive_IT+0x82>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	e008      	b.n	8004412 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800440c:	b2da      	uxtb	r2, r3
 800440e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004410:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29b      	uxth	r3, r3
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	4619      	mov	r1, r3
 800442a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800442c:	2b00      	cmp	r3, #0
 800442e:	d15a      	bne.n	80044e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0220 	bic.w	r2, r2, #32
 800443e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800444e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0201 	bic.w	r2, r2, #1
 800445e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446c:	2b01      	cmp	r3, #1
 800446e:	d135      	bne.n	80044dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	330c      	adds	r3, #12
 800447c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	613b      	str	r3, [r7, #16]
   return(result);
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f023 0310 	bic.w	r3, r3, #16
 800448c:	627b      	str	r3, [r7, #36]	@ 0x24
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	330c      	adds	r3, #12
 8004494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004496:	623a      	str	r2, [r7, #32]
 8004498:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	69f9      	ldr	r1, [r7, #28]
 800449c:	6a3a      	ldr	r2, [r7, #32]
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e5      	bne.n	8004476 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d10a      	bne.n	80044ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044d2:	4619      	mov	r1, r3
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff fdbf 	bl	8004058 <HAL_UARTEx_RxEventCallback>
 80044da:	e002      	b.n	80044e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7fd f825 	bl	800152c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e002      	b.n	80044ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	e000      	b.n	80044ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80044ea:	2302      	movs	r3, #2
  }
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3730      	adds	r7, #48	@ 0x30
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044f8:	b0c0      	sub	sp, #256	@ 0x100
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800450c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004510:	68d9      	ldr	r1, [r3, #12]
 8004512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	ea40 0301 	orr.w	r3, r0, r1
 800451c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800451e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	431a      	orrs	r2, r3
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	431a      	orrs	r2, r3
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800454c:	f021 010c 	bic.w	r1, r1, #12
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800455a:	430b      	orrs	r3, r1
 800455c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800455e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456e:	6999      	ldr	r1, [r3, #24]
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	ea40 0301 	orr.w	r3, r0, r1
 800457a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	4b8f      	ldr	r3, [pc, #572]	@ (80047c0 <UART_SetConfig+0x2cc>)
 8004584:	429a      	cmp	r2, r3
 8004586:	d005      	beq.n	8004594 <UART_SetConfig+0xa0>
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	4b8d      	ldr	r3, [pc, #564]	@ (80047c4 <UART_SetConfig+0x2d0>)
 8004590:	429a      	cmp	r2, r3
 8004592:	d104      	bne.n	800459e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004594:	f7fe fa44 	bl	8002a20 <HAL_RCC_GetPCLK2Freq>
 8004598:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800459c:	e003      	b.n	80045a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800459e:	f7fe fa2b 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
 80045a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045b0:	f040 810c 	bne.w	80047cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045b8:	2200      	movs	r2, #0
 80045ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045c6:	4622      	mov	r2, r4
 80045c8:	462b      	mov	r3, r5
 80045ca:	1891      	adds	r1, r2, r2
 80045cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045ce:	415b      	adcs	r3, r3
 80045d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045d6:	4621      	mov	r1, r4
 80045d8:	eb12 0801 	adds.w	r8, r2, r1
 80045dc:	4629      	mov	r1, r5
 80045de:	eb43 0901 	adc.w	r9, r3, r1
 80045e2:	f04f 0200 	mov.w	r2, #0
 80045e6:	f04f 0300 	mov.w	r3, #0
 80045ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045f6:	4690      	mov	r8, r2
 80045f8:	4699      	mov	r9, r3
 80045fa:	4623      	mov	r3, r4
 80045fc:	eb18 0303 	adds.w	r3, r8, r3
 8004600:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004604:	462b      	mov	r3, r5
 8004606:	eb49 0303 	adc.w	r3, r9, r3
 800460a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800461a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800461e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004622:	460b      	mov	r3, r1
 8004624:	18db      	adds	r3, r3, r3
 8004626:	653b      	str	r3, [r7, #80]	@ 0x50
 8004628:	4613      	mov	r3, r2
 800462a:	eb42 0303 	adc.w	r3, r2, r3
 800462e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004630:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004634:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004638:	f7fb fdc6 	bl	80001c8 <__aeabi_uldivmod>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4b61      	ldr	r3, [pc, #388]	@ (80047c8 <UART_SetConfig+0x2d4>)
 8004642:	fba3 2302 	umull	r2, r3, r3, r2
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	011c      	lsls	r4, r3, #4
 800464a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800464e:	2200      	movs	r2, #0
 8004650:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004654:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004658:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800465c:	4642      	mov	r2, r8
 800465e:	464b      	mov	r3, r9
 8004660:	1891      	adds	r1, r2, r2
 8004662:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004664:	415b      	adcs	r3, r3
 8004666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004668:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800466c:	4641      	mov	r1, r8
 800466e:	eb12 0a01 	adds.w	sl, r2, r1
 8004672:	4649      	mov	r1, r9
 8004674:	eb43 0b01 	adc.w	fp, r3, r1
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004684:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004688:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800468c:	4692      	mov	sl, r2
 800468e:	469b      	mov	fp, r3
 8004690:	4643      	mov	r3, r8
 8004692:	eb1a 0303 	adds.w	r3, sl, r3
 8004696:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800469a:	464b      	mov	r3, r9
 800469c:	eb4b 0303 	adc.w	r3, fp, r3
 80046a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046b8:	460b      	mov	r3, r1
 80046ba:	18db      	adds	r3, r3, r3
 80046bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80046be:	4613      	mov	r3, r2
 80046c0:	eb42 0303 	adc.w	r3, r2, r3
 80046c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80046ce:	f7fb fd7b 	bl	80001c8 <__aeabi_uldivmod>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4611      	mov	r1, r2
 80046d8:	4b3b      	ldr	r3, [pc, #236]	@ (80047c8 <UART_SetConfig+0x2d4>)
 80046da:	fba3 2301 	umull	r2, r3, r3, r1
 80046de:	095b      	lsrs	r3, r3, #5
 80046e0:	2264      	movs	r2, #100	@ 0x64
 80046e2:	fb02 f303 	mul.w	r3, r2, r3
 80046e6:	1acb      	subs	r3, r1, r3
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046ee:	4b36      	ldr	r3, [pc, #216]	@ (80047c8 <UART_SetConfig+0x2d4>)
 80046f0:	fba3 2302 	umull	r2, r3, r3, r2
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80046fc:	441c      	add	r4, r3
 80046fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004702:	2200      	movs	r2, #0
 8004704:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004708:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800470c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004710:	4642      	mov	r2, r8
 8004712:	464b      	mov	r3, r9
 8004714:	1891      	adds	r1, r2, r2
 8004716:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004718:	415b      	adcs	r3, r3
 800471a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800471c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004720:	4641      	mov	r1, r8
 8004722:	1851      	adds	r1, r2, r1
 8004724:	6339      	str	r1, [r7, #48]	@ 0x30
 8004726:	4649      	mov	r1, r9
 8004728:	414b      	adcs	r3, r1
 800472a:	637b      	str	r3, [r7, #52]	@ 0x34
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004738:	4659      	mov	r1, fp
 800473a:	00cb      	lsls	r3, r1, #3
 800473c:	4651      	mov	r1, sl
 800473e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004742:	4651      	mov	r1, sl
 8004744:	00ca      	lsls	r2, r1, #3
 8004746:	4610      	mov	r0, r2
 8004748:	4619      	mov	r1, r3
 800474a:	4603      	mov	r3, r0
 800474c:	4642      	mov	r2, r8
 800474e:	189b      	adds	r3, r3, r2
 8004750:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004754:	464b      	mov	r3, r9
 8004756:	460a      	mov	r2, r1
 8004758:	eb42 0303 	adc.w	r3, r2, r3
 800475c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800476c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004770:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004774:	460b      	mov	r3, r1
 8004776:	18db      	adds	r3, r3, r3
 8004778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800477a:	4613      	mov	r3, r2
 800477c:	eb42 0303 	adc.w	r3, r2, r3
 8004780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004782:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004786:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800478a:	f7fb fd1d 	bl	80001c8 <__aeabi_uldivmod>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4b0d      	ldr	r3, [pc, #52]	@ (80047c8 <UART_SetConfig+0x2d4>)
 8004794:	fba3 1302 	umull	r1, r3, r3, r2
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	2164      	movs	r1, #100	@ 0x64
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	3332      	adds	r3, #50	@ 0x32
 80047a6:	4a08      	ldr	r2, [pc, #32]	@ (80047c8 <UART_SetConfig+0x2d4>)
 80047a8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	f003 0207 	and.w	r2, r3, #7
 80047b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4422      	add	r2, r4
 80047ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047bc:	e106      	b.n	80049cc <UART_SetConfig+0x4d8>
 80047be:	bf00      	nop
 80047c0:	40011000 	.word	0x40011000
 80047c4:	40011400 	.word	0x40011400
 80047c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047d0:	2200      	movs	r2, #0
 80047d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047de:	4642      	mov	r2, r8
 80047e0:	464b      	mov	r3, r9
 80047e2:	1891      	adds	r1, r2, r2
 80047e4:	6239      	str	r1, [r7, #32]
 80047e6:	415b      	adcs	r3, r3
 80047e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047ee:	4641      	mov	r1, r8
 80047f0:	1854      	adds	r4, r2, r1
 80047f2:	4649      	mov	r1, r9
 80047f4:	eb43 0501 	adc.w	r5, r3, r1
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	00eb      	lsls	r3, r5, #3
 8004802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004806:	00e2      	lsls	r2, r4, #3
 8004808:	4614      	mov	r4, r2
 800480a:	461d      	mov	r5, r3
 800480c:	4643      	mov	r3, r8
 800480e:	18e3      	adds	r3, r4, r3
 8004810:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004814:	464b      	mov	r3, r9
 8004816:	eb45 0303 	adc.w	r3, r5, r3
 800481a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800481e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800482a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800482e:	f04f 0200 	mov.w	r2, #0
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800483a:	4629      	mov	r1, r5
 800483c:	008b      	lsls	r3, r1, #2
 800483e:	4621      	mov	r1, r4
 8004840:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004844:	4621      	mov	r1, r4
 8004846:	008a      	lsls	r2, r1, #2
 8004848:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800484c:	f7fb fcbc 	bl	80001c8 <__aeabi_uldivmod>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4b60      	ldr	r3, [pc, #384]	@ (80049d8 <UART_SetConfig+0x4e4>)
 8004856:	fba3 2302 	umull	r2, r3, r3, r2
 800485a:	095b      	lsrs	r3, r3, #5
 800485c:	011c      	lsls	r4, r3, #4
 800485e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004862:	2200      	movs	r2, #0
 8004864:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004868:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800486c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004870:	4642      	mov	r2, r8
 8004872:	464b      	mov	r3, r9
 8004874:	1891      	adds	r1, r2, r2
 8004876:	61b9      	str	r1, [r7, #24]
 8004878:	415b      	adcs	r3, r3
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004880:	4641      	mov	r1, r8
 8004882:	1851      	adds	r1, r2, r1
 8004884:	6139      	str	r1, [r7, #16]
 8004886:	4649      	mov	r1, r9
 8004888:	414b      	adcs	r3, r1
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	f04f 0300 	mov.w	r3, #0
 8004894:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004898:	4659      	mov	r1, fp
 800489a:	00cb      	lsls	r3, r1, #3
 800489c:	4651      	mov	r1, sl
 800489e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048a2:	4651      	mov	r1, sl
 80048a4:	00ca      	lsls	r2, r1, #3
 80048a6:	4610      	mov	r0, r2
 80048a8:	4619      	mov	r1, r3
 80048aa:	4603      	mov	r3, r0
 80048ac:	4642      	mov	r2, r8
 80048ae:	189b      	adds	r3, r3, r2
 80048b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048b4:	464b      	mov	r3, r9
 80048b6:	460a      	mov	r2, r1
 80048b8:	eb42 0303 	adc.w	r3, r2, r3
 80048bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048d8:	4649      	mov	r1, r9
 80048da:	008b      	lsls	r3, r1, #2
 80048dc:	4641      	mov	r1, r8
 80048de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048e2:	4641      	mov	r1, r8
 80048e4:	008a      	lsls	r2, r1, #2
 80048e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048ea:	f7fb fc6d 	bl	80001c8 <__aeabi_uldivmod>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4611      	mov	r1, r2
 80048f4:	4b38      	ldr	r3, [pc, #224]	@ (80049d8 <UART_SetConfig+0x4e4>)
 80048f6:	fba3 2301 	umull	r2, r3, r3, r1
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	2264      	movs	r2, #100	@ 0x64
 80048fe:	fb02 f303 	mul.w	r3, r2, r3
 8004902:	1acb      	subs	r3, r1, r3
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	3332      	adds	r3, #50	@ 0x32
 8004908:	4a33      	ldr	r2, [pc, #204]	@ (80049d8 <UART_SetConfig+0x4e4>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004914:	441c      	add	r4, r3
 8004916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800491a:	2200      	movs	r2, #0
 800491c:	673b      	str	r3, [r7, #112]	@ 0x70
 800491e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004920:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004924:	4642      	mov	r2, r8
 8004926:	464b      	mov	r3, r9
 8004928:	1891      	adds	r1, r2, r2
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	415b      	adcs	r3, r3
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004934:	4641      	mov	r1, r8
 8004936:	1851      	adds	r1, r2, r1
 8004938:	6039      	str	r1, [r7, #0]
 800493a:	4649      	mov	r1, r9
 800493c:	414b      	adcs	r3, r1
 800493e:	607b      	str	r3, [r7, #4]
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800494c:	4659      	mov	r1, fp
 800494e:	00cb      	lsls	r3, r1, #3
 8004950:	4651      	mov	r1, sl
 8004952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004956:	4651      	mov	r1, sl
 8004958:	00ca      	lsls	r2, r1, #3
 800495a:	4610      	mov	r0, r2
 800495c:	4619      	mov	r1, r3
 800495e:	4603      	mov	r3, r0
 8004960:	4642      	mov	r2, r8
 8004962:	189b      	adds	r3, r3, r2
 8004964:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004966:	464b      	mov	r3, r9
 8004968:	460a      	mov	r2, r1
 800496a:	eb42 0303 	adc.w	r3, r2, r3
 800496e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	663b      	str	r3, [r7, #96]	@ 0x60
 800497a:	667a      	str	r2, [r7, #100]	@ 0x64
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004988:	4649      	mov	r1, r9
 800498a:	008b      	lsls	r3, r1, #2
 800498c:	4641      	mov	r1, r8
 800498e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004992:	4641      	mov	r1, r8
 8004994:	008a      	lsls	r2, r1, #2
 8004996:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800499a:	f7fb fc15 	bl	80001c8 <__aeabi_uldivmod>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4b0d      	ldr	r3, [pc, #52]	@ (80049d8 <UART_SetConfig+0x4e4>)
 80049a4:	fba3 1302 	umull	r1, r3, r3, r2
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	2164      	movs	r1, #100	@ 0x64
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	3332      	adds	r3, #50	@ 0x32
 80049b6:	4a08      	ldr	r2, [pc, #32]	@ (80049d8 <UART_SetConfig+0x4e4>)
 80049b8:	fba2 2303 	umull	r2, r3, r2, r3
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	f003 020f 	and.w	r2, r3, #15
 80049c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4422      	add	r2, r4
 80049ca:	609a      	str	r2, [r3, #8]
}
 80049cc:	bf00      	nop
 80049ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049d2:	46bd      	mov	sp, r7
 80049d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049d8:	51eb851f 	.word	0x51eb851f

080049dc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049f4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4b20      	ldr	r3, [pc, #128]	@ (8004a7c <FSMC_NORSRAM_Init+0xa0>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004a06:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004a0c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8004a12:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004a18:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8004a1e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8004a24:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8004a2a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 8004a30:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 8004a36:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 8004a3c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 8004a42:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8004a48:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d103      	bne.n	8004a60 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a5e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68f9      	ldr	r1, [r7, #12]
 8004a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	fff00080 	.word	0xfff00080

08004a80 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a9a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004aa2:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004aae:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004ab6:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004abe:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004ac8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	3b02      	subs	r3, #2
 8004ad0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004ad2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6979      	ldr	r1, [r7, #20]
 8004ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b14:	d122      	bne.n	8004b5c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b1e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4b15      	ldr	r3, [pc, #84]	@ (8004b78 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004b32:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004b3a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8004b42:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004b48:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6979      	ldr	r1, [r7, #20]
 8004b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004b5a:	e005      	b.n	8004b68 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8004b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	cff00000 	.word	0xcff00000

08004b7c <memset>:
 8004b7c:	4402      	add	r2, r0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d100      	bne.n	8004b86 <memset+0xa>
 8004b84:	4770      	bx	lr
 8004b86:	f803 1b01 	strb.w	r1, [r3], #1
 8004b8a:	e7f9      	b.n	8004b80 <memset+0x4>

08004b8c <__libc_init_array>:
 8004b8c:	b570      	push	{r4, r5, r6, lr}
 8004b8e:	4d0d      	ldr	r5, [pc, #52]	@ (8004bc4 <__libc_init_array+0x38>)
 8004b90:	4c0d      	ldr	r4, [pc, #52]	@ (8004bc8 <__libc_init_array+0x3c>)
 8004b92:	1b64      	subs	r4, r4, r5
 8004b94:	10a4      	asrs	r4, r4, #2
 8004b96:	2600      	movs	r6, #0
 8004b98:	42a6      	cmp	r6, r4
 8004b9a:	d109      	bne.n	8004bb0 <__libc_init_array+0x24>
 8004b9c:	4d0b      	ldr	r5, [pc, #44]	@ (8004bcc <__libc_init_array+0x40>)
 8004b9e:	4c0c      	ldr	r4, [pc, #48]	@ (8004bd0 <__libc_init_array+0x44>)
 8004ba0:	f000 f818 	bl	8004bd4 <_init>
 8004ba4:	1b64      	subs	r4, r4, r5
 8004ba6:	10a4      	asrs	r4, r4, #2
 8004ba8:	2600      	movs	r6, #0
 8004baa:	42a6      	cmp	r6, r4
 8004bac:	d105      	bne.n	8004bba <__libc_init_array+0x2e>
 8004bae:	bd70      	pop	{r4, r5, r6, pc}
 8004bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb4:	4798      	blx	r3
 8004bb6:	3601      	adds	r6, #1
 8004bb8:	e7ee      	b.n	8004b98 <__libc_init_array+0xc>
 8004bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bbe:	4798      	blx	r3
 8004bc0:	3601      	adds	r6, #1
 8004bc2:	e7f2      	b.n	8004baa <__libc_init_array+0x1e>
 8004bc4:	08004c1c 	.word	0x08004c1c
 8004bc8:	08004c1c 	.word	0x08004c1c
 8004bcc:	08004c1c 	.word	0x08004c1c
 8004bd0:	08004c20 	.word	0x08004c20

08004bd4 <_init>:
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	bf00      	nop
 8004bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bda:	bc08      	pop	{r3}
 8004bdc:	469e      	mov	lr, r3
 8004bde:	4770      	bx	lr

08004be0 <_fini>:
 8004be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be2:	bf00      	nop
 8004be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be6:	bc08      	pop	{r3}
 8004be8:	469e      	mov	lr, r3
 8004bea:	4770      	bx	lr
