
Bai7_TouchScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009aac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003168  08009c3c  08009c3c  0000ac3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cda4  0800cda4  0000e0c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cda4  0800cda4  0000dda4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdac  0800cdac  0000e0c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdac  0800cdac  0000ddac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdb0  0800cdb0  0000ddb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800cdb4  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e0c8  2**0
                  CONTENTS
 10 .bss          000013ec  200000c8  200000c8  0000e0c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200014b4  200014b4  0000e0c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e0c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f0e  00000000  00000000  0000e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000413b  00000000  00000000  00024006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c0  00000000  00000000  00028148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010cd  00000000  00000000  00029708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002704f  00000000  00000000  0002a7d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e574  00000000  00000000  00051824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dffd8  00000000  00000000  0006fd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014fd70  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006488  00000000  00000000  0014fdb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000c9  00000000  00000000  0015623c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c24 	.word	0x08009c24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	08009c24 	.word	0x08009c24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9c:	f000 b96a 	b.w	8000e74 <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	460c      	mov	r4, r1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d14e      	bne.n	8000c62 <__udivmoddi4+0xaa>
 8000bc4:	4694      	mov	ip, r2
 8000bc6:	458c      	cmp	ip, r1
 8000bc8:	4686      	mov	lr, r0
 8000bca:	fab2 f282 	clz	r2, r2
 8000bce:	d962      	bls.n	8000c96 <__udivmoddi4+0xde>
 8000bd0:	b14a      	cbz	r2, 8000be6 <__udivmoddi4+0x2e>
 8000bd2:	f1c2 0320 	rsb	r3, r2, #32
 8000bd6:	4091      	lsls	r1, r2
 8000bd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be0:	4319      	orrs	r1, r3
 8000be2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f f68c 	uxth.w	r6, ip
 8000bee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb04 f106 	mul.w	r1, r4, r6
 8000c02:	4299      	cmp	r1, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x64>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c0e:	f080 8112 	bcs.w	8000e36 <__udivmoddi4+0x27e>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 810f 	bls.w	8000e36 <__udivmoddi4+0x27e>
 8000c18:	3c02      	subs	r4, #2
 8000c1a:	4463      	add	r3, ip
 8000c1c:	1a59      	subs	r1, r3, r1
 8000c1e:	fa1f f38e 	uxth.w	r3, lr
 8000c22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c26:	fb07 1110 	mls	r1, r7, r0, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb00 f606 	mul.w	r6, r0, r6
 8000c32:	429e      	cmp	r6, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x94>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c3e:	f080 80fc 	bcs.w	8000e3a <__udivmoddi4+0x282>
 8000c42:	429e      	cmp	r6, r3
 8000c44:	f240 80f9 	bls.w	8000e3a <__udivmoddi4+0x282>
 8000c48:	4463      	add	r3, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11d      	cbz	r5, 8000c5e <__udivmoddi4+0xa6>
 8000c56:	40d3      	lsrs	r3, r2
 8000c58:	2200      	movs	r2, #0
 8000c5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d905      	bls.n	8000c72 <__udivmoddi4+0xba>
 8000c66:	b10d      	cbz	r5, 8000c6c <__udivmoddi4+0xb4>
 8000c68:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e7f5      	b.n	8000c5e <__udivmoddi4+0xa6>
 8000c72:	fab3 f183 	clz	r1, r3
 8000c76:	2900      	cmp	r1, #0
 8000c78:	d146      	bne.n	8000d08 <__udivmoddi4+0x150>
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xcc>
 8000c7e:	4290      	cmp	r0, r2
 8000c80:	f0c0 80f0 	bcc.w	8000e64 <__udivmoddi4+0x2ac>
 8000c84:	1a86      	subs	r6, r0, r2
 8000c86:	eb64 0303 	sbc.w	r3, r4, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	2d00      	cmp	r5, #0
 8000c8e:	d0e6      	beq.n	8000c5e <__udivmoddi4+0xa6>
 8000c90:	e9c5 6300 	strd	r6, r3, [r5]
 8000c94:	e7e3      	b.n	8000c5e <__udivmoddi4+0xa6>
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	f040 8090 	bne.w	8000dbc <__udivmoddi4+0x204>
 8000c9c:	eba1 040c 	sub.w	r4, r1, ip
 8000ca0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	2101      	movs	r1, #1
 8000caa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cba:	fb07 f006 	mul.w	r0, r7, r6
 8000cbe:	4298      	cmp	r0, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x11c>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x11a>
 8000ccc:	4298      	cmp	r0, r3
 8000cce:	f200 80cd 	bhi.w	8000e6c <__udivmoddi4+0x2b4>
 8000cd2:	4626      	mov	r6, r4
 8000cd4:	1a1c      	subs	r4, r3, r0
 8000cd6:	fa1f f38e 	uxth.w	r3, lr
 8000cda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cde:	fb08 4410 	mls	r4, r8, r0, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb00 f707 	mul.w	r7, r0, r7
 8000cea:	429f      	cmp	r7, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x148>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x146>
 8000cf8:	429f      	cmp	r7, r3
 8000cfa:	f200 80b0 	bhi.w	8000e5e <__udivmoddi4+0x2a6>
 8000cfe:	4620      	mov	r0, r4
 8000d00:	1bdb      	subs	r3, r3, r7
 8000d02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d06:	e7a5      	b.n	8000c54 <__udivmoddi4+0x9c>
 8000d08:	f1c1 0620 	rsb	r6, r1, #32
 8000d0c:	408b      	lsls	r3, r1
 8000d0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d12:	431f      	orrs	r7, r3
 8000d14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d18:	fa04 f301 	lsl.w	r3, r4, r1
 8000d1c:	ea43 030c 	orr.w	r3, r3, ip
 8000d20:	40f4      	lsrs	r4, r6
 8000d22:	fa00 f801 	lsl.w	r8, r0, r1
 8000d26:	0c38      	lsrs	r0, r7, #16
 8000d28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d30:	fa1f fc87 	uxth.w	ip, r7
 8000d34:	fb00 441e 	mls	r4, r0, lr, r4
 8000d38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d40:	45a1      	cmp	r9, r4
 8000d42:	fa02 f201 	lsl.w	r2, r2, r1
 8000d46:	d90a      	bls.n	8000d5e <__udivmoddi4+0x1a6>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d4e:	f080 8084 	bcs.w	8000e5a <__udivmoddi4+0x2a2>
 8000d52:	45a1      	cmp	r9, r4
 8000d54:	f240 8081 	bls.w	8000e5a <__udivmoddi4+0x2a2>
 8000d58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d5c:	443c      	add	r4, r7
 8000d5e:	eba4 0409 	sub.w	r4, r4, r9
 8000d62:	fa1f f983 	uxth.w	r9, r3
 8000d66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d76:	45a4      	cmp	ip, r4
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x1d2>
 8000d7a:	193c      	adds	r4, r7, r4
 8000d7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d80:	d267      	bcs.n	8000e52 <__udivmoddi4+0x29a>
 8000d82:	45a4      	cmp	ip, r4
 8000d84:	d965      	bls.n	8000e52 <__udivmoddi4+0x29a>
 8000d86:	3b02      	subs	r3, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d92:	eba4 040c 	sub.w	r4, r4, ip
 8000d96:	429c      	cmp	r4, r3
 8000d98:	46ce      	mov	lr, r9
 8000d9a:	469c      	mov	ip, r3
 8000d9c:	d351      	bcc.n	8000e42 <__udivmoddi4+0x28a>
 8000d9e:	d04e      	beq.n	8000e3e <__udivmoddi4+0x286>
 8000da0:	b155      	cbz	r5, 8000db8 <__udivmoddi4+0x200>
 8000da2:	ebb8 030e 	subs.w	r3, r8, lr
 8000da6:	eb64 040c 	sbc.w	r4, r4, ip
 8000daa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dae:	40cb      	lsrs	r3, r1
 8000db0:	431e      	orrs	r6, r3
 8000db2:	40cc      	lsrs	r4, r1
 8000db4:	e9c5 6400 	strd	r6, r4, [r5]
 8000db8:	2100      	movs	r1, #0
 8000dba:	e750      	b.n	8000c5e <__udivmoddi4+0xa6>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f103 	lsr.w	r1, r0, r3
 8000dc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dcc:	4094      	lsls	r4, r2
 8000dce:	430c      	orrs	r4, r1
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dd8:	fa1f f78c 	uxth.w	r7, ip
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3110 	mls	r1, r8, r0, r3
 8000de4:	0c23      	lsrs	r3, r4, #16
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f107 	mul.w	r1, r0, r7
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x24c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dfa:	d22c      	bcs.n	8000e56 <__udivmoddi4+0x29e>
 8000dfc:	4299      	cmp	r1, r3
 8000dfe:	d92a      	bls.n	8000e56 <__udivmoddi4+0x29e>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e14:	fb01 f307 	mul.w	r3, r1, r7
 8000e18:	42a3      	cmp	r3, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x276>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e24:	d213      	bcs.n	8000e4e <__udivmoddi4+0x296>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d911      	bls.n	8000e4e <__udivmoddi4+0x296>
 8000e2a:	3902      	subs	r1, #2
 8000e2c:	4464      	add	r4, ip
 8000e2e:	1ae4      	subs	r4, r4, r3
 8000e30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e34:	e739      	b.n	8000caa <__udivmoddi4+0xf2>
 8000e36:	4604      	mov	r4, r0
 8000e38:	e6f0      	b.n	8000c1c <__udivmoddi4+0x64>
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e706      	b.n	8000c4c <__udivmoddi4+0x94>
 8000e3e:	45c8      	cmp	r8, r9
 8000e40:	d2ae      	bcs.n	8000da0 <__udivmoddi4+0x1e8>
 8000e42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e4a:	3801      	subs	r0, #1
 8000e4c:	e7a8      	b.n	8000da0 <__udivmoddi4+0x1e8>
 8000e4e:	4631      	mov	r1, r6
 8000e50:	e7ed      	b.n	8000e2e <__udivmoddi4+0x276>
 8000e52:	4603      	mov	r3, r0
 8000e54:	e799      	b.n	8000d8a <__udivmoddi4+0x1d2>
 8000e56:	4630      	mov	r0, r6
 8000e58:	e7d4      	b.n	8000e04 <__udivmoddi4+0x24c>
 8000e5a:	46d6      	mov	lr, sl
 8000e5c:	e77f      	b.n	8000d5e <__udivmoddi4+0x1a6>
 8000e5e:	4463      	add	r3, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e74d      	b.n	8000d00 <__udivmoddi4+0x148>
 8000e64:	4606      	mov	r6, r0
 8000e66:	4623      	mov	r3, r4
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e70f      	b.n	8000c8c <__udivmoddi4+0xd4>
 8000e6c:	3e02      	subs	r6, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	e730      	b.n	8000cd4 <__udivmoddi4+0x11c>
 8000e72:	bf00      	nop

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000e8c:	4a3d      	ldr	r2, [pc, #244]	@ (8000f84 <MX_ADC1_Init+0x10c>)
 8000e8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e90:	4b3b      	ldr	r3, [pc, #236]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e96:	4b3a      	ldr	r3, [pc, #232]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e9c:	4b38      	ldr	r3, [pc, #224]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea2:	4b37      	ldr	r3, [pc, #220]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ea8:	4b35      	ldr	r3, [pc, #212]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb0:	4b33      	ldr	r3, [pc, #204]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb6:	4b32      	ldr	r3, [pc, #200]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000eb8:	4a33      	ldr	r2, [pc, #204]	@ (8000f88 <MX_ADC1_Init+0x110>)
 8000eba:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebc:	4b30      	ldr	r3, [pc, #192]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ec4:	2205      	movs	r2, #5
 8000ec6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ed6:	482a      	ldr	r0, [pc, #168]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ed8:	f003 fdc8 	bl	8004a6c <HAL_ADC_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ee2:	f001 fbdb 	bl	800269c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4822      	ldr	r0, [pc, #136]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ef8:	f003 fdfc 	bl	8004af4 <HAL_ADC_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f02:	f001 fbcb 	bl	800269c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f06:	2309      	movs	r3, #9
 8000f08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0e:	463b      	mov	r3, r7
 8000f10:	4619      	mov	r1, r3
 8000f12:	481b      	ldr	r0, [pc, #108]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000f14:	f003 fdee 	bl	8004af4 <HAL_ADC_ConfigChannel>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f1e:	f001 fbbd 	bl	800269c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f22:	230a      	movs	r3, #10
 8000f24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f26:	2303      	movs	r3, #3
 8000f28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4814      	ldr	r0, [pc, #80]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000f30:	f003 fde0 	bl	8004af4 <HAL_ADC_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f3a:	f001 fbaf 	bl	800269c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f3e:	230b      	movs	r3, #11
 8000f40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f42:	2304      	movs	r3, #4
 8000f44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000f4c:	f003 fdd2 	bl	8004af4 <HAL_ADC_ConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f56:	f001 fba1 	bl	800269c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f5e:	2305      	movs	r3, #5
 8000f60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f62:	463b      	mov	r3, r7
 8000f64:	4619      	mov	r1, r3
 8000f66:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000f68:	f003 fdc4 	bl	8004af4 <HAL_ADC_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000f72:	f001 fb93 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200000e4 	.word	0x200000e4
 8000f84:	40012000 	.word	0x40012000
 8000f88:	0f000001 	.word	0x0f000001

08000f8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	@ 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a3c      	ldr	r2, [pc, #240]	@ (800109c <HAL_ADC_MspInit+0x110>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d171      	bne.n	8001092 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	4b3b      	ldr	r3, [pc, #236]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	4a3a      	ldr	r2, [pc, #232]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fbe:	4b38      	ldr	r3, [pc, #224]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b34      	ldr	r3, [pc, #208]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a33      	ldr	r2, [pc, #204]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b31      	ldr	r3, [pc, #196]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b2d      	ldr	r3, [pc, #180]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a2c      	ldr	r2, [pc, #176]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001002:	2307      	movs	r3, #7
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001006:	2303      	movs	r3, #3
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4823      	ldr	r0, [pc, #140]	@ (80010a4 <HAL_ADC_MspInit+0x118>)
 8001016:	f004 fb87 	bl	8005728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800101a:	2303      	movs	r3, #3
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101e:	2303      	movs	r3, #3
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	481e      	ldr	r0, [pc, #120]	@ (80010a8 <HAL_ADC_MspInit+0x11c>)
 800102e:	f004 fb7b 	bl	8005728 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001032:	4b1e      	ldr	r3, [pc, #120]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001034:	4a1e      	ldr	r2, [pc, #120]	@ (80010b0 <HAL_ADC_MspInit+0x124>)
 8001036:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001038:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800103e:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001044:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800104a:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800104c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001050:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001052:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001054:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001058:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800105c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001060:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001062:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001064:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001068:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800106a:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001070:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001076:	480d      	ldr	r0, [pc, #52]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001078:	f004 f86c 	bl	8005154 <HAL_DMA_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001082:	f001 fb0b 	bl	800269c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a08      	ldr	r2, [pc, #32]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800108a:	639a      	str	r2, [r3, #56]	@ 0x38
 800108c:	4a07      	ldr	r2, [pc, #28]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	@ 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40012000 	.word	0x40012000
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020800 	.word	0x40020800
 80010a8:	40020400 	.word	0x40020400
 80010ac:	2000012c 	.word	0x2000012c
 80010b0:	40026410 	.word	0x40026410

080010b4 <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	at24c_Check();
 80010b8:	f000 f83c 	bl	8001134 <at24c_Check>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af04      	add	r7, sp, #16
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 80010ce:	88fa      	ldrh	r2, [r7, #6]
 80010d0:	230a      	movs	r3, #10
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	2301      	movs	r3, #1
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	f107 030f 	add.w	r3, r7, #15
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2310      	movs	r3, #16
 80010e0:	21a0      	movs	r1, #160	@ 0xa0
 80010e2:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <at24c_ReadOneByte+0x34>)
 80010e4:	f004 ff2c 	bl	8005f40 <HAL_I2C_Mem_Read>
	return temp;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200001e0 	.word	0x200001e0

080010f8 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af04      	add	r7, sp, #16
 80010fe:	4603      	mov	r3, r0
 8001100:	460a      	mov	r2, r1
 8001102:	80fb      	strh	r3, [r7, #6]
 8001104:	4613      	mov	r3, r2
 8001106:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 8001108:	88fa      	ldrh	r2, [r7, #6]
 800110a:	230a      	movs	r3, #10
 800110c:	9302      	str	r3, [sp, #8]
 800110e:	2301      	movs	r3, #1
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	1d7b      	adds	r3, r7, #5
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2310      	movs	r3, #16
 8001118:	21a0      	movs	r1, #160	@ 0xa0
 800111a:	4805      	ldr	r0, [pc, #20]	@ (8001130 <at24c_WriteOneByte+0x38>)
 800111c:	f004 fe16 	bl	8005d4c <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001120:	2005      	movs	r0, #5
 8001122:	f003 fc7f 	bl	8004a24 <HAL_Delay>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200001e0 	.word	0x200001e0

08001134 <at24c_Check>:

uint8_t at24c_Check(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 800113a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800113e:	f7ff ffbf 	bl	80010c0 <at24c_ReadOneByte>
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b55      	cmp	r3, #85	@ 0x55
 800114a:	d101      	bne.n	8001150 <at24c_Check+0x1c>
 800114c:	2300      	movs	r3, #0
 800114e:	e010      	b.n	8001172 <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 8001150:	2155      	movs	r1, #85	@ 0x55
 8001152:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001156:	f7ff ffcf 	bl	80010f8 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 800115a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800115e:	f7ff ffaf 	bl	80010c0 <at24c_ReadOneByte>
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b55      	cmp	r3, #85	@ 0x55
 800116a:	d101      	bne.n	8001170 <at24c_Check+0x3c>
 800116c:	2300      	movs	r3, #0
 800116e:	e000      	b.n	8001172 <at24c_Check+0x3e>
	}
	return 1;
 8001170:	2301      	movs	r3, #1
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 800117a:	b590      	push	{r4, r7, lr}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	6039      	str	r1, [r7, #0]
 8001184:	80fb      	strh	r3, [r7, #6]
 8001186:	4613      	mov	r3, r2
 8001188:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 800118a:	e00d      	b.n	80011a8 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	80fa      	strh	r2, [r7, #6]
 8001192:	683c      	ldr	r4, [r7, #0]
 8001194:	1c62      	adds	r2, r4, #1
 8001196:	603a      	str	r2, [r7, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff91 	bl	80010c0 <at24c_ReadOneByte>
 800119e:	4603      	mov	r3, r0
 80011a0:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 80011a2:	88bb      	ldrh	r3, [r7, #4]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1ee      	bne.n	800118c <at24c_Read+0x12>
	}
}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd90      	pop	{r4, r7, pc}

080011b8 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	80fb      	strh	r3, [r7, #6]
 80011c4:	4613      	mov	r3, r2
 80011c6:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 80011c8:	e00c      	b.n	80011e4 <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	781a      	ldrb	r2, [r3, #0]
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff90 	bl	80010f8 <at24c_WriteOneByte>
		WriteAddr++;
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	3301      	adds	r3, #1
 80011dc:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 80011e4:	88bb      	ldrh	r3, [r7, #4]
 80011e6:	1e5a      	subs	r2, r3, #1
 80011e8:	80ba      	strh	r2, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1ed      	bne.n	80011ca <at24c_Write+0x12>
	}
}
 80011ee:	bf00      	nop
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2108      	movs	r1, #8
 8001200:	4802      	ldr	r0, [pc, #8]	@ (800120c <button_init+0x14>)
 8001202:	f004 fc45 	bl	8005a90 <HAL_GPIO_WritePin>
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40020c00 	.word	0x40020c00

08001210 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <MX_DMA_Init+0x3c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a0b      	ldr	r2, [pc, #44]	@ (800124c <MX_DMA_Init+0x3c>)
 8001220:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <MX_DMA_Init+0x3c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2038      	movs	r0, #56	@ 0x38
 8001238:	f003 ff55 	bl	80050e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800123c:	2038      	movs	r0, #56	@ 0x38
 800123e:	f003 ff6e 	bl	800511e <HAL_NVIC_EnableIRQ>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08e      	sub	sp, #56	@ 0x38
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
 8001266:	615a      	str	r2, [r3, #20]
 8001268:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800126a:	463b      	mov	r3, r7
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
 8001278:	615a      	str	r2, [r3, #20]
 800127a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800127c:	4b2f      	ldr	r3, [pc, #188]	@ (800133c <MX_FSMC_Init+0xec>)
 800127e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001282:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001284:	4b2d      	ldr	r3, [pc, #180]	@ (800133c <MX_FSMC_Init+0xec>)
 8001286:	4a2e      	ldr	r2, [pc, #184]	@ (8001340 <MX_FSMC_Init+0xf0>)
 8001288:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800128a:	4b2c      	ldr	r3, [pc, #176]	@ (800133c <MX_FSMC_Init+0xec>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001290:	4b2a      	ldr	r3, [pc, #168]	@ (800133c <MX_FSMC_Init+0xec>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001296:	4b29      	ldr	r3, [pc, #164]	@ (800133c <MX_FSMC_Init+0xec>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800129c:	4b27      	ldr	r3, [pc, #156]	@ (800133c <MX_FSMC_Init+0xec>)
 800129e:	2210      	movs	r2, #16
 80012a0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80012a2:	4b26      	ldr	r3, [pc, #152]	@ (800133c <MX_FSMC_Init+0xec>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80012a8:	4b24      	ldr	r3, [pc, #144]	@ (800133c <MX_FSMC_Init+0xec>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80012ae:	4b23      	ldr	r3, [pc, #140]	@ (800133c <MX_FSMC_Init+0xec>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012b4:	4b21      	ldr	r3, [pc, #132]	@ (800133c <MX_FSMC_Init+0xec>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012ba:	4b20      	ldr	r3, [pc, #128]	@ (800133c <MX_FSMC_Init+0xec>)
 80012bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012c2:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <MX_FSMC_Init+0xec>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <MX_FSMC_Init+0xec>)
 80012ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <MX_FSMC_Init+0xec>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80012d6:	4b19      	ldr	r3, [pc, #100]	@ (800133c <MX_FSMC_Init+0xec>)
 80012d8:	2200      	movs	r2, #0
 80012da:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80012dc:	4b17      	ldr	r3, [pc, #92]	@ (800133c <MX_FSMC_Init+0xec>)
 80012de:	2200      	movs	r2, #0
 80012e0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80012e2:	230f      	movs	r3, #15
 80012e4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80012e6:	230f      	movs	r3, #15
 80012e8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80012ea:	233c      	movs	r3, #60	@ 0x3c
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 80012f2:	2310      	movs	r3, #16
 80012f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 80012f6:	2311      	movs	r3, #17
 80012f8:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012fa:	2300      	movs	r3, #0
 80012fc:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80012fe:	2308      	movs	r3, #8
 8001300:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001302:	230f      	movs	r3, #15
 8001304:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001306:	2309      	movs	r3, #9
 8001308:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800130e:	2310      	movs	r3, #16
 8001310:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001312:	2311      	movs	r3, #17
 8001314:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800131a:	463a      	mov	r2, r7
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	4806      	ldr	r0, [pc, #24]	@ (800133c <MX_FSMC_Init+0xec>)
 8001324:	f006 faa2 	bl	800786c <HAL_SRAM_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800132e:	f001 f9b5 	bl	800269c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001332:	bf00      	nop
 8001334:	3738      	adds	r7, #56	@ 0x38
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000018c 	.word	0x2000018c
 8001340:	a0000104 	.word	0xa0000104

08001344 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001358:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <HAL_FSMC_MspInit+0x88>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d131      	bne.n	80013c4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001360:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <HAL_FSMC_MspInit+0x88>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <HAL_FSMC_MspInit+0x8c>)
 800136c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800136e:	4a18      	ldr	r2, [pc, #96]	@ (80013d0 <HAL_FSMC_MspInit+0x8c>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6393      	str	r3, [r2, #56]	@ 0x38
 8001376:	4b16      	ldr	r3, [pc, #88]	@ (80013d0 <HAL_FSMC_MspInit+0x8c>)
 8001378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001382:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8001386:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001394:	230c      	movs	r3, #12
 8001396:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	4619      	mov	r1, r3
 800139c:	480d      	ldr	r0, [pc, #52]	@ (80013d4 <HAL_FSMC_MspInit+0x90>)
 800139e:	f004 f9c3 	bl	8005728 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80013a2:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80013a6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013b4:	230c      	movs	r3, #12
 80013b6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	4619      	mov	r1, r3
 80013bc:	4806      	ldr	r0, [pc, #24]	@ (80013d8 <HAL_FSMC_MspInit+0x94>)
 80013be:	f004 f9b3 	bl	8005728 <HAL_GPIO_Init>
 80013c2:	e000      	b.n	80013c6 <HAL_FSMC_MspInit+0x82>
    return;
 80013c4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200001dc 	.word	0x200001dc
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40020c00 	.word	0x40020c00

080013dc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80013e4:	f7ff ffae 	bl	8001344 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08e      	sub	sp, #56	@ 0x38
 80013f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
 800140a:	4b7e      	ldr	r3, [pc, #504]	@ (8001604 <MX_GPIO_Init+0x214>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a7d      	ldr	r2, [pc, #500]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001410:	f043 0310 	orr.w	r3, r3, #16
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b7b      	ldr	r3, [pc, #492]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	623b      	str	r3, [r7, #32]
 8001420:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	4b77      	ldr	r3, [pc, #476]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a76      	ldr	r2, [pc, #472]	@ (8001604 <MX_GPIO_Init+0x214>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b74      	ldr	r3, [pc, #464]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	61fb      	str	r3, [r7, #28]
 800143c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	4b70      	ldr	r3, [pc, #448]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a6f      	ldr	r2, [pc, #444]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001448:	f043 0320 	orr.w	r3, r3, #32
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b6d      	ldr	r3, [pc, #436]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0320 	and.w	r3, r3, #32
 8001456:	61bb      	str	r3, [r7, #24]
 8001458:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	4b69      	ldr	r3, [pc, #420]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a68      	ldr	r2, [pc, #416]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001464:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b66      	ldr	r3, [pc, #408]	@ (8001604 <MX_GPIO_Init+0x214>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b62      	ldr	r3, [pc, #392]	@ (8001604 <MX_GPIO_Init+0x214>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	4a61      	ldr	r2, [pc, #388]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	@ 0x30
 8001486:	4b5f      	ldr	r3, [pc, #380]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b5b      	ldr	r3, [pc, #364]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a5a      	ldr	r2, [pc, #360]	@ (8001604 <MX_GPIO_Init+0x214>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b58      	ldr	r3, [pc, #352]	@ (8001604 <MX_GPIO_Init+0x214>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b54      	ldr	r3, [pc, #336]	@ (8001604 <MX_GPIO_Init+0x214>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a53      	ldr	r2, [pc, #332]	@ (8001604 <MX_GPIO_Init+0x214>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b51      	ldr	r3, [pc, #324]	@ (8001604 <MX_GPIO_Init+0x214>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001604 <MX_GPIO_Init+0x214>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001604 <MX_GPIO_Init+0x214>)
 80014d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b4a      	ldr	r3, [pc, #296]	@ (8001604 <MX_GPIO_Init+0x214>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2170      	movs	r1, #112	@ 0x70
 80014ea:	4847      	ldr	r0, [pc, #284]	@ (8001608 <MX_GPIO_Init+0x218>)
 80014ec:	f004 fad0 	bl	8005a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 80014f6:	4845      	ldr	r0, [pc, #276]	@ (800160c <MX_GPIO_Init+0x21c>)
 80014f8:	f004 faca 	bl	8005a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001502:	4843      	ldr	r0, [pc, #268]	@ (8001610 <MX_GPIO_Init+0x220>)
 8001504:	f004 fac4 	bl	8005a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800150e:	4841      	ldr	r0, [pc, #260]	@ (8001614 <MX_GPIO_Init+0x224>)
 8001510:	f004 fabe 	bl	8005a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2108      	movs	r1, #8
 8001518:	483f      	ldr	r0, [pc, #252]	@ (8001618 <MX_GPIO_Init+0x228>)
 800151a:	f004 fab9 	bl	8005a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800151e:	2370      	movs	r3, #112	@ 0x70
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	4834      	ldr	r0, [pc, #208]	@ (8001608 <MX_GPIO_Init+0x218>)
 8001536:	f004 f8f7 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 800153a:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001550:	4619      	mov	r1, r3
 8001552:	482e      	ldr	r0, [pc, #184]	@ (800160c <MX_GPIO_Init+0x21c>)
 8001554:	f004 f8e8 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001558:	23c0      	movs	r3, #192	@ 0xc0
 800155a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001568:	4619      	mov	r1, r3
 800156a:	482a      	ldr	r0, [pc, #168]	@ (8001614 <MX_GPIO_Init+0x224>)
 800156c:	f004 f8dc 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001570:	2330      	movs	r3, #48	@ 0x30
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001580:	4619      	mov	r1, r3
 8001582:	4822      	ldr	r0, [pc, #136]	@ (800160c <MX_GPIO_Init+0x21c>)
 8001584:	f004 f8d0 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8001588:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	481b      	ldr	r0, [pc, #108]	@ (8001610 <MX_GPIO_Init+0x220>)
 80015a2:	f004 f8c1 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 80015a6:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b8:	4619      	mov	r1, r3
 80015ba:	4814      	ldr	r0, [pc, #80]	@ (800160c <MX_GPIO_Init+0x21c>)
 80015bc:	f004 f8b4 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80015c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	480e      	ldr	r0, [pc, #56]	@ (8001614 <MX_GPIO_Init+0x224>)
 80015da:	f004 f8a5 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80015de:	2308      	movs	r3, #8
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f2:	4619      	mov	r1, r3
 80015f4:	4808      	ldr	r0, [pc, #32]	@ (8001618 <MX_GPIO_Init+0x228>)
 80015f6:	f004 f897 	bl	8005728 <HAL_GPIO_Init>

}
 80015fa:	bf00      	nop
 80015fc:	3738      	adds	r7, #56	@ 0x38
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	40021000 	.word	0x40021000
 800160c:	40020800 	.word	0x40020800
 8001610:	40021800 	.word	0x40021800
 8001614:	40020000 	.word	0x40020000
 8001618:	40020c00 	.word	0x40020c00

0800161c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <MX_I2C1_Init+0x50>)
 8001622:	4a13      	ldr	r2, [pc, #76]	@ (8001670 <MX_I2C1_Init+0x54>)
 8001624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001626:	4b11      	ldr	r3, [pc, #68]	@ (800166c <MX_I2C1_Init+0x50>)
 8001628:	4a12      	ldr	r2, [pc, #72]	@ (8001674 <MX_I2C1_Init+0x58>)
 800162a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800162c:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <MX_I2C1_Init+0x50>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001632:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <MX_I2C1_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001638:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <MX_I2C1_Init+0x50>)
 800163a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800163e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001640:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <MX_I2C1_Init+0x50>)
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <MX_I2C1_Init+0x50>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800164c:	4b07      	ldr	r3, [pc, #28]	@ (800166c <MX_I2C1_Init+0x50>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <MX_I2C1_Init+0x50>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001658:	4804      	ldr	r0, [pc, #16]	@ (800166c <MX_I2C1_Init+0x50>)
 800165a:	f004 fa33 	bl	8005ac4 <HAL_I2C_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001664:	f001 f81a 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200001e0 	.word	0x200001e0
 8001670:	40005400 	.word	0x40005400
 8001674:	000186a0 	.word	0x000186a0

08001678 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	@ 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a19      	ldr	r2, [pc, #100]	@ (80016fc <HAL_I2C_MspInit+0x84>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d12b      	bne.n	80016f2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <HAL_I2C_MspInit+0x88>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a17      	ldr	r2, [pc, #92]	@ (8001700 <HAL_I2C_MspInit+0x88>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <HAL_I2C_MspInit+0x88>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016b6:	23c0      	movs	r3, #192	@ 0xc0
 80016b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ba:	2312      	movs	r3, #18
 80016bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016c6:	2304      	movs	r3, #4
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	480c      	ldr	r0, [pc, #48]	@ (8001704 <HAL_I2C_MspInit+0x8c>)
 80016d2:	f004 f829 	bl	8005728 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <HAL_I2C_MspInit+0x88>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	4a08      	ldr	r2, [pc, #32]	@ (8001700 <HAL_I2C_MspInit+0x88>)
 80016e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_I2C_MspInit+0x88>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016f2:	bf00      	nop
 80016f4:	3728      	adds	r7, #40	@ 0x28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40005400 	.word	0x40005400
 8001700:	40023800 	.word	0x40023800
 8001704:	40020400 	.word	0x40020400

08001708 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001712:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <LCD_WR_REG+0x1c>)
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	8013      	strh	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	600ffffe 	.word	0x600ffffe

08001728 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001732:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <LCD_WR_DATA+0x1c>)
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	8053      	strh	r3, [r2, #2]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	600ffffe 	.word	0x600ffffe

08001748 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <LCD_RD_DATA+0x20>)
 8001750:	885b      	ldrh	r3, [r3, #2]
 8001752:	b29b      	uxth	r3, r3
 8001754:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	b29b      	uxth	r3, r3
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	600ffffe 	.word	0x600ffffe

0800176c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4604      	mov	r4, r0
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4623      	mov	r3, r4
 800177c:	80fb      	strh	r3, [r7, #6]
 800177e:	4603      	mov	r3, r0
 8001780:	80bb      	strh	r3, [r7, #4]
 8001782:	460b      	mov	r3, r1
 8001784:	807b      	strh	r3, [r7, #2]
 8001786:	4613      	mov	r3, r2
 8001788:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800178a:	202a      	movs	r0, #42	@ 0x2a
 800178c:	f7ff ffbc 	bl	8001708 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	b29b      	uxth	r3, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ffc6 	bl	8001728 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ffc0 	bl	8001728 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ffba 	bl	8001728 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80017b4:	887b      	ldrh	r3, [r7, #2]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ffb4 	bl	8001728 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80017c0:	202b      	movs	r0, #43	@ 0x2b
 80017c2:	f7ff ffa1 	bl	8001708 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80017c6:	88bb      	ldrh	r3, [r7, #4]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ffab 	bl	8001728 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80017d2:	88bb      	ldrh	r3, [r7, #4]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ffa5 	bl	8001728 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80017de:	883b      	ldrh	r3, [r7, #0]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff9f 	bl	8001728 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80017ea:	883b      	ldrh	r3, [r7, #0]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff99 	bl	8001728 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80017f6:	202c      	movs	r0, #44	@ 0x2c
 80017f8:	f7ff ff86 	bl	8001708 <LCD_WR_REG>
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bd90      	pop	{r4, r7, pc}

08001804 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800180e:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <lcd_Clear+0x60>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	3b01      	subs	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <lcd_Clear+0x60>)
 8001818:	885b      	ldrh	r3, [r3, #2]
 800181a:	3b01      	subs	r3, #1
 800181c:	b29b      	uxth	r3, r3
 800181e:	2100      	movs	r1, #0
 8001820:	2000      	movs	r0, #0
 8001822:	f7ff ffa3 	bl	800176c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001826:	2300      	movs	r3, #0
 8001828:	81fb      	strh	r3, [r7, #14]
 800182a:	e011      	b.n	8001850 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 800182c:	2300      	movs	r3, #0
 800182e:	81bb      	strh	r3, [r7, #12]
 8001830:	e006      	b.n	8001840 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff77 	bl	8001728 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800183a:	89bb      	ldrh	r3, [r7, #12]
 800183c:	3301      	adds	r3, #1
 800183e:	81bb      	strh	r3, [r7, #12]
 8001840:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <lcd_Clear+0x60>)
 8001842:	885b      	ldrh	r3, [r3, #2]
 8001844:	89ba      	ldrh	r2, [r7, #12]
 8001846:	429a      	cmp	r2, r3
 8001848:	d3f3      	bcc.n	8001832 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800184a:	89fb      	ldrh	r3, [r7, #14]
 800184c:	3301      	adds	r3, #1
 800184e:	81fb      	strh	r3, [r7, #14]
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <lcd_Clear+0x60>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	89fa      	ldrh	r2, [r7, #14]
 8001856:	429a      	cmp	r2, r3
 8001858:	d3e8      	bcc.n	800182c <lcd_Clear+0x28>
		}
	}
}
 800185a:	bf00      	nop
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000234 	.word	0x20000234

08001868 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	4604      	mov	r4, r0
 8001870:	4608      	mov	r0, r1
 8001872:	4611      	mov	r1, r2
 8001874:	461a      	mov	r2, r3
 8001876:	4623      	mov	r3, r4
 8001878:	80fb      	strh	r3, [r7, #6]
 800187a:	4603      	mov	r3, r0
 800187c:	80bb      	strh	r3, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	807b      	strh	r3, [r7, #2]
 8001882:	4613      	mov	r3, r2
 8001884:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001886:	887b      	ldrh	r3, [r7, #2]
 8001888:	3b01      	subs	r3, #1
 800188a:	b29a      	uxth	r2, r3
 800188c:	883b      	ldrh	r3, [r7, #0]
 800188e:	3b01      	subs	r3, #1
 8001890:	b29b      	uxth	r3, r3
 8001892:	88b9      	ldrh	r1, [r7, #4]
 8001894:	88f8      	ldrh	r0, [r7, #6]
 8001896:	f7ff ff69 	bl	800176c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 800189a:	88bb      	ldrh	r3, [r7, #4]
 800189c:	81fb      	strh	r3, [r7, #14]
 800189e:	e010      	b.n	80018c2 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	81bb      	strh	r3, [r7, #12]
 80018a4:	e006      	b.n	80018b4 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 80018a6:	8c3b      	ldrh	r3, [r7, #32]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff3d 	bl	8001728 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 80018ae:	89bb      	ldrh	r3, [r7, #12]
 80018b0:	3301      	adds	r3, #1
 80018b2:	81bb      	strh	r3, [r7, #12]
 80018b4:	89ba      	ldrh	r2, [r7, #12]
 80018b6:	887b      	ldrh	r3, [r7, #2]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d3f4      	bcc.n	80018a6 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 80018bc:	89fb      	ldrh	r3, [r7, #14]
 80018be:	3301      	adds	r3, #1
 80018c0:	81fb      	strh	r3, [r7, #14]
 80018c2:	89fa      	ldrh	r2, [r7, #14]
 80018c4:	883b      	ldrh	r3, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d3ea      	bcc.n	80018a0 <lcd_Fill+0x38>
		}
	}
}
 80018ca:	bf00      	nop
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd90      	pop	{r4, r7, pc}

080018d4 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	80fb      	strh	r3, [r7, #6]
 80018de:	460b      	mov	r3, r1
 80018e0:	80bb      	strh	r3, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80018e6:	88bb      	ldrh	r3, [r7, #4]
 80018e8:	88fa      	ldrh	r2, [r7, #6]
 80018ea:	88b9      	ldrh	r1, [r7, #4]
 80018ec:	88f8      	ldrh	r0, [r7, #6]
 80018ee:	f7ff ff3d 	bl	800176c <lcd_AddressSet>
	LCD_WR_DATA(color);
 80018f2:	887b      	ldrh	r3, [r7, #2]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff17 	bl	8001728 <LCD_WR_DATA>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8001902:	b590      	push	{r4, r7, lr}
 8001904:	b08d      	sub	sp, #52	@ 0x34
 8001906:	af00      	add	r7, sp, #0
 8001908:	4604      	mov	r4, r0
 800190a:	4608      	mov	r0, r1
 800190c:	4611      	mov	r1, r2
 800190e:	461a      	mov	r2, r3
 8001910:	4623      	mov	r3, r4
 8001912:	80fb      	strh	r3, [r7, #6]
 8001914:	4603      	mov	r3, r0
 8001916:	80bb      	strh	r3, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]
 800191c:	4613      	mov	r3, r2
 800191e:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001928:	887a      	ldrh	r2, [r7, #2]
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001930:	883a      	ldrh	r2, [r7, #0]
 8001932:	88bb      	ldrh	r3, [r7, #4]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 800193c:	88bb      	ldrh	r3, [r7, #4]
 800193e:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	2b00      	cmp	r3, #0
 8001944:	dd02      	ble.n	800194c <lcd_DrawLine+0x4a>
 8001946:	2301      	movs	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e00b      	b.n	8001964 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <lcd_DrawLine+0x56>
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e005      	b.n	8001964 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001958:	f04f 33ff 	mov.w	r3, #4294967295
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	425b      	negs	r3, r3
 8001962:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	2b00      	cmp	r3, #0
 8001968:	dd02      	ble.n	8001970 <lcd_DrawLine+0x6e>
 800196a:	2301      	movs	r3, #1
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	e00b      	b.n	8001988 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d102      	bne.n	800197c <lcd_DrawLine+0x7a>
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	e005      	b.n	8001988 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	425b      	negs	r3, r3
 8001986:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001988:	6a3a      	ldr	r2, [r7, #32]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	429a      	cmp	r2, r3
 800198e:	dd02      	ble.n	8001996 <lcd_DrawLine+0x94>
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	e001      	b.n	800199a <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 800199a:	2300      	movs	r3, #0
 800199c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800199e:	e02b      	b.n	80019f8 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	b291      	uxth	r1, r2
 80019a8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff91 	bl	80018d4 <lcd_DrawPoint>
		xerr+=delta_x;
 80019b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	4413      	add	r3, r2
 80019b8:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y;
 80019ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	4413      	add	r3, r2
 80019c0:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 80019c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	dd07      	ble.n	80019da <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 80019ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	4413      	add	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80019da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	429a      	cmp	r2, r3
 80019e0:	dd07      	ble.n	80019f2 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 80019e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4413      	add	r3, r2
 80019f0:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 80019f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80019f4:	3301      	adds	r3, #1
 80019f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80019f8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	dacf      	bge.n	80019a0 <lcd_DrawLine+0x9e>
		}
	}
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3734      	adds	r7, #52	@ 0x34
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd90      	pop	{r4, r7, pc}
	...

08001a0c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4604      	mov	r4, r0
 8001a14:	4608      	mov	r0, r1
 8001a16:	4611      	mov	r1, r2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	80fb      	strh	r3, [r7, #6]
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80bb      	strh	r3, [r7, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	70fb      	strb	r3, [r7, #3]
 8001a26:	4613      	mov	r3, r2
 8001a28:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001a32:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a36:	085b      	lsrs	r3, r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	08db      	lsrs	r3, r3, #3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	461a      	mov	r2, r3
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bf14      	ite	ne
 8001a4e:	2301      	movne	r3, #1
 8001a50:	2300      	moveq	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	fb12 f303 	smulbb	r3, r2, r3
 8001a62:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	3b20      	subs	r3, #32
 8001a68:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	4413      	add	r3, r2
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	3b01      	subs	r3, #1
 8001a76:	b29c      	uxth	r4, r3
 8001a78:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	88bb      	ldrh	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	3b01      	subs	r3, #1
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	88b9      	ldrh	r1, [r7, #4]
 8001a8a:	88f8      	ldrh	r0, [r7, #6]
 8001a8c:	4622      	mov	r2, r4
 8001a8e:	f7ff fe6d 	bl	800176c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	827b      	strh	r3, [r7, #18]
 8001a96:	e07a      	b.n	8001b8e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001a98:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a9c:	2b0c      	cmp	r3, #12
 8001a9e:	d028      	beq.n	8001af2 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001aa0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001aa4:	2b10      	cmp	r3, #16
 8001aa6:	d108      	bne.n	8001aba <lcd_ShowChar+0xae>
 8001aa8:	78fa      	ldrb	r2, [r7, #3]
 8001aaa:	8a7b      	ldrh	r3, [r7, #18]
 8001aac:	493c      	ldr	r1, [pc, #240]	@ (8001ba0 <lcd_ShowChar+0x194>)
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	440a      	add	r2, r1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	75fb      	strb	r3, [r7, #23]
 8001ab8:	e01b      	b.n	8001af2 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001aba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001abe:	2b18      	cmp	r3, #24
 8001ac0:	d10b      	bne.n	8001ada <lcd_ShowChar+0xce>
 8001ac2:	78fa      	ldrb	r2, [r7, #3]
 8001ac4:	8a79      	ldrh	r1, [r7, #18]
 8001ac6:	4837      	ldr	r0, [pc, #220]	@ (8001ba4 <lcd_ShowChar+0x198>)
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	4403      	add	r3, r0
 8001ad2:	440b      	add	r3, r1
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	75fb      	strb	r3, [r7, #23]
 8001ad8:	e00b      	b.n	8001af2 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001ada:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ade:	2b20      	cmp	r3, #32
 8001ae0:	d15a      	bne.n	8001b98 <lcd_ShowChar+0x18c>
 8001ae2:	78fa      	ldrb	r2, [r7, #3]
 8001ae4:	8a7b      	ldrh	r3, [r7, #18]
 8001ae6:	4930      	ldr	r1, [pc, #192]	@ (8001ba8 <lcd_ShowChar+0x19c>)
 8001ae8:	0192      	lsls	r2, r2, #6
 8001aea:	440a      	add	r2, r1
 8001aec:	4413      	add	r3, r2
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	75bb      	strb	r3, [r7, #22]
 8001af6:	e044      	b.n	8001b82 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001af8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d120      	bne.n	8001b42 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001b00:	7dfa      	ldrb	r2, [r7, #23]
 8001b02:	7dbb      	ldrb	r3, [r7, #22]
 8001b04:	fa42 f303 	asr.w	r3, r2, r3
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d004      	beq.n	8001b1a <lcd_ShowChar+0x10e>
 8001b10:	883b      	ldrh	r3, [r7, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fe08 	bl	8001728 <LCD_WR_DATA>
 8001b18:	e003      	b.n	8001b22 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001b1a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fe03 	bl	8001728 <LCD_WR_DATA>
				m++;
 8001b22:	7d7b      	ldrb	r3, [r7, #21]
 8001b24:	3301      	adds	r3, #1
 8001b26:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001b28:	7d7b      	ldrb	r3, [r7, #21]
 8001b2a:	7bfa      	ldrb	r2, [r7, #15]
 8001b2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b30:	fb01 f202 	mul.w	r2, r1, r2
 8001b34:	1a9b      	subs	r3, r3, r2
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d11f      	bne.n	8001b7c <lcd_ShowChar+0x170>
				{
					m=0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	757b      	strb	r3, [r7, #21]
					break;
 8001b40:	e022      	b.n	8001b88 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001b42:	7dfa      	ldrb	r2, [r7, #23]
 8001b44:	7dbb      	ldrb	r3, [r7, #22]
 8001b46:	fa42 f303 	asr.w	r3, r2, r3
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <lcd_ShowChar+0x152>
 8001b52:	883a      	ldrh	r2, [r7, #0]
 8001b54:	88b9      	ldrh	r1, [r7, #4]
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff febb 	bl	80018d4 <lcd_DrawPoint>
				x++;
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	3301      	adds	r3, #1
 8001b62:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001b64:	88fa      	ldrh	r2, [r7, #6]
 8001b66:	8a3b      	ldrh	r3, [r7, #16]
 8001b68:	1ad2      	subs	r2, r2, r3
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d105      	bne.n	8001b7c <lcd_ShowChar+0x170>
				{
					x=x0;
 8001b70:	8a3b      	ldrh	r3, [r7, #16]
 8001b72:	80fb      	strh	r3, [r7, #6]
					y++;
 8001b74:	88bb      	ldrh	r3, [r7, #4]
 8001b76:	3301      	adds	r3, #1
 8001b78:	80bb      	strh	r3, [r7, #4]
					break;
 8001b7a:	e005      	b.n	8001b88 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001b7c:	7dbb      	ldrb	r3, [r7, #22]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	75bb      	strb	r3, [r7, #22]
 8001b82:	7dbb      	ldrb	r3, [r7, #22]
 8001b84:	2b07      	cmp	r3, #7
 8001b86:	d9b7      	bls.n	8001af8 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001b88:	8a7b      	ldrh	r3, [r7, #18]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	827b      	strh	r3, [r7, #18]
 8001b8e:	8a7a      	ldrh	r2, [r7, #18]
 8001b90:	89bb      	ldrh	r3, [r7, #12]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d380      	bcc.n	8001a98 <lcd_ShowChar+0x8c>
 8001b96:	e000      	b.n	8001b9a <lcd_ShowChar+0x18e>
		else return;
 8001b98:	bf00      	nop
				}
			}
		}
	}
}
 8001b9a:	371c      	adds	r7, #28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd90      	pop	{r4, r7, pc}
 8001ba0:	08009d24 	.word	0x08009d24
 8001ba4:	0800a314 	.word	0x0800a314
 8001ba8:	0800b4e4 	.word	0x0800b4e4

08001bac <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <lcd_SetDir+0x44>)
 8001bc8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001bcc:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <lcd_SetDir+0x44>)
 8001bd0:	22f0      	movs	r2, #240	@ 0xf0
 8001bd2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001bd4:	e006      	b.n	8001be4 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <lcd_SetDir+0x44>)
 8001bd8:	22f0      	movs	r2, #240	@ 0xf0
 8001bda:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001bdc:	4b04      	ldr	r3, [pc, #16]	@ (8001bf0 <lcd_SetDir+0x44>)
 8001bde:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001be2:	805a      	strh	r2, [r3, #2]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	20000234 	.word	0x20000234

08001bf4 <lcd_init>:


void lcd_init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bfe:	48aa      	ldr	r0, [pc, #680]	@ (8001ea8 <lcd_init+0x2b4>)
 8001c00:	f003 ff46 	bl	8005a90 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c04:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c08:	f002 ff0c 	bl	8004a24 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c12:	48a5      	ldr	r0, [pc, #660]	@ (8001ea8 <lcd_init+0x2b4>)
 8001c14:	f003 ff3c 	bl	8005a90 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c18:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c1c:	f002 ff02 	bl	8004a24 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff ffc3 	bl	8001bac <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001c26:	20d3      	movs	r0, #211	@ 0xd3
 8001c28:	f7ff fd6e 	bl	8001708 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001c2c:	f7ff fd8c 	bl	8001748 <LCD_RD_DATA>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b9d      	ldr	r3, [pc, #628]	@ (8001eac <lcd_init+0x2b8>)
 8001c36:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001c38:	f7ff fd86 	bl	8001748 <LCD_RD_DATA>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b9a      	ldr	r3, [pc, #616]	@ (8001eac <lcd_init+0x2b8>)
 8001c42:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001c44:	f7ff fd80 	bl	8001748 <LCD_RD_DATA>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b97      	ldr	r3, [pc, #604]	@ (8001eac <lcd_init+0x2b8>)
 8001c4e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001c50:	4b96      	ldr	r3, [pc, #600]	@ (8001eac <lcd_init+0x2b8>)
 8001c52:	889b      	ldrh	r3, [r3, #4]
 8001c54:	021b      	lsls	r3, r3, #8
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	4b94      	ldr	r3, [pc, #592]	@ (8001eac <lcd_init+0x2b8>)
 8001c5a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001c5c:	f7ff fd74 	bl	8001748 <LCD_RD_DATA>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	4b91      	ldr	r3, [pc, #580]	@ (8001eac <lcd_init+0x2b8>)
 8001c66:	889b      	ldrh	r3, [r3, #4]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	4b8f      	ldr	r3, [pc, #572]	@ (8001eac <lcd_init+0x2b8>)
 8001c6e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001c70:	20cf      	movs	r0, #207	@ 0xcf
 8001c72:	f7ff fd49 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff fd56 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001c7c:	20c1      	movs	r0, #193	@ 0xc1
 8001c7e:	f7ff fd53 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001c82:	2030      	movs	r0, #48	@ 0x30
 8001c84:	f7ff fd50 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001c88:	20ed      	movs	r0, #237	@ 0xed
 8001c8a:	f7ff fd3d 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001c8e:	2064      	movs	r0, #100	@ 0x64
 8001c90:	f7ff fd4a 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001c94:	2003      	movs	r0, #3
 8001c96:	f7ff fd47 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001c9a:	2012      	movs	r0, #18
 8001c9c:	f7ff fd44 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001ca0:	2081      	movs	r0, #129	@ 0x81
 8001ca2:	f7ff fd41 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001ca6:	20e8      	movs	r0, #232	@ 0xe8
 8001ca8:	f7ff fd2e 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001cac:	2085      	movs	r0, #133	@ 0x85
 8001cae:	f7ff fd3b 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001cb2:	2010      	movs	r0, #16
 8001cb4:	f7ff fd38 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001cb8:	207a      	movs	r0, #122	@ 0x7a
 8001cba:	f7ff fd35 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001cbe:	20cb      	movs	r0, #203	@ 0xcb
 8001cc0:	f7ff fd22 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001cc4:	2039      	movs	r0, #57	@ 0x39
 8001cc6:	f7ff fd2f 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001cca:	202c      	movs	r0, #44	@ 0x2c
 8001ccc:	f7ff fd2c 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f7ff fd29 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001cd6:	2034      	movs	r0, #52	@ 0x34
 8001cd8:	f7ff fd26 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001cdc:	2002      	movs	r0, #2
 8001cde:	f7ff fd23 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001ce2:	20f7      	movs	r0, #247	@ 0xf7
 8001ce4:	f7ff fd10 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001ce8:	2020      	movs	r0, #32
 8001cea:	f7ff fd1d 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001cee:	20ea      	movs	r0, #234	@ 0xea
 8001cf0:	f7ff fd0a 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7ff fd17 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f7ff fd14 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001d00:	20c0      	movs	r0, #192	@ 0xc0
 8001d02:	f7ff fd01 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001d06:	201b      	movs	r0, #27
 8001d08:	f7ff fd0e 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001d0c:	20c1      	movs	r0, #193	@ 0xc1
 8001d0e:	f7ff fcfb 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001d12:	2001      	movs	r0, #1
 8001d14:	f7ff fd08 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001d18:	20c5      	movs	r0, #197	@ 0xc5
 8001d1a:	f7ff fcf5 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001d1e:	2030      	movs	r0, #48	@ 0x30
 8001d20:	f7ff fd02 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001d24:	2030      	movs	r0, #48	@ 0x30
 8001d26:	f7ff fcff 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001d2a:	20c7      	movs	r0, #199	@ 0xc7
 8001d2c:	f7ff fcec 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001d30:	20b7      	movs	r0, #183	@ 0xb7
 8001d32:	f7ff fcf9 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001d36:	2036      	movs	r0, #54	@ 0x36
 8001d38:	f7ff fce6 	bl	8001708 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001d3c:	2008      	movs	r0, #8
 8001d3e:	f7ff fcf3 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001d42:	203a      	movs	r0, #58	@ 0x3a
 8001d44:	f7ff fce0 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001d48:	2055      	movs	r0, #85	@ 0x55
 8001d4a:	f7ff fced 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001d4e:	20b1      	movs	r0, #177	@ 0xb1
 8001d50:	f7ff fcda 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d54:	2000      	movs	r0, #0
 8001d56:	f7ff fce7 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001d5a:	201a      	movs	r0, #26
 8001d5c:	f7ff fce4 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001d60:	20b6      	movs	r0, #182	@ 0xb6
 8001d62:	f7ff fcd1 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001d66:	200a      	movs	r0, #10
 8001d68:	f7ff fcde 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001d6c:	20a2      	movs	r0, #162	@ 0xa2
 8001d6e:	f7ff fcdb 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001d72:	20f2      	movs	r0, #242	@ 0xf2
 8001d74:	f7ff fcc8 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7ff fcd5 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001d7e:	2026      	movs	r0, #38	@ 0x26
 8001d80:	f7ff fcc2 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001d84:	2001      	movs	r0, #1
 8001d86:	f7ff fccf 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001d8a:	20e0      	movs	r0, #224	@ 0xe0
 8001d8c:	f7ff fcbc 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001d90:	200f      	movs	r0, #15
 8001d92:	f7ff fcc9 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001d96:	202a      	movs	r0, #42	@ 0x2a
 8001d98:	f7ff fcc6 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001d9c:	2028      	movs	r0, #40	@ 0x28
 8001d9e:	f7ff fcc3 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001da2:	2008      	movs	r0, #8
 8001da4:	f7ff fcc0 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001da8:	200e      	movs	r0, #14
 8001daa:	f7ff fcbd 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001dae:	2008      	movs	r0, #8
 8001db0:	f7ff fcba 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001db4:	2054      	movs	r0, #84	@ 0x54
 8001db6:	f7ff fcb7 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001dba:	20a9      	movs	r0, #169	@ 0xa9
 8001dbc:	f7ff fcb4 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001dc0:	2043      	movs	r0, #67	@ 0x43
 8001dc2:	f7ff fcb1 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001dc6:	200a      	movs	r0, #10
 8001dc8:	f7ff fcae 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001dcc:	200f      	movs	r0, #15
 8001dce:	f7ff fcab 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7ff fca8 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7ff fca5 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff fca2 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff fc9f 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001dea:	20e1      	movs	r0, #225	@ 0xe1
 8001dec:	f7ff fc8c 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff fc99 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001df6:	2015      	movs	r0, #21
 8001df8:	f7ff fc96 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001dfc:	2017      	movs	r0, #23
 8001dfe:	f7ff fc93 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001e02:	2007      	movs	r0, #7
 8001e04:	f7ff fc90 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001e08:	2011      	movs	r0, #17
 8001e0a:	f7ff fc8d 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001e0e:	2006      	movs	r0, #6
 8001e10:	f7ff fc8a 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001e14:	202b      	movs	r0, #43	@ 0x2b
 8001e16:	f7ff fc87 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001e1a:	2056      	movs	r0, #86	@ 0x56
 8001e1c:	f7ff fc84 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001e20:	203c      	movs	r0, #60	@ 0x3c
 8001e22:	f7ff fc81 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001e26:	2005      	movs	r0, #5
 8001e28:	f7ff fc7e 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001e2c:	2010      	movs	r0, #16
 8001e2e:	f7ff fc7b 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e32:	200f      	movs	r0, #15
 8001e34:	f7ff fc78 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001e38:	203f      	movs	r0, #63	@ 0x3f
 8001e3a:	f7ff fc75 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001e3e:	203f      	movs	r0, #63	@ 0x3f
 8001e40:	f7ff fc72 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e44:	200f      	movs	r0, #15
 8001e46:	f7ff fc6f 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001e4a:	202b      	movs	r0, #43	@ 0x2b
 8001e4c:	f7ff fc5c 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e50:	2000      	movs	r0, #0
 8001e52:	f7ff fc69 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7ff fc66 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f7ff fc63 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001e62:	203f      	movs	r0, #63	@ 0x3f
 8001e64:	f7ff fc60 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001e68:	202a      	movs	r0, #42	@ 0x2a
 8001e6a:	f7ff fc4d 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f7ff fc5a 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff fc57 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff fc54 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001e80:	20ef      	movs	r0, #239	@ 0xef
 8001e82:	f7ff fc51 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001e86:	2011      	movs	r0, #17
 8001e88:	f7ff fc3e 	bl	8001708 <LCD_WR_REG>
	HAL_Delay(120);
 8001e8c:	2078      	movs	r0, #120	@ 0x78
 8001e8e:	f002 fdc9 	bl	8004a24 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001e92:	2029      	movs	r0, #41	@ 0x29
 8001e94:	f7ff fc38 	bl	8001708 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e9e:	4804      	ldr	r0, [pc, #16]	@ (8001eb0 <lcd_init+0x2bc>)
 8001ea0:	f003 fdf6 	bl	8005a90 <HAL_GPIO_WritePin>
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40020800 	.word	0x40020800
 8001eac:	20000234 	.word	0x20000234
 8001eb0:	40020000 	.word	0x40020000

08001eb4 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4413      	add	r3, r2
 8001ecc:	b298      	uxth	r0, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	8b3a      	ldrh	r2, [r7, #24]
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7ff fcf9 	bl	80018d4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	b298      	uxth	r0, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	8b3a      	ldrh	r2, [r7, #24]
 8001efc:	4619      	mov	r1, r3
 8001efe:	f7ff fce9 	bl	80018d4 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	b298      	uxth	r0, r3
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	8b3a      	ldrh	r2, [r7, #24]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f7ff fcd9 	bl	80018d4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	b298      	uxth	r0, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	8b3a      	ldrh	r2, [r7, #24]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f7ff fcc9 	bl	80018d4 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b298      	uxth	r0, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4413      	add	r3, r2
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	8b3a      	ldrh	r2, [r7, #24]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f7ff fcb9 	bl	80018d4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	b298      	uxth	r0, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	4413      	add	r3, r2
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	8b3a      	ldrh	r2, [r7, #24]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f7ff fca9 	bl	80018d4 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	b298      	uxth	r0, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	8b3a      	ldrh	r2, [r7, #24]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f7ff fc99 	bl	80018d4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	b298      	uxth	r0, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	8b3a      	ldrh	r2, [r7, #24]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f7ff fc89 	bl	80018d4 <lcd_DrawPoint>
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b08a      	sub	sp, #40	@ 0x28
 8001fce:	af02      	add	r7, sp, #8
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	603b      	str	r3, [r7, #0]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	f1c3 0303 	rsb	r3, r3, #3
 8001fea:	613b      	str	r3, [r7, #16]


	if (fill)
 8001fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d04f      	beq.n	8002092 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8001ff2:	e029      	b.n	8002048 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	e00a      	b.n	8002010 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	68b9      	ldr	r1, [r7, #8]
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f7ff ff55 	bl	8001eb4 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3301      	adds	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	429a      	cmp	r2, r3
 8002016:	ddf0      	ble.n	8001ffa <lcd_DrawCircle+0x30>

			if (d < 0) {
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	2b00      	cmp	r3, #0
 800201c:	da06      	bge.n	800202c <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	009a      	lsls	r2, r3, #2
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4413      	add	r3, r2
 8002026:	3306      	adds	r3, #6
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	e00a      	b.n	8002042 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	009a      	lsls	r2, r3, #2
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4413      	add	r3, r2
 8002038:	330a      	adds	r3, #10
 800203a:	613b      	str	r3, [r7, #16]
				y--;
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	3b01      	subs	r3, #1
 8002040:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3301      	adds	r3, #1
 8002046:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	429a      	cmp	r2, r3
 800204e:	ddd1      	ble.n	8001ff4 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8002050:	e023      	b.n	800209a <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	68b9      	ldr	r1, [r7, #8]
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7ff ff29 	bl	8001eb4 <_draw_circle_8>
			if (d < 0) {
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	da06      	bge.n	8002076 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	009a      	lsls	r2, r3, #2
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4413      	add	r3, r2
 8002070:	3306      	adds	r3, #6
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	e00a      	b.n	800208c <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	009a      	lsls	r2, r3, #2
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4413      	add	r3, r2
 8002082:	330a      	adds	r3, #10
 8002084:	613b      	str	r3, [r7, #16]
				y--;
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	3b01      	subs	r3, #1
 800208a:	61bb      	str	r3, [r7, #24]
			x++;
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	3301      	adds	r3, #1
 8002090:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	429a      	cmp	r2, r3
 8002098:	dddb      	ble.n	8002052 <lcd_DrawCircle+0x88>
}
 800209a:	bf00      	nop
 800209c:	3720      	adds	r7, #32
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b08b      	sub	sp, #44	@ 0x2c
 80020a8:	af04      	add	r7, sp, #16
 80020aa:	60ba      	str	r2, [r7, #8]
 80020ac:	461a      	mov	r2, r3
 80020ae:	4603      	mov	r3, r0
 80020b0:	81fb      	strh	r3, [r7, #14]
 80020b2:	460b      	mov	r3, r1
 80020b4:	81bb      	strh	r3, [r7, #12]
 80020b6:	4613      	mov	r3, r2
 80020b8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80020ba:	89fb      	ldrh	r3, [r7, #14]
 80020bc:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80020c2:	e048      	b.n	8002156 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d145      	bne.n	8002156 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80020ca:	89fa      	ldrh	r2, [r7, #14]
 80020cc:	4b26      	ldr	r3, [pc, #152]	@ (8002168 <lcd_ShowStr+0xc4>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80020d6:	085b      	lsrs	r3, r3, #1
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	1acb      	subs	r3, r1, r3
 80020dc:	429a      	cmp	r2, r3
 80020de:	dc3f      	bgt.n	8002160 <lcd_ShowStr+0xbc>
 80020e0:	89ba      	ldrh	r2, [r7, #12]
 80020e2:	4b21      	ldr	r3, [pc, #132]	@ (8002168 <lcd_ShowStr+0xc4>)
 80020e4:	885b      	ldrh	r3, [r3, #2]
 80020e6:	4619      	mov	r1, r3
 80020e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80020ec:	1acb      	subs	r3, r1, r3
 80020ee:	429a      	cmp	r2, r3
 80020f0:	dc36      	bgt.n	8002160 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b80      	cmp	r3, #128	@ 0x80
 80020f8:	d902      	bls.n	8002100 <lcd_ShowStr+0x5c>
 80020fa:	2301      	movs	r3, #1
 80020fc:	75fb      	strb	r3, [r7, #23]
 80020fe:	e02a      	b.n	8002156 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b0d      	cmp	r3, #13
 8002106:	d10b      	bne.n	8002120 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002108:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800210c:	b29a      	uxth	r2, r3
 800210e:	89bb      	ldrh	r3, [r7, #12]
 8002110:	4413      	add	r3, r2
 8002112:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002114:	8abb      	ldrh	r3, [r7, #20]
 8002116:	81fb      	strh	r3, [r7, #14]
					str++;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	3301      	adds	r3, #1
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	e017      	b.n	8002150 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	781a      	ldrb	r2, [r3, #0]
 8002124:	88fc      	ldrh	r4, [r7, #6]
 8002126:	89b9      	ldrh	r1, [r7, #12]
 8002128:	89f8      	ldrh	r0, [r7, #14]
 800212a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800212e:	9302      	str	r3, [sp, #8]
 8002130:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	4623      	mov	r3, r4
 800213c:	f7ff fc66 	bl	8001a0c <lcd_ShowChar>
					x+=sizey/2;
 8002140:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002144:	085b      	lsrs	r3, r3, #1
 8002146:	b2db      	uxtb	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	89fb      	ldrh	r3, [r7, #14]
 800214c:	4413      	add	r3, r2
 800214e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	3301      	adds	r3, #1
 8002154:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1b2      	bne.n	80020c4 <lcd_ShowStr+0x20>
 800215e:	e000      	b.n	8002162 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002160:	bf00      	nop
			}
		}
	}
}
 8002162:	371c      	adds	r7, #28
 8002164:	46bd      	mov	sp, r7
 8002166:	bd90      	pop	{r4, r7, pc}
 8002168:	20000234 	.word	0x20000234

0800216c <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002170:	4b3f      	ldr	r3, [pc, #252]	@ (8002270 <led7_Scan+0x104>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	b29a      	uxth	r2, r3
 8002178:	4b3d      	ldr	r3, [pc, #244]	@ (8002270 <led7_Scan+0x104>)
 800217a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800217c:	4b3d      	ldr	r3, [pc, #244]	@ (8002274 <led7_Scan+0x108>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a3d      	ldr	r2, [pc, #244]	@ (8002278 <led7_Scan+0x10c>)
 8002182:	5cd3      	ldrb	r3, [r2, r3]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	b21a      	sxth	r2, r3
 8002188:	4b39      	ldr	r3, [pc, #228]	@ (8002270 <led7_Scan+0x104>)
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	b21b      	sxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b21b      	sxth	r3, r3
 8002192:	b29a      	uxth	r2, r3
 8002194:	4b36      	ldr	r3, [pc, #216]	@ (8002270 <led7_Scan+0x104>)
 8002196:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002198:	4b36      	ldr	r3, [pc, #216]	@ (8002274 <led7_Scan+0x108>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b03      	cmp	r3, #3
 800219e:	d847      	bhi.n	8002230 <led7_Scan+0xc4>
 80021a0:	a201      	add	r2, pc, #4	@ (adr r2, 80021a8 <led7_Scan+0x3c>)
 80021a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a6:	bf00      	nop
 80021a8:	080021b9 	.word	0x080021b9
 80021ac:	080021d7 	.word	0x080021d7
 80021b0:	080021f5 	.word	0x080021f5
 80021b4:	08002213 	.word	0x08002213
	case 0:
		spi_buffer |= 0x00b0;
 80021b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002270 <led7_Scan+0x104>)
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002270 <led7_Scan+0x104>)
 80021c4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80021c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002270 <led7_Scan+0x104>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	4b27      	ldr	r3, [pc, #156]	@ (8002270 <led7_Scan+0x104>)
 80021d2:	801a      	strh	r2, [r3, #0]
		break;
 80021d4:	e02d      	b.n	8002232 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80021d6:	4b26      	ldr	r3, [pc, #152]	@ (8002270 <led7_Scan+0x104>)
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b23      	ldr	r3, [pc, #140]	@ (8002270 <led7_Scan+0x104>)
 80021e2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80021e4:	4b22      	ldr	r3, [pc, #136]	@ (8002270 <led7_Scan+0x104>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	f023 0320 	bic.w	r3, r3, #32
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	4b20      	ldr	r3, [pc, #128]	@ (8002270 <led7_Scan+0x104>)
 80021f0:	801a      	strh	r2, [r3, #0]
		break;
 80021f2:	e01e      	b.n	8002232 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80021f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002270 <led7_Scan+0x104>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002270 <led7_Scan+0x104>)
 8002200:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002202:	4b1b      	ldr	r3, [pc, #108]	@ (8002270 <led7_Scan+0x104>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	f023 0310 	bic.w	r3, r3, #16
 800220a:	b29a      	uxth	r2, r3
 800220c:	4b18      	ldr	r3, [pc, #96]	@ (8002270 <led7_Scan+0x104>)
 800220e:	801a      	strh	r2, [r3, #0]
		break;
 8002210:	e00f      	b.n	8002232 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002212:	4b17      	ldr	r3, [pc, #92]	@ (8002270 <led7_Scan+0x104>)
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800221a:	b29a      	uxth	r2, r3
 800221c:	4b14      	ldr	r3, [pc, #80]	@ (8002270 <led7_Scan+0x104>)
 800221e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002220:	4b13      	ldr	r3, [pc, #76]	@ (8002270 <led7_Scan+0x104>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002228:	b29a      	uxth	r2, r3
 800222a:	4b11      	ldr	r3, [pc, #68]	@ (8002270 <led7_Scan+0x104>)
 800222c:	801a      	strh	r2, [r3, #0]
		break;
 800222e:	e000      	b.n	8002232 <led7_Scan+0xc6>
	default:
		break;
 8002230:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002232:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <led7_Scan+0x108>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	3301      	adds	r3, #1
 8002238:	425a      	negs	r2, r3
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	f002 0203 	and.w	r2, r2, #3
 8002242:	bf58      	it	pl
 8002244:	4253      	negpl	r3, r2
 8002246:	4a0b      	ldr	r2, [pc, #44]	@ (8002274 <led7_Scan+0x108>)
 8002248:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2140      	movs	r1, #64	@ 0x40
 800224e:	480b      	ldr	r0, [pc, #44]	@ (800227c <led7_Scan+0x110>)
 8002250:	f003 fc1e 	bl	8005a90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002254:	2301      	movs	r3, #1
 8002256:	2202      	movs	r2, #2
 8002258:	4905      	ldr	r1, [pc, #20]	@ (8002270 <led7_Scan+0x104>)
 800225a:	4809      	ldr	r0, [pc, #36]	@ (8002280 <led7_Scan+0x114>)
 800225c:	f005 f8ff 	bl	800745e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002260:	2201      	movs	r2, #1
 8002262:	2140      	movs	r1, #64	@ 0x40
 8002264:	4805      	ldr	r0, [pc, #20]	@ (800227c <led7_Scan+0x110>)
 8002266:	f003 fc13 	bl	8005a90 <HAL_GPIO_WritePin>
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000004 	.word	0x20000004
 8002274:	2000023c 	.word	0x2000023c
 8002278:	20000000 	.word	0x20000000
 800227c:	40021800 	.word	0x40021800
 8002280:	20001230 	.word	0x20001230

08002284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002288:	f002 fb5a 	bl	8004940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800228c:	f000 f81e 	bl	80022cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002290:	f7ff f8ae 	bl	80013f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002294:	f001 fb28 	bl	80038e8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002298:	f001 f914 	bl	80034c4 <MX_SPI1_Init>
  MX_FSMC_Init();
 800229c:	f7fe ffd8 	bl	8001250 <MX_FSMC_Init>
  MX_I2C1_Init();
 80022a0:	f7ff f9bc 	bl	800161c <MX_I2C1_Init>
  MX_TIM13_Init();
 80022a4:	f001 fb6c 	bl	8003980 <MX_TIM13_Init>
  MX_DMA_Init();
 80022a8:	f7fe ffb2 	bl	8001210 <MX_DMA_Init>
  MX_ADC1_Init();
 80022ac:	f7fe fde4 	bl	8000e78 <MX_ADC1_Init>
  MX_TIM1_Init();
 80022b0:	f001 faca 	bl	8003848 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80022b4:	f000 f874 	bl	80023a0 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(WHITE);
 80022b8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80022bc:	f7ff faa2 	bl	8001804 <lcd_Clear>
 while (1)
  {
	  //scan touch screen
	  touch_Scan();
 80022c0:	f002 fae0 	bl	8004884 <touch_Scan>
    touchProcess();
 80022c4:	f000 f930 	bl	8002528 <touchProcess>
	  touch_Scan();
 80022c8:	bf00      	nop
 80022ca:	e7f9      	b.n	80022c0 <main+0x3c>

080022cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b094      	sub	sp, #80	@ 0x50
 80022d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022d2:	f107 0320 	add.w	r3, r7, #32
 80022d6:	2230      	movs	r2, #48	@ 0x30
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f006 fd01 	bl	8008ce2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f0:	2300      	movs	r3, #0
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	4b28      	ldr	r3, [pc, #160]	@ (8002398 <SystemClock_Config+0xcc>)
 80022f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f8:	4a27      	ldr	r2, [pc, #156]	@ (8002398 <SystemClock_Config+0xcc>)
 80022fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002300:	4b25      	ldr	r3, [pc, #148]	@ (8002398 <SystemClock_Config+0xcc>)
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800230c:	2300      	movs	r3, #0
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	4b22      	ldr	r3, [pc, #136]	@ (800239c <SystemClock_Config+0xd0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a21      	ldr	r2, [pc, #132]	@ (800239c <SystemClock_Config+0xd0>)
 8002316:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	4b1f      	ldr	r3, [pc, #124]	@ (800239c <SystemClock_Config+0xd0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002328:	2302      	movs	r3, #2
 800232a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800232c:	2301      	movs	r3, #1
 800232e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002330:	2310      	movs	r3, #16
 8002332:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002334:	2302      	movs	r3, #2
 8002336:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002338:	2300      	movs	r3, #0
 800233a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800233c:	2308      	movs	r3, #8
 800233e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002340:	23a8      	movs	r3, #168	@ 0xa8
 8002342:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002344:	2302      	movs	r3, #2
 8002346:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002348:	2304      	movs	r3, #4
 800234a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800234c:	f107 0320 	add.w	r3, r7, #32
 8002350:	4618      	mov	r0, r3
 8002352:	f004 fb77 	bl	8006a44 <HAL_RCC_OscConfig>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800235c:	f000 f99e 	bl	800269c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002360:	230f      	movs	r3, #15
 8002362:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002364:	2302      	movs	r3, #2
 8002366:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800236c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002370:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002372:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002376:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	2105      	movs	r1, #5
 800237e:	4618      	mov	r0, r3
 8002380:	f004 fdd8 	bl	8006f34 <HAL_RCC_ClockConfig>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800238a:	f000 f987 	bl	800269c <Error_Handler>
  }
}
 800238e:	bf00      	nop
 8002390:	3750      	adds	r7, #80	@ 0x50
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800
 800239c:	40007000 	.word	0x40007000

080023a0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	  timer_init();
 80023a4:	f000 ffe8 	bl	8003378 <timer_init>
	  button_init();
 80023a8:	f7fe ff26 	bl	80011f8 <button_init>
	  lcd_init();
 80023ac:	f7ff fc22 	bl	8001bf4 <lcd_init>
	  touch_init();
 80023b0:	f002 fa58 	bl	8004864 <touch_init>
	  setTimer2(50);
 80023b4:	2032      	movs	r0, #50	@ 0x32
 80023b6:	f000 ffed 	bl	8003394 <setTimer2>
    setTimerSnakeRun(250);
 80023ba:	20fa      	movs	r0, #250	@ 0xfa
 80023bc:	f001 f806 	bl	80033cc <setTimerSnakeRun>
}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <isButtonStart>:
uint8_t isButtonClear(){
	if(!touch_IsTouched()) return 0;
	return touch_GetX() > 60 && touch_GetX() < 180 && touch_GetY() > 10 && touch_GetY() < 60;
}

uint8_t isButtonStart(){
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  if (!touch_IsTouched()) return 0;
 80023c8:	f002 fa66 	bl	8004898 <touch_IsTouched>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <isButtonStart+0x12>
 80023d2:	2300      	movs	r3, #0
 80023d4:	e017      	b.n	8002406 <isButtonStart+0x42>
  return touch_GetX() > 60 && touch_GetX() < 180 && touch_GetY() > 10 && touch_GetY() < 60;
 80023d6:	f002 fa71 	bl	80048bc <touch_GetX>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b3c      	cmp	r3, #60	@ 0x3c
 80023de:	d910      	bls.n	8002402 <isButtonStart+0x3e>
 80023e0:	f002 fa6c 	bl	80048bc <touch_GetX>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2bb3      	cmp	r3, #179	@ 0xb3
 80023e8:	d80b      	bhi.n	8002402 <isButtonStart+0x3e>
 80023ea:	f002 fa73 	bl	80048d4 <touch_GetY>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b0a      	cmp	r3, #10
 80023f2:	d906      	bls.n	8002402 <isButtonStart+0x3e>
 80023f4:	f002 fa6e 	bl	80048d4 <touch_GetY>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b3b      	cmp	r3, #59	@ 0x3b
 80023fc:	d801      	bhi.n	8002402 <isButtonStart+0x3e>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <isButtonStart+0x40>
 8002402:	2300      	movs	r3, #0
 8002404:	b2db      	uxtb	r3, r3
}
 8002406:	4618      	mov	r0, r3
 8002408:	bd80      	pop	{r7, pc}

0800240a <isButtonTop>:

uint8_t isButtonTop(){
 800240a:	b580      	push	{r7, lr}
 800240c:	af00      	add	r7, sp, #0
  if (!touch_IsTouched()) return 0;
 800240e:	f002 fa43 	bl	8004898 <touch_IsTouched>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <isButtonTop+0x12>
 8002418:	2300      	movs	r3, #0
 800241a:	e017      	b.n	800244c <isButtonTop+0x42>
  return touch_GetX() > 150 && touch_GetX() < 170 && touch_GetY() > 0 && touch_GetY() < 20;
 800241c:	f002 fa4e 	bl	80048bc <touch_GetX>
 8002420:	4603      	mov	r3, r0
 8002422:	2b96      	cmp	r3, #150	@ 0x96
 8002424:	d910      	bls.n	8002448 <isButtonTop+0x3e>
 8002426:	f002 fa49 	bl	80048bc <touch_GetX>
 800242a:	4603      	mov	r3, r0
 800242c:	2ba9      	cmp	r3, #169	@ 0xa9
 800242e:	d80b      	bhi.n	8002448 <isButtonTop+0x3e>
 8002430:	f002 fa50 	bl	80048d4 <touch_GetY>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d006      	beq.n	8002448 <isButtonTop+0x3e>
 800243a:	f002 fa4b 	bl	80048d4 <touch_GetY>
 800243e:	4603      	mov	r3, r0
 8002440:	2b13      	cmp	r3, #19
 8002442:	d801      	bhi.n	8002448 <isButtonTop+0x3e>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <isButtonTop+0x40>
 8002448:	2300      	movs	r3, #0
 800244a:	b2db      	uxtb	r3, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	bd80      	pop	{r7, pc}

08002450 <isButtonDown>:
uint8_t isButtonDown(){
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  if (!touch_IsTouched()) return 0;
 8002454:	f002 fa20 	bl	8004898 <touch_IsTouched>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <isButtonDown+0x12>
 800245e:	2300      	movs	r3, #0
 8002460:	e017      	b.n	8002492 <isButtonDown+0x42>
  return touch_GetX() > 150 && touch_GetX() < 170 && touch_GetY() > 220 && touch_GetY() < 240;
 8002462:	f002 fa2b 	bl	80048bc <touch_GetX>
 8002466:	4603      	mov	r3, r0
 8002468:	2b96      	cmp	r3, #150	@ 0x96
 800246a:	d910      	bls.n	800248e <isButtonDown+0x3e>
 800246c:	f002 fa26 	bl	80048bc <touch_GetX>
 8002470:	4603      	mov	r3, r0
 8002472:	2ba9      	cmp	r3, #169	@ 0xa9
 8002474:	d80b      	bhi.n	800248e <isButtonDown+0x3e>
 8002476:	f002 fa2d 	bl	80048d4 <touch_GetY>
 800247a:	4603      	mov	r3, r0
 800247c:	2bdc      	cmp	r3, #220	@ 0xdc
 800247e:	d906      	bls.n	800248e <isButtonDown+0x3e>
 8002480:	f002 fa28 	bl	80048d4 <touch_GetY>
 8002484:	4603      	mov	r3, r0
 8002486:	2bef      	cmp	r3, #239	@ 0xef
 8002488:	d801      	bhi.n	800248e <isButtonDown+0x3e>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <isButtonDown+0x40>
 800248e:	2300      	movs	r3, #0
 8002490:	b2db      	uxtb	r3, r3
}
 8002492:	4618      	mov	r0, r3
 8002494:	bd80      	pop	{r7, pc}

08002496 <isButtonLeft>:
uint8_t isButtonLeft(){
 8002496:	b580      	push	{r7, lr}
 8002498:	af00      	add	r7, sp, #0
  if (!touch_IsTouched()) return 0;
 800249a:	f002 f9fd 	bl	8004898 <touch_IsTouched>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <isButtonLeft+0x12>
 80024a4:	2300      	movs	r3, #0
 80024a6:	e017      	b.n	80024d8 <isButtonLeft+0x42>
  return touch_GetX() > 0 && touch_GetX() < 20 && touch_GetY() > 110 && touch_GetY() < 130;
 80024a8:	f002 fa08 	bl	80048bc <touch_GetX>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d010      	beq.n	80024d4 <isButtonLeft+0x3e>
 80024b2:	f002 fa03 	bl	80048bc <touch_GetX>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b13      	cmp	r3, #19
 80024ba:	d80b      	bhi.n	80024d4 <isButtonLeft+0x3e>
 80024bc:	f002 fa0a 	bl	80048d4 <touch_GetY>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b6e      	cmp	r3, #110	@ 0x6e
 80024c4:	d906      	bls.n	80024d4 <isButtonLeft+0x3e>
 80024c6:	f002 fa05 	bl	80048d4 <touch_GetY>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b81      	cmp	r3, #129	@ 0x81
 80024ce:	d801      	bhi.n	80024d4 <isButtonLeft+0x3e>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <isButtonLeft+0x40>
 80024d4:	2300      	movs	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
}
 80024d8:	4618      	mov	r0, r3
 80024da:	bd80      	pop	{r7, pc}

080024dc <isButtonRight>:
uint8_t isButtonRight(){
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  if (!touch_IsTouched()) return 0;
 80024e0:	f002 f9da 	bl	8004898 <touch_IsTouched>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <isButtonRight+0x12>
 80024ea:	2300      	movs	r3, #0
 80024ec:	e019      	b.n	8002522 <isButtonRight+0x46>
  return touch_GetX() > 300 && touch_GetX() < 320 && touch_GetY() > 110 && touch_GetY() < 130;
 80024ee:	f002 f9e5 	bl	80048bc <touch_GetX>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80024f8:	d911      	bls.n	800251e <isButtonRight+0x42>
 80024fa:	f002 f9df 	bl	80048bc <touch_GetX>
 80024fe:	4603      	mov	r3, r0
 8002500:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002504:	d20b      	bcs.n	800251e <isButtonRight+0x42>
 8002506:	f002 f9e5 	bl	80048d4 <touch_GetY>
 800250a:	4603      	mov	r3, r0
 800250c:	2b6e      	cmp	r3, #110	@ 0x6e
 800250e:	d906      	bls.n	800251e <isButtonRight+0x42>
 8002510:	f002 f9e0 	bl	80048d4 <touch_GetY>
 8002514:	4603      	mov	r3, r0
 8002516:	2b81      	cmp	r3, #129	@ 0x81
 8002518:	d801      	bhi.n	800251e <isButtonRight+0x42>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <isButtonRight+0x44>
 800251e:	2300      	movs	r3, #0
 8002520:	b2db      	uxtb	r3, r3
}
 8002522:	4618      	mov	r0, r3
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <touchProcess>:
void touchProcess(){
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af04      	add	r7, sp, #16
	switch (status) {
 800252e:	4b56      	ldr	r3, [pc, #344]	@ (8002688 <touchProcess+0x160>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b02      	cmp	r3, #2
 8002534:	f000 8097 	beq.w	8002666 <touchProcess+0x13e>
 8002538:	2b02      	cmp	r3, #2
 800253a:	f300 809c 	bgt.w	8002676 <touchProcess+0x14e>
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <touchProcess+0x20>
 8002542:	2b01      	cmp	r3, #1
 8002544:	d051      	beq.n	80025ea <touchProcess+0xc2>
		case CLEAR:
			lcd_Clear(WHITE);
      status = INIT;
			break;
		default:
			break;
 8002546:	e096      	b.n	8002676 <touchProcess+0x14e>
      lcd_Clear(WHITE);
 8002548:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800254c:	f7ff f95a 	bl	8001804 <lcd_Clear>
			lcd_Fill(60, 10, 180, 60, GBLUE);
 8002550:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	233c      	movs	r3, #60	@ 0x3c
 8002558:	22b4      	movs	r2, #180	@ 0xb4
 800255a:	210a      	movs	r1, #10
 800255c:	203c      	movs	r0, #60	@ 0x3c
 800255e:	f7ff f983 	bl	8001868 <lcd_Fill>
			lcd_ShowStr(90, 20, "Start", RED, BLACK, 24, 1);
 8002562:	2301      	movs	r3, #1
 8002564:	9302      	str	r3, [sp, #8]
 8002566:	2318      	movs	r3, #24
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	2300      	movs	r3, #0
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002572:	4a46      	ldr	r2, [pc, #280]	@ (800268c <touchProcess+0x164>)
 8002574:	2114      	movs	r1, #20
 8002576:	205a      	movs	r0, #90	@ 0x5a
 8002578:	f7ff fd94 	bl	80020a4 <lcd_ShowStr>
      if (isButtonStart()){
 800257c:	f7ff ff22 	bl	80023c4 <isButtonStart>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d079      	beq.n	800267a <touchProcess+0x152>
			  status = PLAY;
 8002586:	4b40      	ldr	r3, [pc, #256]	@ (8002688 <touchProcess+0x160>)
 8002588:	2201      	movs	r2, #1
 800258a:	601a      	str	r2, [r3, #0]
        lcd_Clear(WHITE);
 800258c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002590:	f7ff f938 	bl	8001804 <lcd_Clear>
        snakeInit();
 8002594:	f000 fdc8 	bl	8003128 <snakeInit>
        generateFruit();
 8002598:	f000 fe66 	bl	8003268 <generateFruit>
        lcd_Fill(150, 0, 170, 20, GBLUE);      // Top center
 800259c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	2314      	movs	r3, #20
 80025a4:	22aa      	movs	r2, #170	@ 0xaa
 80025a6:	2100      	movs	r1, #0
 80025a8:	2096      	movs	r0, #150	@ 0x96
 80025aa:	f7ff f95d 	bl	8001868 <lcd_Fill>
        lcd_Fill(150, 220, 170, 240, GBLUE);   // Bottom center
 80025ae:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	23f0      	movs	r3, #240	@ 0xf0
 80025b6:	22aa      	movs	r2, #170	@ 0xaa
 80025b8:	21dc      	movs	r1, #220	@ 0xdc
 80025ba:	2096      	movs	r0, #150	@ 0x96
 80025bc:	f7ff f954 	bl	8001868 <lcd_Fill>
        lcd_Fill(0, 110, 20, 130, GBLUE);    // Left center
 80025c0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2382      	movs	r3, #130	@ 0x82
 80025c8:	2214      	movs	r2, #20
 80025ca:	216e      	movs	r1, #110	@ 0x6e
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7ff f94b 	bl	8001868 <lcd_Fill>
        lcd_Fill(300, 110, 320, 130, GBLUE);  // Right center
 80025d2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	2382      	movs	r3, #130	@ 0x82
 80025da:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80025de:	216e      	movs	r1, #110	@ 0x6e
 80025e0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80025e4:	f7ff f940 	bl	8001868 <lcd_Fill>
			break;
 80025e8:	e047      	b.n	800267a <touchProcess+0x152>
      if(touch_IsTouched()){
 80025ea:	f002 f955 	bl	8004898 <touch_IsTouched>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d022      	beq.n	800263a <touchProcess+0x112>
        if(isButtonTop()){
 80025f4:	f7ff ff09 	bl	800240a <isButtonTop>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <touchProcess+0xde>
          buttonForSnake[0] = 1;
 80025fe:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <touchProcess+0x168>)
 8002600:	2201      	movs	r2, #1
 8002602:	801a      	strh	r2, [r3, #0]
 8002604:	e019      	b.n	800263a <touchProcess+0x112>
        else if(isButtonDown()){
 8002606:	f7ff ff23 	bl	8002450 <isButtonDown>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <touchProcess+0xf0>
          buttonForSnake[5] = 1;
 8002610:	4b1f      	ldr	r3, [pc, #124]	@ (8002690 <touchProcess+0x168>)
 8002612:	2201      	movs	r2, #1
 8002614:	815a      	strh	r2, [r3, #10]
 8002616:	e010      	b.n	800263a <touchProcess+0x112>
        else if(isButtonLeft()){
 8002618:	f7ff ff3d 	bl	8002496 <isButtonLeft>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <touchProcess+0x102>
          buttonForSnake[1] = 1;
 8002622:	4b1b      	ldr	r3, [pc, #108]	@ (8002690 <touchProcess+0x168>)
 8002624:	2201      	movs	r2, #1
 8002626:	805a      	strh	r2, [r3, #2]
 8002628:	e007      	b.n	800263a <touchProcess+0x112>
        else if(isButtonRight()){
 800262a:	f7ff ff57 	bl	80024dc <isButtonRight>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <touchProcess+0x112>
          buttonForSnake[3] = 1;
 8002634:	4b16      	ldr	r3, [pc, #88]	@ (8002690 <touchProcess+0x168>)
 8002636:	2201      	movs	r2, #1
 8002638:	80da      	strh	r2, [r3, #6]
      generateFruit();
 800263a:	f000 fe15 	bl	8003268 <generateFruit>
      if (flagForSnakeRun == 1 ){
 800263e:	4b15      	ldr	r3, [pc, #84]	@ (8002694 <touchProcess+0x16c>)
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d104      	bne.n	8002650 <touchProcess+0x128>
        flagForSnakeRun = 0;
 8002646:	4b13      	ldr	r3, [pc, #76]	@ (8002694 <touchProcess+0x16c>)
 8002648:	2200      	movs	r2, #0
 800264a:	801a      	strh	r2, [r3, #0]
        snakeRun();
 800264c:	f000 fd26 	bl	800309c <snakeRun>
      if (gameover == 1){
 8002650:	4b11      	ldr	r3, [pc, #68]	@ (8002698 <touchProcess+0x170>)
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d112      	bne.n	800267e <touchProcess+0x156>
        status = CLEAR;
 8002658:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <touchProcess+0x160>)
 800265a:	2202      	movs	r2, #2
 800265c:	601a      	str	r2, [r3, #0]
        gameover = 0;
 800265e:	4b0e      	ldr	r3, [pc, #56]	@ (8002698 <touchProcess+0x170>)
 8002660:	2200      	movs	r2, #0
 8002662:	801a      	strh	r2, [r3, #0]
			break;
 8002664:	e00b      	b.n	800267e <touchProcess+0x156>
			lcd_Clear(WHITE);
 8002666:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800266a:	f7ff f8cb 	bl	8001804 <lcd_Clear>
      status = INIT;
 800266e:	4b06      	ldr	r3, [pc, #24]	@ (8002688 <touchProcess+0x160>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
			break;
 8002674:	e004      	b.n	8002680 <touchProcess+0x158>
			break;
 8002676:	bf00      	nop
 8002678:	e002      	b.n	8002680 <touchProcess+0x158>
			break;
 800267a:	bf00      	nop
 800267c:	e000      	b.n	8002680 <touchProcess+0x158>
			break;
 800267e:	bf00      	nop
	}
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000240 	.word	0x20000240
 800268c:	08009c3c 	.word	0x08009c3c
 8002690:	20000248 	.word	0x20000248
 8002694:	2000122a 	.word	0x2000122a
 8002698:	20000254 	.word	0x20000254

0800269c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026a0:	b672      	cpsid	i
}
 80026a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <Error_Handler+0x8>

080026a8 <drawHeadSnake>:
} WALLs;

WALLs wallObject;

void drawHeadSnake()
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af02      	add	r7, sp, #8
	switch (snakeObject.snakeDirectionHead)
 80026ae:	4b8f      	ldr	r3, [pc, #572]	@ (80028ec <drawHeadSnake+0x244>)
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	f200 8114 	bhi.w	80028e0 <drawHeadSnake+0x238>
 80026b8:	a201      	add	r2, pc, #4	@ (adr r2, 80026c0 <drawHeadSnake+0x18>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	08002859 	.word	0x08002859
 80026c4:	080027d9 	.word	0x080027d9
 80026c8:	08002751 	.word	0x08002751
 80026cc:	080026d1 	.word	0x080026d1
	{
	case UP:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80026d0:	4b86      	ldr	r3, [pc, #536]	@ (80028ec <drawHeadSnake+0x244>)
 80026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d4:	b298      	uxth	r0, r3
 80026d6:	4b85      	ldr	r3, [pc, #532]	@ (80028ec <drawHeadSnake+0x244>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 80026dc:	4b83      	ldr	r3, [pc, #524]	@ (80028ec <drawHeadSnake+0x244>)
 80026de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3309      	adds	r3, #9
 80026e4:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 80026e6:	4b81      	ldr	r3, [pc, #516]	@ (80028ec <drawHeadSnake+0x244>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3309      	adds	r3, #9
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 80026f4:	9400      	str	r4, [sp, #0]
 80026f6:	f7ff f8b7 	bl	8001868 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80026fa:	4b7c      	ldr	r3, [pc, #496]	@ (80028ec <drawHeadSnake+0x244>)
 80026fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fe:	b298      	uxth	r0, r3
 8002700:	4b7a      	ldr	r3, [pc, #488]	@ (80028ec <drawHeadSnake+0x244>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8002706:	4b79      	ldr	r3, [pc, #484]	@ (80028ec <drawHeadSnake+0x244>)
 8002708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800270a:	b29b      	uxth	r3, r3
 800270c:	3304      	adds	r3, #4
 800270e:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8002710:	4b76      	ldr	r3, [pc, #472]	@ (80028ec <drawHeadSnake+0x244>)
 8002712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002714:	b29b      	uxth	r3, r3
 8002716:	3304      	adds	r3, #4
 8002718:	b29b      	uxth	r3, r3
 800271a:	2400      	movs	r4, #0
 800271c:	9400      	str	r4, [sp, #0]
 800271e:	f7ff f8a3 	bl	8001868 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002722:	4b72      	ldr	r3, [pc, #456]	@ (80028ec <drawHeadSnake+0x244>)
 8002724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002726:	b29b      	uxth	r3, r3
 8002728:	3305      	adds	r3, #5
 800272a:	b298      	uxth	r0, r3
 800272c:	4b6f      	ldr	r3, [pc, #444]	@ (80028ec <drawHeadSnake+0x244>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002730:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8002732:	4b6e      	ldr	r3, [pc, #440]	@ (80028ec <drawHeadSnake+0x244>)
 8002734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002736:	b29b      	uxth	r3, r3
 8002738:	3309      	adds	r3, #9
 800273a:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 800273c:	4b6b      	ldr	r3, [pc, #428]	@ (80028ec <drawHeadSnake+0x244>)
 800273e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002740:	b29b      	uxth	r3, r3
 8002742:	3304      	adds	r3, #4
 8002744:	b29b      	uxth	r3, r3
 8002746:	2400      	movs	r4, #0
 8002748:	9400      	str	r4, [sp, #0]
 800274a:	f7ff f88d 	bl	8001868 <lcd_Fill>
		break;
 800274e:	e0c8      	b.n	80028e2 <drawHeadSnake+0x23a>
	case DOWN:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002750:	4b66      	ldr	r3, [pc, #408]	@ (80028ec <drawHeadSnake+0x244>)
 8002752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002754:	b298      	uxth	r0, r3
 8002756:	4b65      	ldr	r3, [pc, #404]	@ (80028ec <drawHeadSnake+0x244>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 800275c:	4b63      	ldr	r3, [pc, #396]	@ (80028ec <drawHeadSnake+0x244>)
 800275e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002760:	b29b      	uxth	r3, r3
 8002762:	3309      	adds	r3, #9
 8002764:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002766:	4b61      	ldr	r3, [pc, #388]	@ (80028ec <drawHeadSnake+0x244>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800276a:	b29b      	uxth	r3, r3
 800276c:	3309      	adds	r3, #9
 800276e:	b29b      	uxth	r3, r3
 8002770:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 8002774:	9400      	str	r4, [sp, #0]
 8002776:	f7ff f877 	bl	8001868 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 800277a:	4b5c      	ldr	r3, [pc, #368]	@ (80028ec <drawHeadSnake+0x244>)
 800277c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277e:	b298      	uxth	r0, r3
 8002780:	4b5a      	ldr	r3, [pc, #360]	@ (80028ec <drawHeadSnake+0x244>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002784:	b29b      	uxth	r3, r3
 8002786:	3305      	adds	r3, #5
 8002788:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 800278a:	4b58      	ldr	r3, [pc, #352]	@ (80028ec <drawHeadSnake+0x244>)
 800278c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 800278e:	b29b      	uxth	r3, r3
 8002790:	3304      	adds	r3, #4
 8002792:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8002794:	4b55      	ldr	r3, [pc, #340]	@ (80028ec <drawHeadSnake+0x244>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002798:	b29b      	uxth	r3, r3
 800279a:	3309      	adds	r3, #9
 800279c:	b29b      	uxth	r3, r3
 800279e:	2400      	movs	r4, #0
 80027a0:	9400      	str	r4, [sp, #0]
 80027a2:	f7ff f861 	bl	8001868 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 80027a6:	4b51      	ldr	r3, [pc, #324]	@ (80028ec <drawHeadSnake+0x244>)
 80027a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3305      	adds	r3, #5
 80027ae:	b298      	uxth	r0, r3
 80027b0:	4b4e      	ldr	r3, [pc, #312]	@ (80028ec <drawHeadSnake+0x244>)
 80027b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3305      	adds	r3, #5
 80027b8:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 80027ba:	4b4c      	ldr	r3, [pc, #304]	@ (80028ec <drawHeadSnake+0x244>)
 80027bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3309      	adds	r3, #9
 80027c2:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 80027c4:	4b49      	ldr	r3, [pc, #292]	@ (80028ec <drawHeadSnake+0x244>)
 80027c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3309      	adds	r3, #9
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2400      	movs	r4, #0
 80027d0:	9400      	str	r4, [sp, #0]
 80027d2:	f7ff f849 	bl	8001868 <lcd_Fill>
		break;
 80027d6:	e084      	b.n	80028e2 <drawHeadSnake+0x23a>
	case LEFT:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80027d8:	4b44      	ldr	r3, [pc, #272]	@ (80028ec <drawHeadSnake+0x244>)
 80027da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027dc:	b298      	uxth	r0, r3
 80027de:	4b43      	ldr	r3, [pc, #268]	@ (80028ec <drawHeadSnake+0x244>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 80027e4:	4b41      	ldr	r3, [pc, #260]	@ (80028ec <drawHeadSnake+0x244>)
 80027e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3309      	adds	r3, #9
 80027ec:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 80027ee:	4b3f      	ldr	r3, [pc, #252]	@ (80028ec <drawHeadSnake+0x244>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3309      	adds	r3, #9
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 80027fc:	9400      	str	r4, [sp, #0]
 80027fe:	f7ff f833 	bl	8001868 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002802:	4b3a      	ldr	r3, [pc, #232]	@ (80028ec <drawHeadSnake+0x244>)
 8002804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002806:	b298      	uxth	r0, r3
 8002808:	4b38      	ldr	r3, [pc, #224]	@ (80028ec <drawHeadSnake+0x244>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280c:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 800280e:	4b37      	ldr	r3, [pc, #220]	@ (80028ec <drawHeadSnake+0x244>)
 8002810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002812:	b29b      	uxth	r3, r3
 8002814:	3304      	adds	r3, #4
 8002816:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8002818:	4b34      	ldr	r3, [pc, #208]	@ (80028ec <drawHeadSnake+0x244>)
 800281a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800281c:	b29b      	uxth	r3, r3
 800281e:	3304      	adds	r3, #4
 8002820:	b29b      	uxth	r3, r3
 8002822:	2400      	movs	r4, #0
 8002824:	9400      	str	r4, [sp, #0]
 8002826:	f7ff f81f 	bl	8001868 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 800282a:	4b30      	ldr	r3, [pc, #192]	@ (80028ec <drawHeadSnake+0x244>)
 800282c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282e:	b298      	uxth	r0, r3
 8002830:	4b2e      	ldr	r3, [pc, #184]	@ (80028ec <drawHeadSnake+0x244>)
 8002832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002834:	b29b      	uxth	r3, r3
 8002836:	3305      	adds	r3, #5
 8002838:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 800283a:	4b2c      	ldr	r3, [pc, #176]	@ (80028ec <drawHeadSnake+0x244>)
 800283c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 800283e:	b29b      	uxth	r3, r3
 8002840:	3304      	adds	r3, #4
 8002842:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8002844:	4b29      	ldr	r3, [pc, #164]	@ (80028ec <drawHeadSnake+0x244>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002848:	b29b      	uxth	r3, r3
 800284a:	3309      	adds	r3, #9
 800284c:	b29b      	uxth	r3, r3
 800284e:	2400      	movs	r4, #0
 8002850:	9400      	str	r4, [sp, #0]
 8002852:	f7ff f809 	bl	8001868 <lcd_Fill>
		break;
 8002856:	e044      	b.n	80028e2 <drawHeadSnake+0x23a>
	case RIGHT:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002858:	4b24      	ldr	r3, [pc, #144]	@ (80028ec <drawHeadSnake+0x244>)
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	b298      	uxth	r0, r3
 800285e:	4b23      	ldr	r3, [pc, #140]	@ (80028ec <drawHeadSnake+0x244>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002864:	4b21      	ldr	r3, [pc, #132]	@ (80028ec <drawHeadSnake+0x244>)
 8002866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002868:	b29b      	uxth	r3, r3
 800286a:	3309      	adds	r3, #9
 800286c:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 800286e:	4b1f      	ldr	r3, [pc, #124]	@ (80028ec <drawHeadSnake+0x244>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002872:	b29b      	uxth	r3, r3
 8002874:	3309      	adds	r3, #9
 8002876:	b29b      	uxth	r3, r3
 8002878:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 800287c:	9400      	str	r4, [sp, #0]
 800287e:	f7fe fff3 	bl	8001868 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002882:	4b1a      	ldr	r3, [pc, #104]	@ (80028ec <drawHeadSnake+0x244>)
 8002884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002886:	b29b      	uxth	r3, r3
 8002888:	3305      	adds	r3, #5
 800288a:	b298      	uxth	r0, r3
 800288c:	4b17      	ldr	r3, [pc, #92]	@ (80028ec <drawHeadSnake+0x244>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8002892:	4b16      	ldr	r3, [pc, #88]	@ (80028ec <drawHeadSnake+0x244>)
 8002894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002896:	b29b      	uxth	r3, r3
 8002898:	3309      	adds	r3, #9
 800289a:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 800289c:	4b13      	ldr	r3, [pc, #76]	@ (80028ec <drawHeadSnake+0x244>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3304      	adds	r3, #4
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	2400      	movs	r4, #0
 80028a8:	9400      	str	r4, [sp, #0]
 80028aa:	f7fe ffdd 	bl	8001868 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 80028ae:	4b0f      	ldr	r3, [pc, #60]	@ (80028ec <drawHeadSnake+0x244>)
 80028b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3305      	adds	r3, #5
 80028b6:	b298      	uxth	r0, r3
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <drawHeadSnake+0x244>)
 80028ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3305      	adds	r3, #5
 80028c0:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 80028c2:	4b0a      	ldr	r3, [pc, #40]	@ (80028ec <drawHeadSnake+0x244>)
 80028c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3309      	adds	r3, #9
 80028ca:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 80028cc:	4b07      	ldr	r3, [pc, #28]	@ (80028ec <drawHeadSnake+0x244>)
 80028ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	3309      	adds	r3, #9
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2400      	movs	r4, #0
 80028d8:	9400      	str	r4, [sp, #0]
 80028da:	f7fe ffc5 	bl	8001868 <lcd_Fill>
		break;
 80028de:	e000      	b.n	80028e2 <drawHeadSnake+0x23a>
	default:
		break;
 80028e0:	bf00      	nop
	}
}
 80028e2:	bf00      	nop
 80028e4:	3704      	adds	r7, #4
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd90      	pop	{r4, r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000258 	.word	0x20000258

080028f0 <goLeft>:

void goLeft()
{
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b089      	sub	sp, #36	@ 0x24
 80028f4:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 80028f6:	4b58      	ldr	r3, [pc, #352]	@ (8002a58 <goLeft+0x168>)
 80028f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f040 80a7 	bne.w	8002a4e <goLeft+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8002900:	4b55      	ldr	r3, [pc, #340]	@ (8002a58 <goLeft+0x168>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d103      	bne.n	8002910 <goLeft+0x20>
		{
		case RIGHT:
			(*snakeObject.GORIGHT)();
 8002908:	4b53      	ldr	r3, [pc, #332]	@ (8002a58 <goLeft+0x168>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4798      	blx	r3
			break;
 800290e:	e09e      	b.n	8002a4e <goLeft+0x15e>
		default:
			snakeObject.snakeDirectionHead = LEFT;
 8002910:	4b51      	ldr	r3, [pc, #324]	@ (8002a58 <goLeft+0x168>)
 8002912:	2201      	movs	r2, #1
 8002914:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	e091      	b.n	8002a40 <goLeft+0x150>
			{
				if (i == 0)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d128      	bne.n	8002974 <goLeft+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 8002922:	4a4d      	ldr	r2, [pc, #308]	@ (8002a58 <goLeft+0x168>)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	3305      	adds	r3, #5
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4413      	add	r3, r2
 800292c:	f107 020c 	add.w	r2, r7, #12
 8002930:	3304      	adds	r3, #4
 8002932:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002936:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x -= snakeStep;
 800293a:	4a47      	ldr	r2, [pc, #284]	@ (8002a58 <goLeft+0x168>)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	3305      	adds	r3, #5
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4413      	add	r3, r2
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f1a3 020a 	sub.w	r2, r3, #10
 800294a:	4943      	ldr	r1, [pc, #268]	@ (8002a58 <goLeft+0x168>)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	3305      	adds	r3, #5
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	440b      	add	r3, r1
 8002954:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y = snakeObject.infoSnake[i].y;
 8002956:	4a40      	ldr	r2, [pc, #256]	@ (8002a58 <goLeft+0x168>)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	3305      	adds	r3, #5
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4413      	add	r3, r2
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	493d      	ldr	r1, [pc, #244]	@ (8002a58 <goLeft+0x168>)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	3305      	adds	r3, #5
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	440b      	add	r3, r1
 800296c:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 800296e:	f7ff fe9b 	bl	80026a8 <drawHeadSnake>
 8002972:	e062      	b.n	8002a3a <goLeft+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8002974:	4a38      	ldr	r2, [pc, #224]	@ (8002a58 <goLeft+0x168>)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	3305      	adds	r3, #5
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	1d3a      	adds	r2, r7, #4
 8002980:	3304      	adds	r3, #4
 8002982:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002986:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 800298a:	4a33      	ldr	r2, [pc, #204]	@ (8002a58 <goLeft+0x168>)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	3305      	adds	r3, #5
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	3304      	adds	r3, #4
 8002996:	f107 020c 	add.w	r2, r7, #12
 800299a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800299e:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 80029a2:	f107 030c 	add.w	r3, r7, #12
 80029a6:	1d3a      	adds	r2, r7, #4
 80029a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029ac:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d123      	bne.n	80029fe <goLeft+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80029b6:	4a28      	ldr	r2, [pc, #160]	@ (8002a58 <goLeft+0x168>)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	3305      	adds	r3, #5
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	b298      	uxth	r0, r3
 80029c4:	4a24      	ldr	r2, [pc, #144]	@ (8002a58 <goLeft+0x168>)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	3305      	adds	r3, #5
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80029d2:	4a21      	ldr	r2, [pc, #132]	@ (8002a58 <goLeft+0x168>)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	3305      	adds	r3, #5
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4413      	add	r3, r2
 80029dc:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3309      	adds	r3, #9
 80029e2:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80029e4:	4c1c      	ldr	r4, [pc, #112]	@ (8002a58 <goLeft+0x168>)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	3305      	adds	r3, #5
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4423      	add	r3, r4
 80029ee:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3309      	adds	r3, #9
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2400      	movs	r4, #0
 80029f8:	9400      	str	r4, [sp, #0]
 80029fa:	f7fe ff35 	bl	8001868 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 80029fe:	4b16      	ldr	r3, [pc, #88]	@ (8002a58 <goLeft+0x168>)
 8002a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a02:	3b01      	subs	r3, #1
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d117      	bne.n	8002a3a <goLeft+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8002a0a:	4b13      	ldr	r3, [pc, #76]	@ (8002a58 <goLeft+0x168>)
 8002a0c:	331c      	adds	r3, #28
 8002a0e:	1d3a      	adds	r2, r7, #4
 8002a10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a14:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	b298      	uxth	r0, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	b299      	uxth	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3309      	adds	r3, #9
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3309      	adds	r3, #9
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8002a34:	9400      	str	r4, [sp, #0]
 8002a36:	f7fe ff17 	bl	8001868 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <goLeft+0x168>)
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	f6ff af68 	blt.w	800291c <goLeft+0x2c>
					}
				}
			}
			break;
 8002a4c:	bf00      	nop
		}
	}
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd90      	pop	{r4, r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000258 	.word	0x20000258

08002a5c <goRight>:

void goRight()
{
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b089      	sub	sp, #36	@ 0x24
 8002a60:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 8002a62:	4b58      	ldr	r3, [pc, #352]	@ (8002bc4 <goRight+0x168>)
 8002a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 80a7 	bne.w	8002bba <goRight+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8002a6c:	4b55      	ldr	r3, [pc, #340]	@ (8002bc4 <goRight+0x168>)
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d103      	bne.n	8002a7c <goRight+0x20>
		{
		case LEFT:
			(*snakeObject.GOLEFT)();
 8002a74:	4b53      	ldr	r3, [pc, #332]	@ (8002bc4 <goRight+0x168>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4798      	blx	r3
			break;
 8002a7a:	e09e      	b.n	8002bba <goRight+0x15e>
		default:
			snakeObject.snakeDirectionHead = RIGHT;
 8002a7c:	4b51      	ldr	r3, [pc, #324]	@ (8002bc4 <goRight+0x168>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	e091      	b.n	8002bac <goRight+0x150>
			{
				if (i == 0)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d128      	bne.n	8002ae0 <goRight+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 8002a8e:	4a4d      	ldr	r2, [pc, #308]	@ (8002bc4 <goRight+0x168>)
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	3305      	adds	r3, #5
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4413      	add	r3, r2
 8002a98:	f107 020c 	add.w	r2, r7, #12
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002aa2:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x += snakeStep;
 8002aa6:	4a47      	ldr	r2, [pc, #284]	@ (8002bc4 <goRight+0x168>)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	3305      	adds	r3, #5
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f103 020a 	add.w	r2, r3, #10
 8002ab6:	4943      	ldr	r1, [pc, #268]	@ (8002bc4 <goRight+0x168>)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3305      	adds	r3, #5
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	440b      	add	r3, r1
 8002ac0:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y = snakeObject.infoSnake[i].y;
 8002ac2:	4a40      	ldr	r2, [pc, #256]	@ (8002bc4 <goRight+0x168>)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	3305      	adds	r3, #5
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4413      	add	r3, r2
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	493d      	ldr	r1, [pc, #244]	@ (8002bc4 <goRight+0x168>)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	3305      	adds	r3, #5
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 8002ada:	f7ff fde5 	bl	80026a8 <drawHeadSnake>
 8002ade:	e062      	b.n	8002ba6 <goRight+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8002ae0:	4a38      	ldr	r2, [pc, #224]	@ (8002bc4 <goRight+0x168>)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	3305      	adds	r3, #5
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	1d3a      	adds	r2, r7, #4
 8002aec:	3304      	adds	r3, #4
 8002aee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002af2:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 8002af6:	4a33      	ldr	r2, [pc, #204]	@ (8002bc4 <goRight+0x168>)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	3305      	adds	r3, #5
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4413      	add	r3, r2
 8002b00:	3304      	adds	r3, #4
 8002b02:	f107 020c 	add.w	r2, r7, #12
 8002b06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b0a:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 8002b0e:	f107 030c 	add.w	r3, r7, #12
 8002b12:	1d3a      	adds	r2, r7, #4
 8002b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b18:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d123      	bne.n	8002b6a <goRight+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002b22:	4a28      	ldr	r2, [pc, #160]	@ (8002bc4 <goRight+0x168>)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	3305      	adds	r3, #5
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	b298      	uxth	r0, r3
 8002b30:	4a24      	ldr	r2, [pc, #144]	@ (8002bc4 <goRight+0x168>)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3305      	adds	r3, #5
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8002b3e:	4a21      	ldr	r2, [pc, #132]	@ (8002bc4 <goRight+0x168>)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3305      	adds	r3, #5
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3309      	adds	r3, #9
 8002b4e:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8002b50:	4c1c      	ldr	r4, [pc, #112]	@ (8002bc4 <goRight+0x168>)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	3305      	adds	r3, #5
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4423      	add	r3, r4
 8002b5a:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3309      	adds	r3, #9
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2400      	movs	r4, #0
 8002b64:	9400      	str	r4, [sp, #0]
 8002b66:	f7fe fe7f 	bl	8001868 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 8002b6a:	4b16      	ldr	r3, [pc, #88]	@ (8002bc4 <goRight+0x168>)
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d117      	bne.n	8002ba6 <goRight+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8002b76:	4b13      	ldr	r3, [pc, #76]	@ (8002bc4 <goRight+0x168>)
 8002b78:	331c      	adds	r3, #28
 8002b7a:	1d3a      	adds	r2, r7, #4
 8002b7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b80:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	b298      	uxth	r0, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	b299      	uxth	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	3309      	adds	r3, #9
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3309      	adds	r3, #9
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8002ba0:	9400      	str	r4, [sp, #0]
 8002ba2:	f7fe fe61 	bl	8001868 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	4b05      	ldr	r3, [pc, #20]	@ (8002bc4 <goRight+0x168>)
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	f6ff af68 	blt.w	8002a88 <goRight+0x2c>
					}
				}
			}
			break;
 8002bb8:	bf00      	nop
		}
	}
}
 8002bba:	bf00      	nop
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd90      	pop	{r4, r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000258 	.word	0x20000258

08002bc8 <goUp>:

void goUp()
{
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b089      	sub	sp, #36	@ 0x24
 8002bcc:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 8002bce:	4b58      	ldr	r3, [pc, #352]	@ (8002d30 <goUp+0x168>)
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f040 80a7 	bne.w	8002d26 <goUp+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8002bd8:	4b55      	ldr	r3, [pc, #340]	@ (8002d30 <goUp+0x168>)
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d103      	bne.n	8002be8 <goUp+0x20>
		{
		case DOWN:
			(*snakeObject.GODOWN)();
 8002be0:	4b53      	ldr	r3, [pc, #332]	@ (8002d30 <goUp+0x168>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4798      	blx	r3
			break;
 8002be6:	e09e      	b.n	8002d26 <goUp+0x15e>
		default:
			snakeObject.snakeDirectionHead = UP;
 8002be8:	4b51      	ldr	r3, [pc, #324]	@ (8002d30 <goUp+0x168>)
 8002bea:	2203      	movs	r2, #3
 8002bec:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	e091      	b.n	8002d18 <goUp+0x150>
			{
				if (i == 0)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d128      	bne.n	8002c4c <goUp+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 8002bfa:	4a4d      	ldr	r2, [pc, #308]	@ (8002d30 <goUp+0x168>)
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	3305      	adds	r3, #5
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4413      	add	r3, r2
 8002c04:	f107 020c 	add.w	r2, r7, #12
 8002c08:	3304      	adds	r3, #4
 8002c0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c0e:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 8002c12:	4a47      	ldr	r2, [pc, #284]	@ (8002d30 <goUp+0x168>)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3305      	adds	r3, #5
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	4944      	ldr	r1, [pc, #272]	@ (8002d30 <goUp+0x168>)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	3305      	adds	r3, #5
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	440b      	add	r3, r1
 8002c28:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y -= snakeStep;
 8002c2a:	4a41      	ldr	r2, [pc, #260]	@ (8002d30 <goUp+0x168>)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	3305      	adds	r3, #5
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4413      	add	r3, r2
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f1a3 020a 	sub.w	r2, r3, #10
 8002c3a:	493d      	ldr	r1, [pc, #244]	@ (8002d30 <goUp+0x168>)
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	3305      	adds	r3, #5
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	440b      	add	r3, r1
 8002c44:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 8002c46:	f7ff fd2f 	bl	80026a8 <drawHeadSnake>
 8002c4a:	e062      	b.n	8002d12 <goUp+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8002c4c:	4a38      	ldr	r2, [pc, #224]	@ (8002d30 <goUp+0x168>)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	3305      	adds	r3, #5
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	1d3a      	adds	r2, r7, #4
 8002c58:	3304      	adds	r3, #4
 8002c5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c5e:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 8002c62:	4a33      	ldr	r2, [pc, #204]	@ (8002d30 <goUp+0x168>)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	3305      	adds	r3, #5
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	f107 020c 	add.w	r2, r7, #12
 8002c72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c76:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 8002c7a:	f107 030c 	add.w	r3, r7, #12
 8002c7e:	1d3a      	adds	r2, r7, #4
 8002c80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c84:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d123      	bne.n	8002cd6 <goUp+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002c8e:	4a28      	ldr	r2, [pc, #160]	@ (8002d30 <goUp+0x168>)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	3305      	adds	r3, #5
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4413      	add	r3, r2
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	b298      	uxth	r0, r3
 8002c9c:	4a24      	ldr	r2, [pc, #144]	@ (8002d30 <goUp+0x168>)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	3305      	adds	r3, #5
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8002caa:	4a21      	ldr	r2, [pc, #132]	@ (8002d30 <goUp+0x168>)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	3305      	adds	r3, #5
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3309      	adds	r3, #9
 8002cba:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8002cbc:	4c1c      	ldr	r4, [pc, #112]	@ (8002d30 <goUp+0x168>)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	3305      	adds	r3, #5
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4423      	add	r3, r4
 8002cc6:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3309      	adds	r3, #9
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2400      	movs	r4, #0
 8002cd0:	9400      	str	r4, [sp, #0]
 8002cd2:	f7fe fdc9 	bl	8001868 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 8002cd6:	4b16      	ldr	r3, [pc, #88]	@ (8002d30 <goUp+0x168>)
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d117      	bne.n	8002d12 <goUp+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8002ce2:	4b13      	ldr	r3, [pc, #76]	@ (8002d30 <goUp+0x168>)
 8002ce4:	331c      	adds	r3, #28
 8002ce6:	1d3a      	adds	r2, r7, #4
 8002ce8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cec:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	b298      	uxth	r0, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	b299      	uxth	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3309      	adds	r3, #9
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3309      	adds	r3, #9
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8002d0c:	9400      	str	r4, [sp, #0]
 8002d0e:	f7fe fdab 	bl	8001868 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3301      	adds	r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <goUp+0x168>)
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	f6ff af68 	blt.w	8002bf4 <goUp+0x2c>
					}
				}
			}
			break;
 8002d24:	bf00      	nop
		}
	}
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd90      	pop	{r4, r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000258 	.word	0x20000258

08002d34 <goDown>:

void goDown()
{
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b089      	sub	sp, #36	@ 0x24
 8002d38:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 8002d3a:	4b58      	ldr	r3, [pc, #352]	@ (8002e9c <goDown+0x168>)
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f040 80a7 	bne.w	8002e92 <goDown+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8002d44:	4b55      	ldr	r3, [pc, #340]	@ (8002e9c <goDown+0x168>)
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d103      	bne.n	8002d54 <goDown+0x20>
		{
		case UP:
			(*snakeObject.GOUP)();
 8002d4c:	4b53      	ldr	r3, [pc, #332]	@ (8002e9c <goDown+0x168>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4798      	blx	r3
			break;
 8002d52:	e09e      	b.n	8002e92 <goDown+0x15e>
		default:
			snakeObject.snakeDirectionHead = DOWN;
 8002d54:	4b51      	ldr	r3, [pc, #324]	@ (8002e9c <goDown+0x168>)
 8002d56:	2202      	movs	r2, #2
 8002d58:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	e091      	b.n	8002e84 <goDown+0x150>
			{
				if (i == 0)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d128      	bne.n	8002db8 <goDown+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 8002d66:	4a4d      	ldr	r2, [pc, #308]	@ (8002e9c <goDown+0x168>)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	3305      	adds	r3, #5
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4413      	add	r3, r2
 8002d70:	f107 020c 	add.w	r2, r7, #12
 8002d74:	3304      	adds	r3, #4
 8002d76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d7a:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 8002d7e:	4a47      	ldr	r2, [pc, #284]	@ (8002e9c <goDown+0x168>)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	3305      	adds	r3, #5
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4413      	add	r3, r2
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	4944      	ldr	r1, [pc, #272]	@ (8002e9c <goDown+0x168>)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	3305      	adds	r3, #5
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	440b      	add	r3, r1
 8002d94:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y += snakeStep;
 8002d96:	4a41      	ldr	r2, [pc, #260]	@ (8002e9c <goDown+0x168>)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	3305      	adds	r3, #5
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4413      	add	r3, r2
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f103 020a 	add.w	r2, r3, #10
 8002da6:	493d      	ldr	r1, [pc, #244]	@ (8002e9c <goDown+0x168>)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	3305      	adds	r3, #5
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	440b      	add	r3, r1
 8002db0:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 8002db2:	f7ff fc79 	bl	80026a8 <drawHeadSnake>
 8002db6:	e062      	b.n	8002e7e <goDown+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8002db8:	4a38      	ldr	r2, [pc, #224]	@ (8002e9c <goDown+0x168>)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	3305      	adds	r3, #5
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	1d3a      	adds	r2, r7, #4
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002dca:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 8002dce:	4a33      	ldr	r2, [pc, #204]	@ (8002e9c <goDown+0x168>)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	3305      	adds	r3, #5
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3304      	adds	r3, #4
 8002dda:	f107 020c 	add.w	r2, r7, #12
 8002dde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002de2:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 8002de6:	f107 030c 	add.w	r3, r7, #12
 8002dea:	1d3a      	adds	r2, r7, #4
 8002dec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002df0:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d123      	bne.n	8002e42 <goDown+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002dfa:	4a28      	ldr	r2, [pc, #160]	@ (8002e9c <goDown+0x168>)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	3305      	adds	r3, #5
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4413      	add	r3, r2
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	b298      	uxth	r0, r3
 8002e08:	4a24      	ldr	r2, [pc, #144]	@ (8002e9c <goDown+0x168>)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	3305      	adds	r3, #5
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8002e16:	4a21      	ldr	r2, [pc, #132]	@ (8002e9c <goDown+0x168>)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	3305      	adds	r3, #5
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4413      	add	r3, r2
 8002e20:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3309      	adds	r3, #9
 8002e26:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8002e28:	4c1c      	ldr	r4, [pc, #112]	@ (8002e9c <goDown+0x168>)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	3305      	adds	r3, #5
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4423      	add	r3, r4
 8002e32:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3309      	adds	r3, #9
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2400      	movs	r4, #0
 8002e3c:	9400      	str	r4, [sp, #0]
 8002e3e:	f7fe fd13 	bl	8001868 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 8002e42:	4b16      	ldr	r3, [pc, #88]	@ (8002e9c <goDown+0x168>)
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	3b01      	subs	r3, #1
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d117      	bne.n	8002e7e <goDown+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8002e4e:	4b13      	ldr	r3, [pc, #76]	@ (8002e9c <goDown+0x168>)
 8002e50:	331c      	adds	r3, #28
 8002e52:	1d3a      	adds	r2, r7, #4
 8002e54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e58:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	b298      	uxth	r0, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	b299      	uxth	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3309      	adds	r3, #9
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3309      	adds	r3, #9
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8002e78:	9400      	str	r4, [sp, #0]
 8002e7a:	f7fe fcf5 	bl	8001868 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	3301      	adds	r3, #1
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	4b05      	ldr	r3, [pc, #20]	@ (8002e9c <goDown+0x168>)
 8002e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	f6ff af68 	blt.w	8002d60 <goDown+0x2c>
					}
				}
			}
			break;
 8002e90:	bf00      	nop
		}
	}
}
 8002e92:	bf00      	nop
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd90      	pop	{r4, r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000258 	.word	0x20000258

08002ea0 <checkOutOfValidRange>:
int checkOutOfValidRange()
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
	if ((snakeObject.infoSnake[0].x < 0) || (snakeObject.infoSnake[0].x > 230) || (snakeObject.infoSnake[0].y < 0) || (snakeObject.infoSnake[0].y > 312))
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <checkOutOfValidRange+0x38>)
 8002ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	db0c      	blt.n	8002ec6 <checkOutOfValidRange+0x26>
 8002eac:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <checkOutOfValidRange+0x38>)
 8002eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb0:	2be6      	cmp	r3, #230	@ 0xe6
 8002eb2:	dc08      	bgt.n	8002ec6 <checkOutOfValidRange+0x26>
 8002eb4:	4b08      	ldr	r3, [pc, #32]	@ (8002ed8 <checkOutOfValidRange+0x38>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	db04      	blt.n	8002ec6 <checkOutOfValidRange+0x26>
 8002ebc:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <checkOutOfValidRange+0x38>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec0:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002ec4:	dd01      	ble.n	8002eca <checkOutOfValidRange+0x2a>
		return 1;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <checkOutOfValidRange+0x2c>
	return 0;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	20000258 	.word	0x20000258

08002edc <checkEatBody>:

int checkEatBody()
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
	for (int i = 1; i < snakeObject.snakeLength; i++)
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	607b      	str	r3, [r7, #4]
 8002ee6:	e018      	b.n	8002f1a <checkEatBody+0x3e>
		if (snakeObject.infoSnake[0].x == snakeObject.infoSnake[i].x && snakeObject.infoSnake[0].y == snakeObject.infoSnake[i].y)
 8002ee8:	4b12      	ldr	r3, [pc, #72]	@ (8002f34 <checkEatBody+0x58>)
 8002eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eec:	4911      	ldr	r1, [pc, #68]	@ (8002f34 <checkEatBody+0x58>)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3305      	adds	r3, #5
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	440b      	add	r3, r1
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d10b      	bne.n	8002f14 <checkEatBody+0x38>
 8002efc:	4b0d      	ldr	r3, [pc, #52]	@ (8002f34 <checkEatBody+0x58>)
 8002efe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f00:	490c      	ldr	r1, [pc, #48]	@ (8002f34 <checkEatBody+0x58>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3305      	adds	r3, #5
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	440b      	add	r3, r1
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d101      	bne.n	8002f14 <checkEatBody+0x38>
			return 1;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e008      	b.n	8002f26 <checkEatBody+0x4a>
	for (int i = 1; i < snakeObject.snakeLength; i++)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3301      	adds	r3, #1
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	4b06      	ldr	r3, [pc, #24]	@ (8002f34 <checkEatBody+0x58>)
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	dbe1      	blt.n	8002ee8 <checkEatBody+0xc>
	return 0;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000258 	.word	0x20000258

08002f38 <checkEatFruit>:

int checkEatFruit()
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
	if (snakeObject.infoSnake[0].x == xFruit && snakeObject.infoSnake[0].y == yFruit)
 8002f3c:	4b09      	ldr	r3, [pc, #36]	@ (8002f64 <checkEatFruit+0x2c>)
 8002f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f40:	4b09      	ldr	r3, [pc, #36]	@ (8002f68 <checkEatFruit+0x30>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d107      	bne.n	8002f58 <checkEatFruit+0x20>
 8002f48:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <checkEatFruit+0x2c>)
 8002f4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f4c:	4b07      	ldr	r3, [pc, #28]	@ (8002f6c <checkEatFruit+0x34>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d101      	bne.n	8002f58 <checkEatFruit+0x20>
		return 1;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <checkEatFruit+0x22>
	return 0;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	20000258 	.word	0x20000258
 8002f68:	20000008 	.word	0x20000008
 8002f6c:	2000000c 	.word	0x2000000c

08002f70 <checkHead>:


void checkHead()
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af02      	add	r7, sp, #8
	if (checkOutOfValidRange())
 8002f76:	f7ff ff93 	bl	8002ea0 <checkOutOfValidRange>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <checkHead+0x18>
	{
		gameover = 1;
 8002f80:	4b2d      	ldr	r3, [pc, #180]	@ (8003038 <checkHead+0xc8>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	801a      	strh	r2, [r3, #0]
		return;
 8002f86:	e054      	b.n	8003032 <checkHead+0xc2>
	}
	if (checkEatBody())
 8002f88:	f7ff ffa8 	bl	8002edc <checkEatBody>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <checkHead+0x2a>
	{
		gameover = 1;
 8002f92:	4b29      	ldr	r3, [pc, #164]	@ (8003038 <checkHead+0xc8>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	801a      	strh	r2, [r3, #0]
		return;
 8002f98:	e04b      	b.n	8003032 <checkHead+0xc2>
	}
	if (checkEatFruit())
 8002f9a:	f7ff ffcd 	bl	8002f38 <checkEatFruit>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d046      	beq.n	8003032 <checkHead+0xc2>
	{
		xFruit = INT_MIN;
 8002fa4:	4b25      	ldr	r3, [pc, #148]	@ (800303c <checkHead+0xcc>)
 8002fa6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002faa:	601a      	str	r2, [r3, #0]
		yFruit = INT_MIN;
 8002fac:	4b24      	ldr	r3, [pc, #144]	@ (8003040 <checkHead+0xd0>)
 8002fae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002fb2:	601a      	str	r2, [r3, #0]
		snakeObject.snakeLength += 1;
 8002fb4:	4b23      	ldr	r3, [pc, #140]	@ (8003044 <checkHead+0xd4>)
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	3301      	adds	r3, #1
 8002fba:	4a22      	ldr	r2, [pc, #136]	@ (8003044 <checkHead+0xd4>)
 8002fbc:	6253      	str	r3, [r2, #36]	@ 0x24
		snakeObject.infoSnake[snakeObject.snakeLength - 1].x = snakeObject.infoTempSnakeTail.x;
 8002fbe:	4b21      	ldr	r3, [pc, #132]	@ (8003044 <checkHead+0xd4>)
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8003044 <checkHead+0xd4>)
 8002fc6:	69d2      	ldr	r2, [r2, #28]
 8002fc8:	491e      	ldr	r1, [pc, #120]	@ (8003044 <checkHead+0xd4>)
 8002fca:	3305      	adds	r3, #5
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	440b      	add	r3, r1
 8002fd0:	605a      	str	r2, [r3, #4]
		snakeObject.infoSnake[snakeObject.snakeLength - 1].y = snakeObject.infoTempSnakeTail.y;
 8002fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8003044 <checkHead+0xd4>)
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8003044 <checkHead+0xd4>)
 8002fda:	6a12      	ldr	r2, [r2, #32]
 8002fdc:	4919      	ldr	r1, [pc, #100]	@ (8003044 <checkHead+0xd4>)
 8002fde:	3305      	adds	r3, #5
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	440b      	add	r3, r1
 8002fe4:	609a      	str	r2, [r3, #8]
		int x = snakeObject.infoSnake[snakeObject.snakeLength - 1].x;
 8002fe6:	4b17      	ldr	r3, [pc, #92]	@ (8003044 <checkHead+0xd4>)
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	3b01      	subs	r3, #1
 8002fec:	4a15      	ldr	r2, [pc, #84]	@ (8003044 <checkHead+0xd4>)
 8002fee:	3305      	adds	r3, #5
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	607b      	str	r3, [r7, #4]
		int y = snakeObject.infoSnake[snakeObject.snakeLength - 1].y;
 8002ff8:	4b12      	ldr	r3, [pc, #72]	@ (8003044 <checkHead+0xd4>)
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	4a11      	ldr	r2, [pc, #68]	@ (8003044 <checkHead+0xd4>)
 8003000:	3305      	adds	r3, #5
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	603b      	str	r3, [r7, #0]
		lcd_Fill(x, y, x + snakeWidth, y + snakeWidth, BLACK);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	b298      	uxth	r0, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	b299      	uxth	r1, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	b29b      	uxth	r3, r3
 8003016:	3309      	adds	r3, #9
 8003018:	b29a      	uxth	r2, r3
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	3309      	adds	r3, #9
 8003020:	b29b      	uxth	r3, r3
 8003022:	2400      	movs	r4, #0
 8003024:	9400      	str	r4, [sp, #0]
 8003026:	f7fe fc1f 	bl	8001868 <lcd_Fill>
		flagEat = 1;
 800302a:	4b07      	ldr	r3, [pc, #28]	@ (8003048 <checkHead+0xd8>)
 800302c:	2201      	movs	r2, #1
 800302e:	601a      	str	r2, [r3, #0]
		return;
 8003030:	bf00      	nop
	}
}
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	bd90      	pop	{r4, r7, pc}
 8003038:	20000254 	.word	0x20000254
 800303c:	20000008 	.word	0x20000008
 8003040:	2000000c 	.word	0x2000000c
 8003044:	20000258 	.word	0x20000258
 8003048:	20000010 	.word	0x20000010

0800304c <move>:

void move()
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
	switch (snakeObject.snakeDirectionHead)
 8003050:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <move+0x4c>)
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d81b      	bhi.n	8003090 <move+0x44>
 8003058:	a201      	add	r2, pc, #4	@ (adr r2, 8003060 <move+0x14>)
 800305a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305e:	bf00      	nop
 8003060:	08003081 	.word	0x08003081
 8003064:	08003089 	.word	0x08003089
 8003068:	08003071 	.word	0x08003071
 800306c:	08003079 	.word	0x08003079
	{
	case DOWN:
		(*snakeObject.GODOWN)();
 8003070:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <move+0x4c>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4798      	blx	r3
		break;
 8003076:	e00c      	b.n	8003092 <move+0x46>
	case UP:
		(*snakeObject.GOUP)();
 8003078:	4b07      	ldr	r3, [pc, #28]	@ (8003098 <move+0x4c>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	4798      	blx	r3
		break;
 800307e:	e008      	b.n	8003092 <move+0x46>
	case RIGHT:
		(*snakeObject.GORIGHT)();
 8003080:	4b05      	ldr	r3, [pc, #20]	@ (8003098 <move+0x4c>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4798      	blx	r3
		break;
 8003086:	e004      	b.n	8003092 <move+0x46>
	case LEFT:
		(*snakeObject.GOLEFT)();
 8003088:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <move+0x4c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4798      	blx	r3
		break;
 800308e:	e000      	b.n	8003092 <move+0x46>
	default:
		break;
 8003090:	bf00      	nop
	}
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000258 	.word	0x20000258

0800309c <snakeRun>:

void snakeRun()
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
	if (buttonForSnake[0])
 80030a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003120 <snakeRun+0x84>)
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d009      	beq.n	80030bc <snakeRun+0x20>
	{
		buttonForSnake[0]= 0;
 80030a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003120 <snakeRun+0x84>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	801a      	strh	r2, [r3, #0]
		(*snakeObject.GOUP)();
 80030ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003124 <snakeRun+0x88>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	4798      	blx	r3
		(*snakeObject.CHECKHEAD)();
 80030b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003124 <snakeRun+0x88>)
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	4798      	blx	r3
	else
	{
		(*snakeObject.MOVE)();
		(*snakeObject.CHECKHEAD)();
	}
}
 80030ba:	e02f      	b.n	800311c <snakeRun+0x80>
	else if (buttonForSnake[1])
 80030bc:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <snakeRun+0x84>)
 80030be:	885b      	ldrh	r3, [r3, #2]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d009      	beq.n	80030d8 <snakeRun+0x3c>
		buttonForSnake[1]= 0;
 80030c4:	4b16      	ldr	r3, [pc, #88]	@ (8003120 <snakeRun+0x84>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	805a      	strh	r2, [r3, #2]
		(*snakeObject.GOLEFT)();
 80030ca:	4b16      	ldr	r3, [pc, #88]	@ (8003124 <snakeRun+0x88>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4798      	blx	r3
		(*snakeObject.CHECKHEAD)();
 80030d0:	4b14      	ldr	r3, [pc, #80]	@ (8003124 <snakeRun+0x88>)
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	4798      	blx	r3
}
 80030d6:	e021      	b.n	800311c <snakeRun+0x80>
	else if (buttonForSnake[3])
 80030d8:	4b11      	ldr	r3, [pc, #68]	@ (8003120 <snakeRun+0x84>)
 80030da:	88db      	ldrh	r3, [r3, #6]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d009      	beq.n	80030f4 <snakeRun+0x58>
		buttonForSnake[3]= 0;
 80030e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003120 <snakeRun+0x84>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	80da      	strh	r2, [r3, #6]
		(*snakeObject.GORIGHT)();
 80030e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003124 <snakeRun+0x88>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4798      	blx	r3
		(*snakeObject.CHECKHEAD)();
 80030ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003124 <snakeRun+0x88>)
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	4798      	blx	r3
}
 80030f2:	e013      	b.n	800311c <snakeRun+0x80>
	else if (buttonForSnake[5])
 80030f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003120 <snakeRun+0x84>)
 80030f6:	895b      	ldrh	r3, [r3, #10]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d009      	beq.n	8003110 <snakeRun+0x74>
		buttonForSnake[5]= 0;
 80030fc:	4b08      	ldr	r3, [pc, #32]	@ (8003120 <snakeRun+0x84>)
 80030fe:	2200      	movs	r2, #0
 8003100:	815a      	strh	r2, [r3, #10]
		(*snakeObject.GODOWN)();
 8003102:	4b08      	ldr	r3, [pc, #32]	@ (8003124 <snakeRun+0x88>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	4798      	blx	r3
		(*snakeObject.CHECKHEAD)();
 8003108:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <snakeRun+0x88>)
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	4798      	blx	r3
}
 800310e:	e005      	b.n	800311c <snakeRun+0x80>
		(*snakeObject.MOVE)();
 8003110:	4b04      	ldr	r3, [pc, #16]	@ (8003124 <snakeRun+0x88>)
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	4798      	blx	r3
		(*snakeObject.CHECKHEAD)();
 8003116:	4b03      	ldr	r3, [pc, #12]	@ (8003124 <snakeRun+0x88>)
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	4798      	blx	r3
}
 800311c:	bf00      	nop
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000248 	.word	0x20000248
 8003124:	20000258 	.word	0x20000258

08003128 <snakeInit>:


void snakeInit()
{
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b085      	sub	sp, #20
 800312c:	af02      	add	r7, sp, #8
	srand(rst);
 800312e:	4b45      	ldr	r3, [pc, #276]	@ (8003244 <snakeInit+0x11c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f005 fc64 	bl	8008a00 <srand>
	rst++;
 8003138:	4b42      	ldr	r3, [pc, #264]	@ (8003244 <snakeInit+0x11c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3301      	adds	r3, #1
 800313e:	4a41      	ldr	r2, [pc, #260]	@ (8003244 <snakeInit+0x11c>)
 8003140:	6013      	str	r3, [r2, #0]
	flagEat = 1;
 8003142:	4b41      	ldr	r3, [pc, #260]	@ (8003248 <snakeInit+0x120>)
 8003144:	2201      	movs	r2, #1
 8003146:	601a      	str	r2, [r3, #0]
	snakeObject.stopSnakeFlag = 0;
 8003148:	4b40      	ldr	r3, [pc, #256]	@ (800324c <snakeInit+0x124>)
 800314a:	2200      	movs	r2, #0
 800314c:	629a      	str	r2, [r3, #40]	@ 0x28
	snakeObject.infoSnake[0].x = 20;
 800314e:	4b3f      	ldr	r3, [pc, #252]	@ (800324c <snakeInit+0x124>)
 8003150:	2214      	movs	r2, #20
 8003152:	62da      	str	r2, [r3, #44]	@ 0x2c
	snakeObject.infoSnake[0].y = rangeValidYLower;
 8003154:	4b3d      	ldr	r3, [pc, #244]	@ (800324c <snakeInit+0x124>)
 8003156:	2200      	movs	r2, #0
 8003158:	631a      	str	r2, [r3, #48]	@ 0x30
	snakeObject.infoSnake[1].x = 10;
 800315a:	4b3c      	ldr	r3, [pc, #240]	@ (800324c <snakeInit+0x124>)
 800315c:	220a      	movs	r2, #10
 800315e:	635a      	str	r2, [r3, #52]	@ 0x34
	snakeObject.infoSnake[1].y = rangeValidYLower;
 8003160:	4b3a      	ldr	r3, [pc, #232]	@ (800324c <snakeInit+0x124>)
 8003162:	2200      	movs	r2, #0
 8003164:	639a      	str	r2, [r3, #56]	@ 0x38
	snakeObject.infoSnake[2].x = 0;
 8003166:	4b39      	ldr	r3, [pc, #228]	@ (800324c <snakeInit+0x124>)
 8003168:	2200      	movs	r2, #0
 800316a:	63da      	str	r2, [r3, #60]	@ 0x3c
	snakeObject.infoSnake[2].y = rangeValidYLower;
 800316c:	4b37      	ldr	r3, [pc, #220]	@ (800324c <snakeInit+0x124>)
 800316e:	2200      	movs	r2, #0
 8003170:	641a      	str	r2, [r3, #64]	@ 0x40
	for (int i = 3; i < MAX_LENGTH; i++)
 8003172:	2303      	movs	r3, #3
 8003174:	607b      	str	r3, [r7, #4]
 8003176:	e010      	b.n	800319a <snakeInit+0x72>
	{
		snakeObject.infoSnake[i].x = 0;
 8003178:	4a34      	ldr	r2, [pc, #208]	@ (800324c <snakeInit+0x124>)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3305      	adds	r3, #5
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	2200      	movs	r2, #0
 8003184:	605a      	str	r2, [r3, #4]
		snakeObject.infoSnake[i].y = 0;
 8003186:	4a31      	ldr	r2, [pc, #196]	@ (800324c <snakeInit+0x124>)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3305      	adds	r3, #5
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
	for (int i = 3; i < MAX_LENGTH; i++)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3301      	adds	r3, #1
 8003198:	607b      	str	r3, [r7, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80031a0:	dbea      	blt.n	8003178 <snakeInit+0x50>
	}
	snakeObject.GODOWN = goDown;
 80031a2:	4b2a      	ldr	r3, [pc, #168]	@ (800324c <snakeInit+0x124>)
 80031a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003250 <snakeInit+0x128>)
 80031a6:	60da      	str	r2, [r3, #12]
	snakeObject.GOLEFT = goLeft;
 80031a8:	4b28      	ldr	r3, [pc, #160]	@ (800324c <snakeInit+0x124>)
 80031aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003254 <snakeInit+0x12c>)
 80031ac:	601a      	str	r2, [r3, #0]
	snakeObject.GOUP = goUp;
 80031ae:	4b27      	ldr	r3, [pc, #156]	@ (800324c <snakeInit+0x124>)
 80031b0:	4a29      	ldr	r2, [pc, #164]	@ (8003258 <snakeInit+0x130>)
 80031b2:	609a      	str	r2, [r3, #8]
	snakeObject.GORIGHT = goRight;
 80031b4:	4b25      	ldr	r3, [pc, #148]	@ (800324c <snakeInit+0x124>)
 80031b6:	4a29      	ldr	r2, [pc, #164]	@ (800325c <snakeInit+0x134>)
 80031b8:	605a      	str	r2, [r3, #4]
	snakeObject.MOVE = move;
 80031ba:	4b24      	ldr	r3, [pc, #144]	@ (800324c <snakeInit+0x124>)
 80031bc:	4a28      	ldr	r2, [pc, #160]	@ (8003260 <snakeInit+0x138>)
 80031be:	611a      	str	r2, [r3, #16]
	snakeObject.CHECKHEAD = checkHead;
 80031c0:	4b22      	ldr	r3, [pc, #136]	@ (800324c <snakeInit+0x124>)
 80031c2:	4a28      	ldr	r2, [pc, #160]	@ (8003264 <snakeInit+0x13c>)
 80031c4:	615a      	str	r2, [r3, #20]
	snakeObject.snakeLength = 3;
 80031c6:	4b21      	ldr	r3, [pc, #132]	@ (800324c <snakeInit+0x124>)
 80031c8:	2203      	movs	r2, #3
 80031ca:	625a      	str	r2, [r3, #36]	@ 0x24
	snakeObject.snakeDirectionHead = RIGHT;
 80031cc:	4b1f      	ldr	r3, [pc, #124]	@ (800324c <snakeInit+0x124>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	619a      	str	r2, [r3, #24]
	for (int i = 0; i < 3; i++)
 80031d2:	2300      	movs	r3, #0
 80031d4:	603b      	str	r3, [r7, #0]
 80031d6:	e02c      	b.n	8003232 <snakeInit+0x10a>
	{
		if (i == 0)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d102      	bne.n	80031e4 <snakeInit+0xbc>
			drawHeadSnake();
 80031de:	f7ff fa63 	bl	80026a8 <drawHeadSnake>
 80031e2:	e023      	b.n	800322c <snakeInit+0x104>
		else
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80031e4:	4a19      	ldr	r2, [pc, #100]	@ (800324c <snakeInit+0x124>)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	3305      	adds	r3, #5
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	b298      	uxth	r0, r3
 80031f2:	4a16      	ldr	r2, [pc, #88]	@ (800324c <snakeInit+0x124>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	3305      	adds	r3, #5
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4413      	add	r3, r2
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	b299      	uxth	r1, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003200:	4a12      	ldr	r2, [pc, #72]	@ (800324c <snakeInit+0x124>)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	3305      	adds	r3, #5
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800320c:	b29b      	uxth	r3, r3
 800320e:	3309      	adds	r3, #9
 8003210:	b29a      	uxth	r2, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003212:	4c0e      	ldr	r4, [pc, #56]	@ (800324c <snakeInit+0x124>)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	3305      	adds	r3, #5
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	4423      	add	r3, r4
 800321c:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800321e:	b29b      	uxth	r3, r3
 8003220:	3309      	adds	r3, #9
 8003222:	b29b      	uxth	r3, r3
 8003224:	2400      	movs	r4, #0
 8003226:	9400      	str	r4, [sp, #0]
 8003228:	f7fe fb1e 	bl	8001868 <lcd_Fill>
	for (int i = 0; i < 3; i++)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	3301      	adds	r3, #1
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b02      	cmp	r3, #2
 8003236:	ddcf      	ble.n	80031d8 <snakeInit+0xb0>
	}
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	bd90      	pop	{r4, r7, pc}
 8003242:	bf00      	nop
 8003244:	20000244 	.word	0x20000244
 8003248:	20000010 	.word	0x20000010
 800324c:	20000258 	.word	0x20000258
 8003250:	08002d35 	.word	0x08002d35
 8003254:	080028f1 	.word	0x080028f1
 8003258:	08002bc9 	.word	0x08002bc9
 800325c:	08002a5d 	.word	0x08002a5d
 8003260:	0800304d 	.word	0x0800304d
 8003264:	08002f71 	.word	0x08002f71

08003268 <generateFruit>:

void generateFruit()
{
 8003268:	b590      	push	{r4, r7, lr}
 800326a:	b085      	sub	sp, #20
 800326c:	af02      	add	r7, sp, #8
	if (flagEat == 1)
 800326e:	4b3d      	ldr	r3, [pc, #244]	@ (8003364 <generateFruit+0xfc>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d171      	bne.n	800335a <generateFruit+0xf2>
	{
		while (1)
		{
			int remind = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	607b      	str	r3, [r7, #4]
			xFruit = (rand() % (rangeXGenerate + 1)) * snakeStep;
 800327a:	f005 fbef 	bl	8008a5c <rand>
 800327e:	4601      	mov	r1, r0
 8003280:	4b39      	ldr	r3, [pc, #228]	@ (8003368 <generateFruit+0x100>)
 8003282:	fb83 2301 	smull	r2, r3, r3, r1
 8003286:	109a      	asrs	r2, r3, #2
 8003288:	17cb      	asrs	r3, r1, #31
 800328a:	1ad2      	subs	r2, r2, r3
 800328c:	4613      	mov	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4413      	add	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	1aca      	subs	r2, r1, r3
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	461a      	mov	r2, r3
 80032a0:	4b32      	ldr	r3, [pc, #200]	@ (800336c <generateFruit+0x104>)
 80032a2:	601a      	str	r2, [r3, #0]
			yFruit = (rand() % (rangeYGenerate + 1) + 7) * snakeStep;
 80032a4:	f005 fbda 	bl	8008a5c <rand>
 80032a8:	4603      	mov	r3, r0
 80032aa:	425a      	negs	r2, r3
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	f002 021f 	and.w	r2, r2, #31
 80032b4:	bf58      	it	pl
 80032b6:	4253      	negpl	r3, r2
 80032b8:	1dda      	adds	r2, r3, #7
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	461a      	mov	r2, r3
 80032c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003370 <generateFruit+0x108>)
 80032c6:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < snakeObject.snakeLength; i++)
 80032c8:	2300      	movs	r3, #0
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	e021      	b.n	8003312 <generateFruit+0xaa>
			{
				if (xFruit == snakeObject.infoSnake[i].x && yFruit == snakeObject.infoSnake[i].y)
 80032ce:	4a29      	ldr	r2, [pc, #164]	@ (8003374 <generateFruit+0x10c>)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	3305      	adds	r3, #5
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4b24      	ldr	r3, [pc, #144]	@ (800336c <generateFruit+0x104>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d114      	bne.n	800330c <generateFruit+0xa4>
 80032e2:	4a24      	ldr	r2, [pc, #144]	@ (8003374 <generateFruit+0x10c>)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	3305      	adds	r3, #5
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	4b20      	ldr	r3, [pc, #128]	@ (8003370 <generateFruit+0x108>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d10a      	bne.n	800330c <generateFruit+0xa4>
				{
					xFruit = INT_MIN;
 80032f6:	4b1d      	ldr	r3, [pc, #116]	@ (800336c <generateFruit+0x104>)
 80032f8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80032fc:	601a      	str	r2, [r3, #0]
					yFruit = INT_MIN;
 80032fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003370 <generateFruit+0x108>)
 8003300:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003304:	601a      	str	r2, [r3, #0]
					remind = 1;
 8003306:	2301      	movs	r3, #1
 8003308:	607b      	str	r3, [r7, #4]
					break;
 800330a:	e007      	b.n	800331c <generateFruit+0xb4>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	3301      	adds	r3, #1
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	4b18      	ldr	r3, [pc, #96]	@ (8003374 <generateFruit+0x10c>)
 8003314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	dbd8      	blt.n	80032ce <generateFruit+0x66>
				}
			}
			if (remind)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d119      	bne.n	8003356 <generateFruit+0xee>
			// 		}
			// 	}
			// }
			// if (remind)
			// 	continue;
			lcd_Fill(xFruit, yFruit, xFruit + snakeWidth, yFruit + snakeWidth, DARKBLUE);
 8003322:	4b12      	ldr	r3, [pc, #72]	@ (800336c <generateFruit+0x104>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	b298      	uxth	r0, r3
 8003328:	4b11      	ldr	r3, [pc, #68]	@ (8003370 <generateFruit+0x108>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	b299      	uxth	r1, r3
 800332e:	4b0f      	ldr	r3, [pc, #60]	@ (800336c <generateFruit+0x104>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	b29b      	uxth	r3, r3
 8003334:	3309      	adds	r3, #9
 8003336:	b29a      	uxth	r2, r3
 8003338:	4b0d      	ldr	r3, [pc, #52]	@ (8003370 <generateFruit+0x108>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	b29b      	uxth	r3, r3
 800333e:	3309      	adds	r3, #9
 8003340:	b29b      	uxth	r3, r3
 8003342:	f240 14cf 	movw	r4, #463	@ 0x1cf
 8003346:	9400      	str	r4, [sp, #0]
 8003348:	f7fe fa8e 	bl	8001868 <lcd_Fill>
			flagEat = 0;
 800334c:	4b05      	ldr	r3, [pc, #20]	@ (8003364 <generateFruit+0xfc>)
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
			break;
 8003352:	bf00      	nop
		}
	}
}
 8003354:	e001      	b.n	800335a <generateFruit+0xf2>
				continue;
 8003356:	bf00      	nop
		{
 8003358:	e78d      	b.n	8003276 <generateFruit+0xe>
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	bd90      	pop	{r4, r7, pc}
 8003362:	bf00      	nop
 8003364:	20000010 	.word	0x20000010
 8003368:	2aaaaaab 	.word	0x2aaaaaab
 800336c:	20000008 	.word	0x20000008
 8003370:	2000000c 	.word	0x2000000c
 8003374:	20000258 	.word	0x20000258

08003378 <timer_init>:

uint16_t flagForSnakeRun= 0;
uint16_t timerForSnakeRun= 0;
uint16_t timerForSnakeRun_MUL= 0;

void timer_init(){
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800337c:	4803      	ldr	r0, [pc, #12]	@ (800338c <timer_init+0x14>)
 800337e:	f004 fb71 	bl	8007a64 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8003382:	4803      	ldr	r0, [pc, #12]	@ (8003390 <timer_init+0x18>)
 8003384:	f004 fb06 	bl	8007994 <HAL_TIM_Base_Start>
}
 8003388:	bf00      	nop
 800338a:	bd80      	pop	{r7, pc}
 800338c:	200012d4 	.word	0x200012d4
 8003390:	2000128c 	.word	0x2000128c

08003394 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800339e:	4a08      	ldr	r2, [pc, #32]	@ (80033c0 <setTimer2+0x2c>)
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80033a4:	4b06      	ldr	r3, [pc, #24]	@ (80033c0 <setTimer2+0x2c>)
 80033a6:	881a      	ldrh	r2, [r3, #0]
 80033a8:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <setTimer2+0x30>)
 80033aa:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80033ac:	4b06      	ldr	r3, [pc, #24]	@ (80033c8 <setTimer2+0x34>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	801a      	strh	r2, [r3, #0]
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20001228 	.word	0x20001228
 80033c4:	20001226 	.word	0x20001226
 80033c8:	20001224 	.word	0x20001224

080033cc <setTimerSnakeRun>:

void setTimerSnakeRun(uint16_t duration){
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	80fb      	strh	r3, [r7, #6]
	timerForSnakeRun_MUL= duration/ TIMER_CYCLE_2;
 80033d6:	4a08      	ldr	r2, [pc, #32]	@ (80033f8 <setTimerSnakeRun+0x2c>)
 80033d8:	88fb      	ldrh	r3, [r7, #6]
 80033da:	8013      	strh	r3, [r2, #0]
	timerForSnakeRun= timerForSnakeRun_MUL;
 80033dc:	4b06      	ldr	r3, [pc, #24]	@ (80033f8 <setTimerSnakeRun+0x2c>)
 80033de:	881a      	ldrh	r2, [r3, #0]
 80033e0:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <setTimerSnakeRun+0x30>)
 80033e2:	801a      	strh	r2, [r3, #0]
	flagForSnakeRun= 0;
 80033e4:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <setTimerSnakeRun+0x34>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	801a      	strh	r2, [r3, #0]
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	2000122e 	.word	0x2000122e
 80033fc:	2000122c 	.word	0x2000122c
 8003400:	2000122a 	.word	0x2000122a

08003404 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003414:	d12b      	bne.n	800346e <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(timerForSnakeRun > 0)
 8003416:	4b18      	ldr	r3, [pc, #96]	@ (8003478 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d010      	beq.n	8003440 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			timerForSnakeRun--;
 800341e:	4b16      	ldr	r3, [pc, #88]	@ (8003478 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	4b14      	ldr	r3, [pc, #80]	@ (8003478 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003428:	801a      	strh	r2, [r3, #0]
			if(timerForSnakeRun <= 0) {
 800342a:	4b13      	ldr	r3, [pc, #76]	@ (8003478 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flagForSnakeRun = 1;
 8003432:	4b12      	ldr	r3, [pc, #72]	@ (800347c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003434:	2201      	movs	r2, #1
 8003436:	801a      	strh	r2, [r3, #0]
				timerForSnakeRun = timerForSnakeRun_MUL;
 8003438:	4b11      	ldr	r3, [pc, #68]	@ (8003480 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800343a:	881a      	ldrh	r2, [r3, #0]
 800343c:	4b0e      	ldr	r3, [pc, #56]	@ (8003478 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800343e:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer2_counter > 0){
 8003440:	4b10      	ldr	r3, [pc, #64]	@ (8003484 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d010      	beq.n	800346a <HAL_TIM_PeriodElapsedCallback+0x66>
			timer2_counter--;
 8003448:	4b0e      	ldr	r3, [pc, #56]	@ (8003484 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	4b0c      	ldr	r3, [pc, #48]	@ (8003484 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003452:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8003454:	4b0b      	ldr	r3, [pc, #44]	@ (8003484 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer2 = 1;
 800345c:	4b0a      	ldr	r3, [pc, #40]	@ (8003488 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800345e:	2201      	movs	r2, #1
 8003460:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8003462:	4b0a      	ldr	r3, [pc, #40]	@ (800348c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003464:	881a      	ldrh	r2, [r3, #0]
 8003466:	4b07      	ldr	r3, [pc, #28]	@ (8003484 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003468:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 800346a:	f7fe fe7f 	bl	800216c <led7_Scan>
	}
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	2000122c 	.word	0x2000122c
 800347c:	2000122a 	.word	0x2000122a
 8003480:	2000122e 	.word	0x2000122e
 8003484:	20001226 	.word	0x20001226
 8003488:	20001224 	.word	0x20001224
 800348c:	20001228 	.word	0x20001228

08003490 <delay_us>:

void delay_us (uint16_t us)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 800349a:	4b09      	ldr	r3, [pc, #36]	@ (80034c0 <delay_us+0x30>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2200      	movs	r2, #0
 80034a0:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80034a2:	bf00      	nop
 80034a4:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <delay_us+0x30>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d3f9      	bcc.n	80034a4 <delay_us+0x14>
}
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	2000128c 	.word	0x2000128c

080034c4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80034c8:	4b17      	ldr	r3, [pc, #92]	@ (8003528 <MX_SPI1_Init+0x64>)
 80034ca:	4a18      	ldr	r2, [pc, #96]	@ (800352c <MX_SPI1_Init+0x68>)
 80034cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80034ce:	4b16      	ldr	r3, [pc, #88]	@ (8003528 <MX_SPI1_Init+0x64>)
 80034d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80034d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80034d6:	4b14      	ldr	r3, [pc, #80]	@ (8003528 <MX_SPI1_Init+0x64>)
 80034d8:	2200      	movs	r2, #0
 80034da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80034dc:	4b12      	ldr	r3, [pc, #72]	@ (8003528 <MX_SPI1_Init+0x64>)
 80034de:	2200      	movs	r2, #0
 80034e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034e2:	4b11      	ldr	r3, [pc, #68]	@ (8003528 <MX_SPI1_Init+0x64>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003528 <MX_SPI1_Init+0x64>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80034ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003528 <MX_SPI1_Init+0x64>)
 80034f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003528 <MX_SPI1_Init+0x64>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003528 <MX_SPI1_Init+0x64>)
 80034fe:	2200      	movs	r2, #0
 8003500:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003502:	4b09      	ldr	r3, [pc, #36]	@ (8003528 <MX_SPI1_Init+0x64>)
 8003504:	2200      	movs	r2, #0
 8003506:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003508:	4b07      	ldr	r3, [pc, #28]	@ (8003528 <MX_SPI1_Init+0x64>)
 800350a:	2200      	movs	r2, #0
 800350c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800350e:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <MX_SPI1_Init+0x64>)
 8003510:	220a      	movs	r2, #10
 8003512:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003514:	4804      	ldr	r0, [pc, #16]	@ (8003528 <MX_SPI1_Init+0x64>)
 8003516:	f003 ff19 	bl	800734c <HAL_SPI_Init>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003520:	f7ff f8bc 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003524:	bf00      	nop
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20001230 	.word	0x20001230
 800352c:	40013000 	.word	0x40013000

08003530 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	@ 0x28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003538:	f107 0314 	add.w	r3, r7, #20
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	609a      	str	r2, [r3, #8]
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a19      	ldr	r2, [pc, #100]	@ (80035b4 <HAL_SPI_MspInit+0x84>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d12b      	bne.n	80035aa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	4b18      	ldr	r3, [pc, #96]	@ (80035b8 <HAL_SPI_MspInit+0x88>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355a:	4a17      	ldr	r2, [pc, #92]	@ (80035b8 <HAL_SPI_MspInit+0x88>)
 800355c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003560:	6453      	str	r3, [r2, #68]	@ 0x44
 8003562:	4b15      	ldr	r3, [pc, #84]	@ (80035b8 <HAL_SPI_MspInit+0x88>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003566:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	4b11      	ldr	r3, [pc, #68]	@ (80035b8 <HAL_SPI_MspInit+0x88>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003576:	4a10      	ldr	r2, [pc, #64]	@ (80035b8 <HAL_SPI_MspInit+0x88>)
 8003578:	f043 0302 	orr.w	r3, r3, #2
 800357c:	6313      	str	r3, [r2, #48]	@ 0x30
 800357e:	4b0e      	ldr	r3, [pc, #56]	@ (80035b8 <HAL_SPI_MspInit+0x88>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800358a:	2338      	movs	r3, #56	@ 0x38
 800358c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358e:	2302      	movs	r3, #2
 8003590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003596:	2303      	movs	r3, #3
 8003598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800359a:	2305      	movs	r3, #5
 800359c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800359e:	f107 0314 	add.w	r3, r7, #20
 80035a2:	4619      	mov	r1, r3
 80035a4:	4805      	ldr	r0, [pc, #20]	@ (80035bc <HAL_SPI_MspInit+0x8c>)
 80035a6:	f002 f8bf 	bl	8005728 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80035aa:	bf00      	nop
 80035ac:	3728      	adds	r7, #40	@ 0x28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40013000 	.word	0x40013000
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40020400 	.word	0x40020400

080035c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	4b10      	ldr	r3, [pc, #64]	@ (800360c <HAL_MspInit+0x4c>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ce:	4a0f      	ldr	r2, [pc, #60]	@ (800360c <HAL_MspInit+0x4c>)
 80035d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80035d6:	4b0d      	ldr	r3, [pc, #52]	@ (800360c <HAL_MspInit+0x4c>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035de:	607b      	str	r3, [r7, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	4b09      	ldr	r3, [pc, #36]	@ (800360c <HAL_MspInit+0x4c>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	4a08      	ldr	r2, [pc, #32]	@ (800360c <HAL_MspInit+0x4c>)
 80035ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80035f2:	4b06      	ldr	r3, [pc, #24]	@ (800360c <HAL_MspInit+0x4c>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800

08003610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003614:	bf00      	nop
 8003616:	e7fd      	b.n	8003614 <NMI_Handler+0x4>

08003618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800361c:	bf00      	nop
 800361e:	e7fd      	b.n	800361c <HardFault_Handler+0x4>

08003620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003624:	bf00      	nop
 8003626:	e7fd      	b.n	8003624 <MemManage_Handler+0x4>

08003628 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800362c:	bf00      	nop
 800362e:	e7fd      	b.n	800362c <BusFault_Handler+0x4>

08003630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003634:	bf00      	nop
 8003636:	e7fd      	b.n	8003634 <UsageFault_Handler+0x4>

08003638 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800363c:	bf00      	nop
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003646:	b480      	push	{r7}
 8003648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800364a:	bf00      	nop
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003658:	bf00      	nop
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003666:	f001 f9bd 	bl	80049e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003674:	4802      	ldr	r0, [pc, #8]	@ (8003680 <TIM2_IRQHandler+0x10>)
 8003676:	f004 fabe 	bl	8007bf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	200012d4 	.word	0x200012d4

08003684 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003688:	4802      	ldr	r0, [pc, #8]	@ (8003694 <DMA2_Stream0_IRQHandler+0x10>)
 800368a:	f001 fe11 	bl	80052b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	2000012c 	.word	0x2000012c

08003698 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
	return 1;
 800369c:	2301      	movs	r3, #1
}
 800369e:	4618      	mov	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <_kill>:

int _kill(int pid, int sig)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036b2:	f005 fb65 	bl	8008d80 <__errno>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2216      	movs	r2, #22
 80036ba:	601a      	str	r2, [r3, #0]
	return -1;
 80036bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <_exit>:

void _exit (int status)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036d0:	f04f 31ff 	mov.w	r1, #4294967295
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff ffe7 	bl	80036a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036da:	bf00      	nop
 80036dc:	e7fd      	b.n	80036da <_exit+0x12>

080036de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	e00a      	b.n	8003706 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036f0:	f3af 8000 	nop.w
 80036f4:	4601      	mov	r1, r0
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	60ba      	str	r2, [r7, #8]
 80036fc:	b2ca      	uxtb	r2, r1
 80036fe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	3301      	adds	r3, #1
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	429a      	cmp	r2, r3
 800370c:	dbf0      	blt.n	80036f0 <_read+0x12>
	}

return len;
 800370e:	687b      	ldr	r3, [r7, #4]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	e009      	b.n	800373e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	60ba      	str	r2, [r7, #8]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	3301      	adds	r3, #1
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	429a      	cmp	r2, r3
 8003744:	dbf1      	blt.n	800372a <_write+0x12>
	}
	return len;
 8003746:	687b      	ldr	r3, [r7, #4]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <_close>:

int _close(int file)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	return -1;
 8003758:	f04f 33ff 	mov.w	r3, #4294967295
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003778:	605a      	str	r2, [r3, #4]
	return 0;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <_isatty>:

int _isatty(int file)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
	return 1;
 8003790:	2301      	movs	r3, #1
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800379e:	b480      	push	{r7}
 80037a0:	b085      	sub	sp, #20
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
	return 0;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037c0:	4a14      	ldr	r2, [pc, #80]	@ (8003814 <_sbrk+0x5c>)
 80037c2:	4b15      	ldr	r3, [pc, #84]	@ (8003818 <_sbrk+0x60>)
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037cc:	4b13      	ldr	r3, [pc, #76]	@ (800381c <_sbrk+0x64>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d102      	bne.n	80037da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037d4:	4b11      	ldr	r3, [pc, #68]	@ (800381c <_sbrk+0x64>)
 80037d6:	4a12      	ldr	r2, [pc, #72]	@ (8003820 <_sbrk+0x68>)
 80037d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037da:	4b10      	ldr	r3, [pc, #64]	@ (800381c <_sbrk+0x64>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4413      	add	r3, r2
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d207      	bcs.n	80037f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037e8:	f005 faca 	bl	8008d80 <__errno>
 80037ec:	4603      	mov	r3, r0
 80037ee:	220c      	movs	r2, #12
 80037f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037f2:	f04f 33ff 	mov.w	r3, #4294967295
 80037f6:	e009      	b.n	800380c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037f8:	4b08      	ldr	r3, [pc, #32]	@ (800381c <_sbrk+0x64>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037fe:	4b07      	ldr	r3, [pc, #28]	@ (800381c <_sbrk+0x64>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	4a05      	ldr	r2, [pc, #20]	@ (800381c <_sbrk+0x64>)
 8003808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800380a:	68fb      	ldr	r3, [r7, #12]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	20020000 	.word	0x20020000
 8003818:	00000400 	.word	0x00000400
 800381c:	20001288 	.word	0x20001288
 8003820:	200014b8 	.word	0x200014b8

08003824 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003828:	4b06      	ldr	r3, [pc, #24]	@ (8003844 <SystemInit+0x20>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382e:	4a05      	ldr	r2, [pc, #20]	@ (8003844 <SystemInit+0x20>)
 8003830:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003834:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800384e:	f107 0308 	add.w	r3, r7, #8
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800385c:	463b      	mov	r3, r7
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003864:	4b1e      	ldr	r3, [pc, #120]	@ (80038e0 <MX_TIM1_Init+0x98>)
 8003866:	4a1f      	ldr	r2, [pc, #124]	@ (80038e4 <MX_TIM1_Init+0x9c>)
 8003868:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800386a:	4b1d      	ldr	r3, [pc, #116]	@ (80038e0 <MX_TIM1_Init+0x98>)
 800386c:	2253      	movs	r2, #83	@ 0x53
 800386e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003870:	4b1b      	ldr	r3, [pc, #108]	@ (80038e0 <MX_TIM1_Init+0x98>)
 8003872:	2200      	movs	r2, #0
 8003874:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003876:	4b1a      	ldr	r3, [pc, #104]	@ (80038e0 <MX_TIM1_Init+0x98>)
 8003878:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800387c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800387e:	4b18      	ldr	r3, [pc, #96]	@ (80038e0 <MX_TIM1_Init+0x98>)
 8003880:	2200      	movs	r2, #0
 8003882:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003884:	4b16      	ldr	r3, [pc, #88]	@ (80038e0 <MX_TIM1_Init+0x98>)
 8003886:	2200      	movs	r2, #0
 8003888:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800388a:	4b15      	ldr	r3, [pc, #84]	@ (80038e0 <MX_TIM1_Init+0x98>)
 800388c:	2200      	movs	r2, #0
 800388e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003890:	4813      	ldr	r0, [pc, #76]	@ (80038e0 <MX_TIM1_Init+0x98>)
 8003892:	f004 f82f 	bl	80078f4 <HAL_TIM_Base_Init>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800389c:	f7fe fefe 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80038a6:	f107 0308 	add.w	r3, r7, #8
 80038aa:	4619      	mov	r1, r3
 80038ac:	480c      	ldr	r0, [pc, #48]	@ (80038e0 <MX_TIM1_Init+0x98>)
 80038ae:	f004 fb6d 	bl	8007f8c <HAL_TIM_ConfigClockSource>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80038b8:	f7fe fef0 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038bc:	2300      	movs	r3, #0
 80038be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038c0:	2300      	movs	r3, #0
 80038c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80038c4:	463b      	mov	r3, r7
 80038c6:	4619      	mov	r1, r3
 80038c8:	4805      	ldr	r0, [pc, #20]	@ (80038e0 <MX_TIM1_Init+0x98>)
 80038ca:	f004 ff39 	bl	8008740 <HAL_TIMEx_MasterConfigSynchronization>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80038d4:	f7fe fee2 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80038d8:	bf00      	nop
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	2000128c 	.word	0x2000128c
 80038e4:	40010000 	.word	0x40010000

080038e8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038ee:	f107 0308 	add.w	r3, r7, #8
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	605a      	str	r2, [r3, #4]
 80038f8:	609a      	str	r2, [r3, #8]
 80038fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038fc:	463b      	mov	r3, r7
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003904:	4b1d      	ldr	r3, [pc, #116]	@ (800397c <MX_TIM2_Init+0x94>)
 8003906:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800390a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800390c:	4b1b      	ldr	r3, [pc, #108]	@ (800397c <MX_TIM2_Init+0x94>)
 800390e:	f240 3247 	movw	r2, #839	@ 0x347
 8003912:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003914:	4b19      	ldr	r3, [pc, #100]	@ (800397c <MX_TIM2_Init+0x94>)
 8003916:	2200      	movs	r2, #0
 8003918:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800391a:	4b18      	ldr	r3, [pc, #96]	@ (800397c <MX_TIM2_Init+0x94>)
 800391c:	2263      	movs	r2, #99	@ 0x63
 800391e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003920:	4b16      	ldr	r3, [pc, #88]	@ (800397c <MX_TIM2_Init+0x94>)
 8003922:	2200      	movs	r2, #0
 8003924:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003926:	4b15      	ldr	r3, [pc, #84]	@ (800397c <MX_TIM2_Init+0x94>)
 8003928:	2200      	movs	r2, #0
 800392a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800392c:	4813      	ldr	r0, [pc, #76]	@ (800397c <MX_TIM2_Init+0x94>)
 800392e:	f003 ffe1 	bl	80078f4 <HAL_TIM_Base_Init>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003938:	f7fe feb0 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800393c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003940:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003942:	f107 0308 	add.w	r3, r7, #8
 8003946:	4619      	mov	r1, r3
 8003948:	480c      	ldr	r0, [pc, #48]	@ (800397c <MX_TIM2_Init+0x94>)
 800394a:	f004 fb1f 	bl	8007f8c <HAL_TIM_ConfigClockSource>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003954:	f7fe fea2 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003958:	2300      	movs	r3, #0
 800395a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800395c:	2300      	movs	r3, #0
 800395e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003960:	463b      	mov	r3, r7
 8003962:	4619      	mov	r1, r3
 8003964:	4805      	ldr	r0, [pc, #20]	@ (800397c <MX_TIM2_Init+0x94>)
 8003966:	f004 feeb 	bl	8008740 <HAL_TIMEx_MasterConfigSynchronization>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003970:	f7fe fe94 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003974:	bf00      	nop
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	200012d4 	.word	0x200012d4

08003980 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003986:	1d3b      	adds	r3, r7, #4
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	611a      	str	r2, [r3, #16]
 8003994:	615a      	str	r2, [r3, #20]
 8003996:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003998:	4b1e      	ldr	r3, [pc, #120]	@ (8003a14 <MX_TIM13_Init+0x94>)
 800399a:	4a1f      	ldr	r2, [pc, #124]	@ (8003a18 <MX_TIM13_Init+0x98>)
 800399c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 800399e:	4b1d      	ldr	r3, [pc, #116]	@ (8003a14 <MX_TIM13_Init+0x94>)
 80039a0:	f240 3247 	movw	r2, #839	@ 0x347
 80039a4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a14 <MX_TIM13_Init+0x94>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80039ac:	4b19      	ldr	r3, [pc, #100]	@ (8003a14 <MX_TIM13_Init+0x94>)
 80039ae:	2263      	movs	r2, #99	@ 0x63
 80039b0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039b2:	4b18      	ldr	r3, [pc, #96]	@ (8003a14 <MX_TIM13_Init+0x94>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039b8:	4b16      	ldr	r3, [pc, #88]	@ (8003a14 <MX_TIM13_Init+0x94>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80039be:	4815      	ldr	r0, [pc, #84]	@ (8003a14 <MX_TIM13_Init+0x94>)
 80039c0:	f003 ff98 	bl	80078f4 <HAL_TIM_Base_Init>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80039ca:	f7fe fe67 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80039ce:	4811      	ldr	r0, [pc, #68]	@ (8003a14 <MX_TIM13_Init+0x94>)
 80039d0:	f004 f8b8 	bl	8007b44 <HAL_TIM_PWM_Init>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80039da:	f7fe fe5f 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039de:	2360      	movs	r3, #96	@ 0x60
 80039e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039ee:	1d3b      	adds	r3, r7, #4
 80039f0:	2200      	movs	r2, #0
 80039f2:	4619      	mov	r1, r3
 80039f4:	4807      	ldr	r0, [pc, #28]	@ (8003a14 <MX_TIM13_Init+0x94>)
 80039f6:	f004 fa07 	bl	8007e08 <HAL_TIM_PWM_ConfigChannel>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8003a00:	f7fe fe4c 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003a04:	4803      	ldr	r0, [pc, #12]	@ (8003a14 <MX_TIM13_Init+0x94>)
 8003a06:	f000 f85b 	bl	8003ac0 <HAL_TIM_MspPostInit>

}
 8003a0a:	bf00      	nop
 8003a0c:	3720      	adds	r7, #32
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	2000131c 	.word	0x2000131c
 8003a18:	40001c00 	.word	0x40001c00

08003a1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a22      	ldr	r2, [pc, #136]	@ (8003ab4 <HAL_TIM_Base_MspInit+0x98>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d10e      	bne.n	8003a4c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	4b21      	ldr	r3, [pc, #132]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x9c>)
 8003a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a36:	4a20      	ldr	r2, [pc, #128]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x9c>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x9c>)
 8003a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003a4a:	e02e      	b.n	8003aaa <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a54:	d116      	bne.n	8003a84 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	4b17      	ldr	r3, [pc, #92]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x9c>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	4a16      	ldr	r2, [pc, #88]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x9c>)
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a66:	4b14      	ldr	r3, [pc, #80]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x9c>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	613b      	str	r3, [r7, #16]
 8003a70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a72:	2200      	movs	r2, #0
 8003a74:	2100      	movs	r1, #0
 8003a76:	201c      	movs	r0, #28
 8003a78:	f001 fb35 	bl	80050e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a7c:	201c      	movs	r0, #28
 8003a7e:	f001 fb4e 	bl	800511e <HAL_NVIC_EnableIRQ>
}
 8003a82:	e012      	b.n	8003aaa <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a0c      	ldr	r2, [pc, #48]	@ (8003abc <HAL_TIM_Base_MspInit+0xa0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10d      	bne.n	8003aaa <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	4b09      	ldr	r3, [pc, #36]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x9c>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	4a08      	ldr	r2, [pc, #32]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x9c>)
 8003a98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a9e:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x9c>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
}
 8003aaa:	bf00      	nop
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40010000 	.word	0x40010000
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40001c00 	.word	0x40001c00

08003ac0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac8:	f107 030c 	add.w	r3, r7, #12
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a12      	ldr	r2, [pc, #72]	@ (8003b28 <HAL_TIM_MspPostInit+0x68>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d11e      	bne.n	8003b20 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	4b11      	ldr	r3, [pc, #68]	@ (8003b2c <HAL_TIM_MspPostInit+0x6c>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aea:	4a10      	ldr	r2, [pc, #64]	@ (8003b2c <HAL_TIM_MspPostInit+0x6c>)
 8003aec:	f043 0320 	orr.w	r3, r3, #32
 8003af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003af2:	4b0e      	ldr	r3, [pc, #56]	@ (8003b2c <HAL_TIM_MspPostInit+0x6c>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	60bb      	str	r3, [r7, #8]
 8003afc:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003afe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b04:	2302      	movs	r3, #2
 8003b06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003b10:	2309      	movs	r3, #9
 8003b12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b14:	f107 030c 	add.w	r3, r7, #12
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4805      	ldr	r0, [pc, #20]	@ (8003b30 <HAL_TIM_MspPostInit+0x70>)
 8003b1c:	f001 fe04 	bl	8005728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003b20:	bf00      	nop
 8003b22:	3720      	adds	r7, #32
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40001c00 	.word	0x40001c00
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40021400 	.word	0x40021400

08003b34 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 8003b42:	2300      	movs	r3, #0
 8003b44:	73fb      	strb	r3, [r7, #15]
 8003b46:	e025      	b.n	8003b94 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8003b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	da06      	bge.n	8003b5e <TP_Write_Byte+0x2a>
 8003b50:	2201      	movs	r2, #1
 8003b52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b56:	4813      	ldr	r0, [pc, #76]	@ (8003ba4 <TP_Write_Byte+0x70>)
 8003b58:	f001 ff9a 	bl	8005a90 <HAL_GPIO_WritePin>
 8003b5c:	e005      	b.n	8003b6a <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b64:	480f      	ldr	r0, [pc, #60]	@ (8003ba4 <TP_Write_Byte+0x70>)
 8003b66:	f001 ff93 	bl	8005a90 <HAL_GPIO_WritePin>
		num<<=1;
 8003b6a:	79fb      	ldrb	r3, [r7, #7]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8003b70:	2200      	movs	r2, #0
 8003b72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b76:	480c      	ldr	r0, [pc, #48]	@ (8003ba8 <TP_Write_Byte+0x74>)
 8003b78:	f001 ff8a 	bl	8005a90 <HAL_GPIO_WritePin>
		delay_us(1);
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	f7ff fc87 	bl	8003490 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8003b82:	2201      	movs	r2, #1
 8003b84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b88:	4807      	ldr	r0, [pc, #28]	@ (8003ba8 <TP_Write_Byte+0x74>)
 8003b8a:	f001 ff81 	bl	8005a90 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	3301      	adds	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b07      	cmp	r3, #7
 8003b98:	d9d6      	bls.n	8003b48 <TP_Write_Byte+0x14>
	}
}
 8003b9a:	bf00      	nop
 8003b9c:	bf00      	nop
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40020800 	.word	0x40020800
 8003ba8:	40021800 	.word	0x40021800

08003bac <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003bc4:	482f      	ldr	r0, [pc, #188]	@ (8003c84 <TP_Read_AD+0xd8>)
 8003bc6:	f001 ff63 	bl	8005a90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003bd0:	482d      	ldr	r0, [pc, #180]	@ (8003c88 <TP_Read_AD+0xdc>)
 8003bd2:	f001 ff5d 	bl	8005a90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2180      	movs	r1, #128	@ 0x80
 8003bda:	482a      	ldr	r0, [pc, #168]	@ (8003c84 <TP_Read_AD+0xd8>)
 8003bdc:	f001 ff58 	bl	8005a90 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff ffa6 	bl	8003b34 <TP_Write_Byte>
	delay_us(6);
 8003be8:	2006      	movs	r0, #6
 8003bea:	f7ff fc51 	bl	8003490 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003bf4:	4823      	ldr	r0, [pc, #140]	@ (8003c84 <TP_Read_AD+0xd8>)
 8003bf6:	f001 ff4b 	bl	8005a90 <HAL_GPIO_WritePin>
	delay_us(1);
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	f7ff fc48 	bl	8003490 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8003c00:	2201      	movs	r2, #1
 8003c02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c06:	481f      	ldr	r0, [pc, #124]	@ (8003c84 <TP_Read_AD+0xd8>)
 8003c08:	f001 ff42 	bl	8005a90 <HAL_GPIO_WritePin>
	delay_us(1);
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	f7ff fc3f 	bl	8003490 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8003c12:	2200      	movs	r2, #0
 8003c14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c18:	481a      	ldr	r0, [pc, #104]	@ (8003c84 <TP_Read_AD+0xd8>)
 8003c1a:	f001 ff39 	bl	8005a90 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 8003c1e:	2300      	movs	r3, #0
 8003c20:	73fb      	strb	r3, [r7, #15]
 8003c22:	e01f      	b.n	8003c64 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8003c24:	89bb      	ldrh	r3, [r7, #12]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c30:	4814      	ldr	r0, [pc, #80]	@ (8003c84 <TP_Read_AD+0xd8>)
 8003c32:	f001 ff2d 	bl	8005a90 <HAL_GPIO_WritePin>
		delay_us(1);
 8003c36:	2001      	movs	r0, #1
 8003c38:	f7ff fc2a 	bl	8003490 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c42:	4810      	ldr	r0, [pc, #64]	@ (8003c84 <TP_Read_AD+0xd8>)
 8003c44:	f001 ff24 	bl	8005a90 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8003c48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c4c:	480e      	ldr	r0, [pc, #56]	@ (8003c88 <TP_Read_AD+0xdc>)
 8003c4e:	f001 ff07 	bl	8005a60 <HAL_GPIO_ReadPin>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <TP_Read_AD+0xb2>
 8003c58:	89bb      	ldrh	r3, [r7, #12]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	3301      	adds	r3, #1
 8003c62:	73fb      	strb	r3, [r7, #15]
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	2b0f      	cmp	r3, #15
 8003c68:	d9dc      	bls.n	8003c24 <TP_Read_AD+0x78>
	}
	Num>>=4;
 8003c6a:	89bb      	ldrh	r3, [r7, #12]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 8003c70:	2201      	movs	r2, #1
 8003c72:	2180      	movs	r1, #128	@ 0x80
 8003c74:	4803      	ldr	r0, [pc, #12]	@ (8003c84 <TP_Read_AD+0xd8>)
 8003c76:	f001 ff0b 	bl	8005a90 <HAL_GPIO_WritePin>
	return(Num);
 8003c7a:	89bb      	ldrh	r3, [r7, #12]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40021800 	.word	0x40021800
 8003c88:	40020800 	.word	0x40020800

08003c8c <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 8003c8c:	b590      	push	{r4, r7, lr}
 8003c8e:	b089      	sub	sp, #36	@ 0x24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	83fb      	strh	r3, [r7, #30]
 8003c9e:	e00e      	b.n	8003cbe <TP_Read_XOY+0x32>
 8003ca0:	8bfc      	ldrh	r4, [r7, #30]
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff ff81 	bl	8003bac <TP_Read_AD>
 8003caa:	4603      	mov	r3, r0
 8003cac:	461a      	mov	r2, r3
 8003cae:	0063      	lsls	r3, r4, #1
 8003cb0:	3320      	adds	r3, #32
 8003cb2:	443b      	add	r3, r7
 8003cb4:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003cb8:	8bfb      	ldrh	r3, [r7, #30]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	83fb      	strh	r3, [r7, #30]
 8003cbe:	8bfb      	ldrh	r3, [r7, #30]
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d9ed      	bls.n	8003ca0 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	83fb      	strh	r3, [r7, #30]
 8003cc8:	e035      	b.n	8003d36 <TP_Read_XOY+0xaa>
	{
		for(j=i+1;j<READ_TIMES;j++)
 8003cca:	8bfb      	ldrh	r3, [r7, #30]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	83bb      	strh	r3, [r7, #28]
 8003cd0:	e02b      	b.n	8003d2a <TP_Read_XOY+0x9e>
		{
			if(buf[i]>buf[j])
 8003cd2:	8bfb      	ldrh	r3, [r7, #30]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	3320      	adds	r3, #32
 8003cd8:	443b      	add	r3, r7
 8003cda:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8003cde:	8bbb      	ldrh	r3, [r7, #28]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	3320      	adds	r3, #32
 8003ce4:	443b      	add	r3, r7
 8003ce6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d91a      	bls.n	8003d24 <TP_Read_XOY+0x98>
			{
				temp=buf[i];
 8003cee:	8bfb      	ldrh	r3, [r7, #30]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	3320      	adds	r3, #32
 8003cf4:	443b      	add	r3, r7
 8003cf6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003cfa:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8003cfc:	8bbb      	ldrh	r3, [r7, #28]
 8003cfe:	8bfa      	ldrh	r2, [r7, #30]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	3320      	adds	r3, #32
 8003d04:	443b      	add	r3, r7
 8003d06:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8003d0a:	0053      	lsls	r3, r2, #1
 8003d0c:	3320      	adds	r3, #32
 8003d0e:	443b      	add	r3, r7
 8003d10:	460a      	mov	r2, r1
 8003d12:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 8003d16:	8bbb      	ldrh	r3, [r7, #28]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	3320      	adds	r3, #32
 8003d1c:	443b      	add	r3, r7
 8003d1e:	8b3a      	ldrh	r2, [r7, #24]
 8003d20:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8003d24:	8bbb      	ldrh	r3, [r7, #28]
 8003d26:	3301      	adds	r3, #1
 8003d28:	83bb      	strh	r3, [r7, #28]
 8003d2a:	8bbb      	ldrh	r3, [r7, #28]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d9d0      	bls.n	8003cd2 <TP_Read_XOY+0x46>
	for(i=0;i<READ_TIMES-1; i++)
 8003d30:	8bfb      	ldrh	r3, [r7, #30]
 8003d32:	3301      	adds	r3, #1
 8003d34:	83fb      	strh	r3, [r7, #30]
 8003d36:	8bfb      	ldrh	r3, [r7, #30]
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d9c6      	bls.n	8003cca <TP_Read_XOY+0x3e>
			}
		}
	}
	sum=0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 8003d40:	2301      	movs	r3, #1
 8003d42:	83fb      	strh	r3, [r7, #30]
 8003d44:	e00b      	b.n	8003d5e <TP_Read_XOY+0xd2>
 8003d46:	8bfb      	ldrh	r3, [r7, #30]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	3320      	adds	r3, #32
 8003d4c:	443b      	add	r3, r7
 8003d4e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8003d52:	8b7b      	ldrh	r3, [r7, #26]
 8003d54:	4413      	add	r3, r2
 8003d56:	837b      	strh	r3, [r7, #26]
 8003d58:	8bfb      	ldrh	r3, [r7, #30]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	83fb      	strh	r3, [r7, #30]
 8003d5e:	8bfb      	ldrh	r3, [r7, #30]
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d9f0      	bls.n	8003d46 <TP_Read_XOY+0xba>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8003d64:	8b7b      	ldrh	r3, [r7, #26]
 8003d66:	4a05      	ldr	r2, [pc, #20]	@ (8003d7c <TP_Read_XOY+0xf0>)
 8003d68:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6c:	085b      	lsrs	r3, r3, #1
 8003d6e:	833b      	strh	r3, [r7, #24]
	return temp;
 8003d70:	8b3b      	ldrh	r3, [r7, #24]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3724      	adds	r7, #36	@ 0x24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd90      	pop	{r4, r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	aaaaaaab 	.word	0xaaaaaaab

08003d80 <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 8003d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003dbc <TP_Read_XY+0x3c>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff ff7c 	bl	8003c8c <TP_Read_XOY>
 8003d94:	4603      	mov	r3, r0
 8003d96:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8003d98:	4b09      	ldr	r3, [pc, #36]	@ (8003dc0 <TP_Read_XY+0x40>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ff75 	bl	8003c8c <TP_Read_XOY>
 8003da2:	4603      	mov	r3, r0
 8003da4:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	89fa      	ldrh	r2, [r7, #14]
 8003daa:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	89ba      	ldrh	r2, [r7, #12]
 8003db0:	801a      	strh	r2, [r3, #0]
	return 1;
 8003db2:	2301      	movs	r3, #1
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	2000004c 	.word	0x2000004c
 8003dc0:	2000004d 	.word	0x2000004d

08003dc4 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 8003dce:	f107 0212 	add.w	r2, r7, #18
 8003dd2:	f107 0314 	add.w	r3, r7, #20
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff ffd1 	bl	8003d80 <TP_Read_XY>
 8003dde:	4603      	mov	r3, r0
 8003de0:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8003de2:	7dfb      	ldrb	r3, [r7, #23]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <TP_Read_XY2+0x28>
 8003de8:	2300      	movs	r3, #0
 8003dea:	e049      	b.n	8003e80 <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 8003dec:	f107 020e 	add.w	r2, r7, #14
 8003df0:	f107 0310 	add.w	r3, r7, #16
 8003df4:	4611      	mov	r1, r2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff ffc2 	bl	8003d80 <TP_Read_XY>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <TP_Read_XY2+0x46>
 8003e06:	2300      	movs	r3, #0
 8003e08:	e03a      	b.n	8003e80 <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 8003e0a:	8a3a      	ldrh	r2, [r7, #16]
 8003e0c:	8abb      	ldrh	r3, [r7, #20]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d804      	bhi.n	8003e1c <TP_Read_XY2+0x58>
 8003e12:	8a3b      	ldrh	r3, [r7, #16]
 8003e14:	3363      	adds	r3, #99	@ 0x63
 8003e16:	8aba      	ldrh	r2, [r7, #20]
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	da08      	bge.n	8003e2e <TP_Read_XY2+0x6a>
 8003e1c:	8aba      	ldrh	r2, [r7, #20]
 8003e1e:	8a3b      	ldrh	r3, [r7, #16]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d82c      	bhi.n	8003e7e <TP_Read_XY2+0xba>
 8003e24:	8abb      	ldrh	r3, [r7, #20]
 8003e26:	3363      	adds	r3, #99	@ 0x63
 8003e28:	8a3a      	ldrh	r2, [r7, #16]
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	db27      	blt.n	8003e7e <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 8003e2e:	89fa      	ldrh	r2, [r7, #14]
 8003e30:	8a7b      	ldrh	r3, [r7, #18]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d804      	bhi.n	8003e40 <TP_Read_XY2+0x7c>
 8003e36:	89fb      	ldrh	r3, [r7, #14]
 8003e38:	3363      	adds	r3, #99	@ 0x63
 8003e3a:	8a7a      	ldrh	r2, [r7, #18]
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	da08      	bge.n	8003e52 <TP_Read_XY2+0x8e>
 8003e40:	8a7a      	ldrh	r2, [r7, #18]
 8003e42:	89fb      	ldrh	r3, [r7, #14]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d81a      	bhi.n	8003e7e <TP_Read_XY2+0xba>
 8003e48:	8a7b      	ldrh	r3, [r7, #18]
 8003e4a:	3363      	adds	r3, #99	@ 0x63
 8003e4c:	89fa      	ldrh	r2, [r7, #14]
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	db15      	blt.n	8003e7e <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 8003e52:	8abb      	ldrh	r3, [r7, #20]
 8003e54:	461a      	mov	r2, r3
 8003e56:	8a3b      	ldrh	r3, [r7, #16]
 8003e58:	4413      	add	r3, r2
 8003e5a:	0fda      	lsrs	r2, r3, #31
 8003e5c:	4413      	add	r3, r2
 8003e5e:	105b      	asrs	r3, r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 8003e66:	8a7b      	ldrh	r3, [r7, #18]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	89fb      	ldrh	r3, [r7, #14]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	0fda      	lsrs	r2, r3, #31
 8003e70:	4413      	add	r3, r2
 8003e72:	105b      	asrs	r3, r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	801a      	strh	r2, [r3, #0]
		return 1;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <TP_Read_XY2+0xbc>
	}else return 0;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8003e88:	b590      	push	{r4, r7, lr}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	4603      	mov	r3, r0
 8003e90:	80fb      	strh	r3, [r7, #6]
 8003e92:	460b      	mov	r3, r1
 8003e94:	80bb      	strh	r3, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	3b0c      	subs	r3, #12
 8003e9e:	b298      	uxth	r0, r3
 8003ea0:	88fb      	ldrh	r3, [r7, #6]
 8003ea2:	330d      	adds	r3, #13
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	88bc      	ldrh	r4, [r7, #4]
 8003ea8:	88b9      	ldrh	r1, [r7, #4]
 8003eaa:	887b      	ldrh	r3, [r7, #2]
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	4623      	mov	r3, r4
 8003eb0:	f7fd fd27 	bl	8001902 <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 8003eb4:	88bb      	ldrh	r3, [r7, #4]
 8003eb6:	3b0c      	subs	r3, #12
 8003eb8:	b299      	uxth	r1, r3
 8003eba:	88bb      	ldrh	r3, [r7, #4]
 8003ebc:	330d      	adds	r3, #13
 8003ebe:	b29c      	uxth	r4, r3
 8003ec0:	88fa      	ldrh	r2, [r7, #6]
 8003ec2:	88f8      	ldrh	r0, [r7, #6]
 8003ec4:	887b      	ldrh	r3, [r7, #2]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	4623      	mov	r3, r4
 8003eca:	f7fd fd1a 	bl	8001902 <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	b298      	uxth	r0, r3
 8003ed4:	88bb      	ldrh	r3, [r7, #4]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	887a      	ldrh	r2, [r7, #2]
 8003edc:	4619      	mov	r1, r3
 8003ede:	f7fd fcf9 	bl	80018d4 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b298      	uxth	r0, r3
 8003ee8:	88bb      	ldrh	r3, [r7, #4]
 8003eea:	3301      	adds	r3, #1
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	887a      	ldrh	r2, [r7, #2]
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	f7fd fcef 	bl	80018d4 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	b298      	uxth	r0, r3
 8003efc:	88bb      	ldrh	r3, [r7, #4]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	887a      	ldrh	r2, [r7, #2]
 8003f04:	4619      	mov	r1, r3
 8003f06:	f7fd fce5 	bl	80018d4 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b298      	uxth	r0, r3
 8003f10:	88bb      	ldrh	r3, [r7, #4]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	887a      	ldrh	r2, [r7, #2]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	f7fd fcdb 	bl	80018d4 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 8003f1e:	88f8      	ldrh	r0, [r7, #6]
 8003f20:	88b9      	ldrh	r1, [r7, #4]
 8003f22:	887a      	ldrh	r2, [r7, #2]
 8003f24:	2300      	movs	r3, #0
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	2306      	movs	r3, #6
 8003f2a:	f7fe f84e 	bl	8001fca <lcd_DrawCircle>
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd90      	pop	{r4, r7, pc}
	...

08003f38 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 8003f42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f46:	4843      	ldr	r0, [pc, #268]	@ (8004054 <TP_Scan+0x11c>)
 8003f48:	f001 fd8a 	bl	8005a60 <HAL_GPIO_ReadPin>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d157      	bne.n	8004002 <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d004      	beq.n	8003f62 <TP_Scan+0x2a>
 8003f58:	493f      	ldr	r1, [pc, #252]	@ (8004058 <TP_Scan+0x120>)
 8003f5a:	4840      	ldr	r0, [pc, #256]	@ (800405c <TP_Scan+0x124>)
 8003f5c:	f7ff ff32 	bl	8003dc4 <TP_Read_XY2>
 8003f60:	e03c      	b.n	8003fdc <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 8003f62:	493d      	ldr	r1, [pc, #244]	@ (8004058 <TP_Scan+0x120>)
 8003f64:	483d      	ldr	r0, [pc, #244]	@ (800405c <TP_Scan+0x124>)
 8003f66:	f7ff ff2d 	bl	8003dc4 <TP_Read_XY2>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d035      	beq.n	8003fdc <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 8003f70:	4b3b      	ldr	r3, [pc, #236]	@ (8004060 <TP_Scan+0x128>)
 8003f72:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003f76:	4b3a      	ldr	r3, [pc, #232]	@ (8004060 <TP_Scan+0x128>)
 8003f78:	899b      	ldrh	r3, [r3, #12]
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f86:	4b36      	ldr	r3, [pc, #216]	@ (8004060 <TP_Scan+0x128>)
 8003f88:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8003f8c:	ee07 3a90 	vmov	s15, r3
 8003f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f9c:	ee17 3a90 	vmov	r3, s15
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	4b2f      	ldr	r3, [pc, #188]	@ (8004060 <TP_Scan+0x128>)
 8003fa4:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 8003fa6:	4b2e      	ldr	r3, [pc, #184]	@ (8004060 <TP_Scan+0x128>)
 8003fa8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003fac:	4b2c      	ldr	r3, [pc, #176]	@ (8004060 <TP_Scan+0x128>)
 8003fae:	8adb      	ldrh	r3, [r3, #22]
 8003fb0:	ee07 3a90 	vmov	s15, r3
 8003fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fbc:	4b28      	ldr	r3, [pc, #160]	@ (8004060 <TP_Scan+0x128>)
 8003fbe:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd2:	ee17 3a90 	vmov	r3, s15
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	4b21      	ldr	r3, [pc, #132]	@ (8004060 <TP_Scan+0x128>)
 8003fda:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 8003fdc:	4b20      	ldr	r3, [pc, #128]	@ (8004060 <TP_Scan+0x128>)
 8003fde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fe2:	b25b      	sxtb	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	db2a      	blt.n	800403e <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8004060 <TP_Scan+0x128>)
 8003fea:	22c0      	movs	r2, #192	@ 0xc0
 8003fec:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8004060 <TP_Scan+0x128>)
 8003ff2:	899a      	ldrh	r2, [r3, #12]
 8003ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8004060 <TP_Scan+0x128>)
 8003ff6:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 8003ff8:	4b19      	ldr	r3, [pc, #100]	@ (8004060 <TP_Scan+0x128>)
 8003ffa:	8ada      	ldrh	r2, [r3, #22]
 8003ffc:	4b18      	ldr	r3, [pc, #96]	@ (8004060 <TP_Scan+0x128>)
 8003ffe:	83da      	strh	r2, [r3, #30]
 8004000:	e01d      	b.n	800403e <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 8004002:	4b17      	ldr	r3, [pc, #92]	@ (8004060 <TP_Scan+0x128>)
 8004004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004008:	b25b      	sxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	da09      	bge.n	8004022 <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 800400e:	4b14      	ldr	r3, [pc, #80]	@ (8004060 <TP_Scan+0x128>)
 8004010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004014:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004018:	b2da      	uxtb	r2, r3
 800401a:	4b11      	ldr	r3, [pc, #68]	@ (8004060 <TP_Scan+0x128>)
 800401c:	f883 2020 	strb.w	r2, [r3, #32]
 8004020:	e00d      	b.n	800403e <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 8004022:	4b0f      	ldr	r3, [pc, #60]	@ (8004060 <TP_Scan+0x128>)
 8004024:	2200      	movs	r2, #0
 8004026:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8004028:	4b0d      	ldr	r3, [pc, #52]	@ (8004060 <TP_Scan+0x128>)
 800402a:	2200      	movs	r2, #0
 800402c:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 800402e:	4b0c      	ldr	r3, [pc, #48]	@ (8004060 <TP_Scan+0x128>)
 8004030:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004034:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8004036:	4b0a      	ldr	r3, [pc, #40]	@ (8004060 <TP_Scan+0x128>)
 8004038:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800403c:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 800403e:	4b08      	ldr	r3, [pc, #32]	@ (8004060 <TP_Scan+0x128>)
 8004040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004044:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004048:	b2db      	uxtb	r3, r3
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40020800 	.word	0x40020800
 8004058:	2000002e 	.word	0x2000002e
 800405c:	20000024 	.word	0x20000024
 8004060:	20000018 	.word	0x20000018

08004064 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8004068:	220e      	movs	r2, #14
 800406a:	4905      	ldr	r1, [pc, #20]	@ (8004080 <TP_Save_Adjdata+0x1c>)
 800406c:	2000      	movs	r0, #0
 800406e:	f7fd f8a3 	bl	80011b8 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 8004072:	2100      	movs	r1, #0
 8004074:	200e      	movs	r0, #14
 8004076:	f7fd f83f 	bl	80010f8 <at24c_WriteOneByte>
}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	2000003c 	.word	0x2000003c

08004084 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 800408e:	200e      	movs	r0, #14
 8004090:	f7fd f816 	bl	80010c0 <at24c_ReadOneByte>
 8004094:	4603      	mov	r3, r0
 8004096:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 800409e:	220e      	movs	r2, #14
 80040a0:	4905      	ldr	r1, [pc, #20]	@ (80040b8 <TP_Get_Adjdata+0x34>)
 80040a2:	2000      	movs	r0, #0
 80040a4:	f7fd f869 	bl	800117a <at24c_Read>
		return 1;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e000      	b.n	80040ae <TP_Get_Adjdata+0x2a>
	}
	return 0;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	2000003c 	.word	0x2000003c
 80040bc:	00000000 	.word	0x00000000

080040c0 <touch_Adjust>:


void touch_Adjust(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08e      	sub	sp, #56	@ 0x38
 80040c4:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 80040d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004250 <touch_Adjust+0x190>)
 80040d4:	881a      	ldrh	r2, [r3, #0]
 80040d6:	4b5e      	ldr	r3, [pc, #376]	@ (8004250 <touch_Adjust+0x190>)
 80040d8:	885b      	ldrh	r3, [r3, #2]
 80040da:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80040de:	9100      	str	r1, [sp, #0]
 80040e0:	2100      	movs	r1, #0
 80040e2:	2000      	movs	r0, #0
 80040e4:	f7fd fbc0 	bl	8001868 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 80040e8:	2300      	movs	r3, #0
 80040ea:	9302      	str	r3, [sp, #8]
 80040ec:	2310      	movs	r3, #16
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80040fa:	4a56      	ldr	r2, [pc, #344]	@ (8004254 <touch_Adjust+0x194>)
 80040fc:	2128      	movs	r1, #40	@ 0x28
 80040fe:	2005      	movs	r0, #5
 8004100:	f7fd ffd0 	bl	80020a4 <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 8004104:	2300      	movs	r3, #0
 8004106:	9302      	str	r3, [sp, #8]
 8004108:	2310      	movs	r3, #16
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004116:	4a50      	ldr	r2, [pc, #320]	@ (8004258 <touch_Adjust+0x198>)
 8004118:	2141      	movs	r1, #65	@ 0x41
 800411a:	2005      	movs	r0, #5
 800411c:	f7fd ffc2 	bl	80020a4 <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8004120:	2300      	movs	r3, #0
 8004122:	9302      	str	r3, [sp, #8]
 8004124:	2310      	movs	r3, #16
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004132:	4a4a      	ldr	r2, [pc, #296]	@ (800425c <touch_Adjust+0x19c>)
 8004134:	215a      	movs	r1, #90	@ 0x5a
 8004136:	2005      	movs	r0, #5
 8004138:	f7fd ffb4 	bl	80020a4 <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 800413c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004140:	2114      	movs	r1, #20
 8004142:	2014      	movs	r0, #20
 8004144:	f7ff fea0 	bl	8003e88 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8004148:	4b45      	ldr	r3, [pc, #276]	@ (8004260 <touch_Adjust+0x1a0>)
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8004150:	4b43      	ldr	r3, [pc, #268]	@ (8004260 <touch_Adjust+0x1a0>)
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	625a      	str	r2, [r3, #36]	@ 0x24
	while(1)
	{
		HAL_Delay(50);
 8004158:	2032      	movs	r0, #50	@ 0x32
 800415a:	f000 fc63 	bl	8004a24 <HAL_Delay>
		tp_dev.scan(1);
 800415e:	4b40      	ldr	r3, [pc, #256]	@ (8004260 <touch_Adjust+0x1a0>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2001      	movs	r0, #1
 8004164:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 8004166:	4b3e      	ldr	r3, [pc, #248]	@ (8004260 <touch_Adjust+0x1a0>)
 8004168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800416c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004170:	2b40      	cmp	r3, #64	@ 0x40
 8004172:	d1f1      	bne.n	8004158 <touch_Adjust+0x98>
		{
			tp_dev.sta&=~(1<<6);
 8004174:	4b3a      	ldr	r3, [pc, #232]	@ (8004260 <touch_Adjust+0x1a0>)
 8004176:	f893 3020 	ldrb.w	r3, [r3, #32]
 800417a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800417e:	b2da      	uxtb	r2, r3
 8004180:	4b37      	ldr	r3, [pc, #220]	@ (8004260 <touch_Adjust+0x1a0>)
 8004182:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 8004186:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800418a:	4a35      	ldr	r2, [pc, #212]	@ (8004260 <touch_Adjust+0x1a0>)
 800418c:	8992      	ldrh	r2, [r2, #12]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	3328      	adds	r3, #40	@ 0x28
 8004192:	443b      	add	r3, r7
 8004194:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 8004198:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800419c:	4a30      	ldr	r2, [pc, #192]	@ (8004260 <touch_Adjust+0x1a0>)
 800419e:	8ad2      	ldrh	r2, [r2, #22]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	3328      	adds	r3, #40	@ 0x28
 80041a4:	443b      	add	r3, r7
 80041a6:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 80041aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041ae:	3301      	adds	r3, #1
 80041b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			switch(cnt)
 80041b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041b8:	3b01      	subs	r3, #1
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d8cc      	bhi.n	8004158 <touch_Adjust+0x98>
 80041be:	a201      	add	r2, pc, #4	@ (adr r2, 80041c4 <touch_Adjust+0x104>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	080041d5 	.word	0x080041d5
 80041c8:	080041f7 	.word	0x080041f7
 80041cc:	08004221 	.word	0x08004221
 80041d0:	08004265 	.word	0x08004265
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 80041d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041d8:	2114      	movs	r1, #20
 80041da:	2014      	movs	r0, #20
 80041dc:	f7ff fe54 	bl	8003e88 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 80041e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004250 <touch_Adjust+0x190>)
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	3b14      	subs	r3, #20
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80041ec:	2114      	movs	r1, #20
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff fe4a 	bl	8003e88 <TP_Drow_Touch_Point>
					break;
 80041f4:	e319      	b.n	800482a <touch_Adjust+0x76a>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 80041f6:	4b16      	ldr	r3, [pc, #88]	@ (8004250 <touch_Adjust+0x190>)
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	3b14      	subs	r3, #20
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004202:	2114      	movs	r1, #20
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fe3f 	bl	8003e88 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 800420a:	4b11      	ldr	r3, [pc, #68]	@ (8004250 <touch_Adjust+0x190>)
 800420c:	885b      	ldrh	r3, [r3, #2]
 800420e:	3b14      	subs	r3, #20
 8004210:	b29b      	uxth	r3, r3
 8004212:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004216:	4619      	mov	r1, r3
 8004218:	2014      	movs	r0, #20
 800421a:	f7ff fe35 	bl	8003e88 <TP_Drow_Touch_Point>
					break;
 800421e:	e304      	b.n	800482a <touch_Adjust+0x76a>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8004220:	4b0b      	ldr	r3, [pc, #44]	@ (8004250 <touch_Adjust+0x190>)
 8004222:	885b      	ldrh	r3, [r3, #2]
 8004224:	3b14      	subs	r3, #20
 8004226:	b29b      	uxth	r3, r3
 8004228:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800422c:	4619      	mov	r1, r3
 800422e:	2014      	movs	r0, #20
 8004230:	f7ff fe2a 	bl	8003e88 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 8004234:	4b06      	ldr	r3, [pc, #24]	@ (8004250 <touch_Adjust+0x190>)
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	3b14      	subs	r3, #20
 800423a:	b298      	uxth	r0, r3
 800423c:	4b04      	ldr	r3, [pc, #16]	@ (8004250 <touch_Adjust+0x190>)
 800423e:	885b      	ldrh	r3, [r3, #2]
 8004240:	3b14      	subs	r3, #20
 8004242:	b29b      	uxth	r3, r3
 8004244:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004248:	4619      	mov	r1, r3
 800424a:	f7ff fe1d 	bl	8003e88 <TP_Drow_Touch_Point>
					break;
 800424e:	e2ec      	b.n	800482a <touch_Adjust+0x76a>
 8004250:	20000234 	.word	0x20000234
 8004254:	08009c44 	.word	0x08009c44
 8004258:	08009c60 	.word	0x08009c60
 800425c:	08009c78 	.word	0x08009c78
 8004260:	20000018 	.word	0x20000018
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 8004264:	883b      	ldrh	r3, [r7, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	88bb      	ldrh	r3, [r7, #4]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	bfb8      	it	lt
 8004270:	425b      	neglt	r3, r3
 8004272:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 8004274:	887b      	ldrh	r3, [r7, #2]
 8004276:	461a      	mov	r2, r3
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	bfb8      	it	lt
 8004280:	425b      	neglt	r3, r3
 8004282:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	fb03 f303 	mul.w	r3, r3, r3
 800428a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	fb03 f303 	mul.w	r3, r3, r3
 8004292:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8004294:	6a3a      	ldr	r2, [r7, #32]
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	4413      	add	r3, r2
 800429a:	4618      	mov	r0, r3
 800429c:	f7fc f92a 	bl	80004f4 <__aeabi_ui2d>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	ec43 2b10 	vmov	d0, r2, r3
 80042a8:	f005 fbb6 	bl	8009a18 <sqrt>
 80042ac:	ec53 2b10 	vmov	r2, r3, d0
 80042b0:	4610      	mov	r0, r2
 80042b2:	4619      	mov	r1, r3
 80042b4:	f7fc fc48 	bl	8000b48 <__aeabi_d2uiz>
 80042b8:	4603      	mov	r3, r0
 80042ba:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 80042bc:	893b      	ldrh	r3, [r7, #8]
 80042be:	461a      	mov	r2, r3
 80042c0:	89bb      	ldrh	r3, [r7, #12]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	bfb8      	it	lt
 80042c8:	425b      	neglt	r3, r3
 80042ca:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 80042cc:	897b      	ldrh	r3, [r7, #10]
 80042ce:	461a      	mov	r2, r3
 80042d0:	89fb      	ldrh	r3, [r7, #14]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bfb8      	it	lt
 80042d8:	425b      	neglt	r3, r3
 80042da:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	fb03 f303 	mul.w	r3, r3, r3
 80042e2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	fb03 f303 	mul.w	r3, r3, r3
 80042ea:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80042ec:	6a3a      	ldr	r2, [r7, #32]
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	4413      	add	r3, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fc f8fe 	bl	80004f4 <__aeabi_ui2d>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	ec43 2b10 	vmov	d0, r2, r3
 8004300:	f005 fb8a 	bl	8009a18 <sqrt>
 8004304:	ec53 2b10 	vmov	r2, r3, d0
 8004308:	4610      	mov	r0, r2
 800430a:	4619      	mov	r1, r3
 800430c:	f7fc fc1c 	bl	8000b48 <__aeabi_d2uiz>
 8004310:	4603      	mov	r3, r0
 8004312:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8004314:	8b7b      	ldrh	r3, [r7, #26]
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800431e:	8b3b      	ldrh	r3, [r7, #24]
 8004320:	ee07 3a90 	vmov	s15, r3
 8004324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004328:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800432c:	ee16 0a90 	vmov	r0, s13
 8004330:	f7fc f902 	bl	8000538 <__aeabi_f2d>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 800433c:	a384      	add	r3, pc, #528	@ (adr r3, 8004550 <touch_Adjust+0x490>)
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004346:	f7fc fbc1 	bl	8000acc <__aeabi_dcmplt>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10f      	bne.n	8004370 <touch_Adjust+0x2b0>
 8004350:	a381      	add	r3, pc, #516	@ (adr r3, 8004558 <touch_Adjust+0x498>)
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800435a:	f7fc fbd5 	bl	8000b08 <__aeabi_dcmpgt>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <touch_Adjust+0x2b0>
 8004364:	8b7b      	ldrh	r3, [r7, #26]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <touch_Adjust+0x2b0>
 800436a:	8b3b      	ldrh	r3, [r7, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d136      	bne.n	80043de <touch_Adjust+0x31e>
					{
						cnt=0;
 8004370:	2300      	movs	r3, #0
 8004372:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8004376:	4b7a      	ldr	r3, [pc, #488]	@ (8004560 <touch_Adjust+0x4a0>)
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	3b14      	subs	r3, #20
 800437c:	b298      	uxth	r0, r3
 800437e:	4b78      	ldr	r3, [pc, #480]	@ (8004560 <touch_Adjust+0x4a0>)
 8004380:	885b      	ldrh	r3, [r3, #2]
 8004382:	3b14      	subs	r3, #20
 8004384:	b29b      	uxth	r3, r3
 8004386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800438a:	4619      	mov	r1, r3
 800438c:	f7ff fd7c 	bl	8003e88 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8004390:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004394:	2114      	movs	r1, #20
 8004396:	2014      	movs	r0, #20
 8004398:	f7ff fd76 	bl	8003e88 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 800439c:	2300      	movs	r3, #0
 800439e:	9302      	str	r3, [sp, #8]
 80043a0:	2310      	movs	r3, #16
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80043ae:	4a6d      	ldr	r2, [pc, #436]	@ (8004564 <touch_Adjust+0x4a4>)
 80043b0:	2128      	movs	r1, #40	@ 0x28
 80043b2:	2005      	movs	r0, #5
 80043b4:	f7fd fe76 	bl	80020a4 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 80043b8:	2300      	movs	r3, #0
 80043ba:	9302      	str	r3, [sp, #8]
 80043bc:	2310      	movs	r3, #16
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80043ca:	4a67      	ldr	r2, [pc, #412]	@ (8004568 <touch_Adjust+0x4a8>)
 80043cc:	213c      	movs	r1, #60	@ 0x3c
 80043ce:	2005      	movs	r0, #5
 80043d0:	f7fd fe68 	bl	80020a4 <lcd_ShowStr>
						HAL_Delay(1000);
 80043d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80043d8:	f000 fb24 	bl	8004a24 <HAL_Delay>
 						continue;
 80043dc:	e225      	b.n	800482a <touch_Adjust+0x76a>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 80043de:	883b      	ldrh	r3, [r7, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	893b      	ldrh	r3, [r7, #8]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	bfb8      	it	lt
 80043ea:	425b      	neglt	r3, r3
 80043ec:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 80043ee:	887b      	ldrh	r3, [r7, #2]
 80043f0:	461a      	mov	r2, r3
 80043f2:	897b      	ldrh	r3, [r7, #10]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	bfb8      	it	lt
 80043fa:	425b      	neglt	r3, r3
 80043fc:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	fb03 f303 	mul.w	r3, r3, r3
 8004404:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	fb03 f303 	mul.w	r3, r3, r3
 800440c:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 800440e:	6a3a      	ldr	r2, [r7, #32]
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	4413      	add	r3, r2
 8004414:	4618      	mov	r0, r3
 8004416:	f7fc f86d 	bl	80004f4 <__aeabi_ui2d>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	ec43 2b10 	vmov	d0, r2, r3
 8004422:	f005 faf9 	bl	8009a18 <sqrt>
 8004426:	ec53 2b10 	vmov	r2, r3, d0
 800442a:	4610      	mov	r0, r2
 800442c:	4619      	mov	r1, r3
 800442e:	f7fc fb8b 	bl	8000b48 <__aeabi_d2uiz>
 8004432:	4603      	mov	r3, r0
 8004434:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8004436:	88bb      	ldrh	r3, [r7, #4]
 8004438:	461a      	mov	r2, r3
 800443a:	89bb      	ldrh	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	bfb8      	it	lt
 8004442:	425b      	neglt	r3, r3
 8004444:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	461a      	mov	r2, r3
 800444a:	89fb      	ldrh	r3, [r7, #14]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	bfb8      	it	lt
 8004452:	425b      	neglt	r3, r3
 8004454:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	fb03 f303 	mul.w	r3, r3, r3
 800445c:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	fb03 f303 	mul.w	r3, r3, r3
 8004464:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8004466:	6a3a      	ldr	r2, [r7, #32]
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	4413      	add	r3, r2
 800446c:	4618      	mov	r0, r3
 800446e:	f7fc f841 	bl	80004f4 <__aeabi_ui2d>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	ec43 2b10 	vmov	d0, r2, r3
 800447a:	f005 facd 	bl	8009a18 <sqrt>
 800447e:	ec53 2b10 	vmov	r2, r3, d0
 8004482:	4610      	mov	r0, r2
 8004484:	4619      	mov	r1, r3
 8004486:	f7fc fb5f 	bl	8000b48 <__aeabi_d2uiz>
 800448a:	4603      	mov	r3, r0
 800448c:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 800448e:	8b7b      	ldrh	r3, [r7, #26]
 8004490:	ee07 3a90 	vmov	s15, r3
 8004494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004498:	8b3b      	ldrh	r3, [r7, #24]
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80044a6:	ee16 0a90 	vmov	r0, s13
 80044aa:	f7fc f845 	bl	8000538 <__aeabi_f2d>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 80044b6:	a326      	add	r3, pc, #152	@ (adr r3, 8004550 <touch_Adjust+0x490>)
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044c0:	f7fc fb04 	bl	8000acc <__aeabi_dcmplt>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d109      	bne.n	80044de <touch_Adjust+0x41e>
 80044ca:	a323      	add	r3, pc, #140	@ (adr r3, 8004558 <touch_Adjust+0x498>)
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044d4:	f7fc fb18 	bl	8000b08 <__aeabi_dcmpgt>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d046      	beq.n	800456c <touch_Adjust+0x4ac>
					{
						cnt=0;
 80044de:	2300      	movs	r3, #0
 80044e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80044e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004560 <touch_Adjust+0x4a0>)
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	3b14      	subs	r3, #20
 80044ea:	b298      	uxth	r0, r3
 80044ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004560 <touch_Adjust+0x4a0>)
 80044ee:	885b      	ldrh	r3, [r3, #2]
 80044f0:	3b14      	subs	r3, #20
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044f8:	4619      	mov	r1, r3
 80044fa:	f7ff fcc5 	bl	8003e88 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80044fe:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004502:	2114      	movs	r1, #20
 8004504:	2014      	movs	r0, #20
 8004506:	f7ff fcbf 	bl	8003e88 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 800450a:	2300      	movs	r3, #0
 800450c:	9302      	str	r3, [sp, #8]
 800450e:	2310      	movs	r3, #16
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800451c:	4a11      	ldr	r2, [pc, #68]	@ (8004564 <touch_Adjust+0x4a4>)
 800451e:	2128      	movs	r1, #40	@ 0x28
 8004520:	2005      	movs	r0, #5
 8004522:	f7fd fdbf 	bl	80020a4 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8004526:	2300      	movs	r3, #0
 8004528:	9302      	str	r3, [sp, #8]
 800452a:	2310      	movs	r3, #16
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004538:	4a0b      	ldr	r2, [pc, #44]	@ (8004568 <touch_Adjust+0x4a8>)
 800453a:	213c      	movs	r1, #60	@ 0x3c
 800453c:	2005      	movs	r0, #5
 800453e:	f7fd fdb1 	bl	80020a4 <lcd_ShowStr>
						HAL_Delay(1000);
 8004542:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004546:	f000 fa6d 	bl	8004a24 <HAL_Delay>
						continue;
 800454a:	e16e      	b.n	800482a <touch_Adjust+0x76a>
 800454c:	f3af 8000 	nop.w
 8004550:	66666666 	.word	0x66666666
 8004554:	3fee6666 	.word	0x3fee6666
 8004558:	cccccccd 	.word	0xcccccccd
 800455c:	3ff0cccc 	.word	0x3ff0cccc
 8004560:	20000234 	.word	0x20000234
 8004564:	08009c8c 	.word	0x08009c8c
 8004568:	08009cac 	.word	0x08009cac
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 800456c:	88bb      	ldrh	r3, [r7, #4]
 800456e:	461a      	mov	r2, r3
 8004570:	893b      	ldrh	r3, [r7, #8]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	bfb8      	it	lt
 8004578:	425b      	neglt	r3, r3
 800457a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 800457c:	88fb      	ldrh	r3, [r7, #6]
 800457e:	461a      	mov	r2, r3
 8004580:	897b      	ldrh	r3, [r7, #10]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	bfb8      	it	lt
 8004588:	425b      	neglt	r3, r3
 800458a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	fb03 f303 	mul.w	r3, r3, r3
 8004592:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	fb03 f303 	mul.w	r3, r3, r3
 800459a:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 800459c:	6a3a      	ldr	r2, [r7, #32]
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	4413      	add	r3, r2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fb ffa6 	bl	80004f4 <__aeabi_ui2d>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	ec43 2b10 	vmov	d0, r2, r3
 80045b0:	f005 fa32 	bl	8009a18 <sqrt>
 80045b4:	ec53 2b10 	vmov	r2, r3, d0
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	f7fc fac4 	bl	8000b48 <__aeabi_d2uiz>
 80045c0:	4603      	mov	r3, r0
 80045c2:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 80045c4:	883b      	ldrh	r3, [r7, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	89bb      	ldrh	r3, [r7, #12]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	bfb8      	it	lt
 80045d0:	425b      	neglt	r3, r3
 80045d2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 80045d4:	887b      	ldrh	r3, [r7, #2]
 80045d6:	461a      	mov	r2, r3
 80045d8:	89fb      	ldrh	r3, [r7, #14]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	bfb8      	it	lt
 80045e0:	425b      	neglt	r3, r3
 80045e2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	fb03 f303 	mul.w	r3, r3, r3
 80045ea:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	fb03 f303 	mul.w	r3, r3, r3
 80045f2:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80045f4:	6a3a      	ldr	r2, [r7, #32]
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fb ff7a 	bl	80004f4 <__aeabi_ui2d>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	ec43 2b10 	vmov	d0, r2, r3
 8004608:	f005 fa06 	bl	8009a18 <sqrt>
 800460c:	ec53 2b10 	vmov	r2, r3, d0
 8004610:	4610      	mov	r0, r2
 8004612:	4619      	mov	r1, r3
 8004614:	f7fc fa98 	bl	8000b48 <__aeabi_d2uiz>
 8004618:	4603      	mov	r3, r0
 800461a:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 800461c:	8b7b      	ldrh	r3, [r7, #26]
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004626:	8b3b      	ldrh	r3, [r7, #24]
 8004628:	ee07 3a90 	vmov	s15, r3
 800462c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004630:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004634:	ee16 0a90 	vmov	r0, s13
 8004638:	f7fb ff7e 	bl	8000538 <__aeabi_f2d>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8004644:	a383      	add	r3, pc, #524	@ (adr r3, 8004854 <touch_Adjust+0x794>)
 8004646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800464e:	f7fc fa3d 	bl	8000acc <__aeabi_dcmplt>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d109      	bne.n	800466c <touch_Adjust+0x5ac>
 8004658:	a380      	add	r3, pc, #512	@ (adr r3, 800485c <touch_Adjust+0x79c>)
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004662:	f7fc fa51 	bl	8000b08 <__aeabi_dcmpgt>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d036      	beq.n	80046da <touch_Adjust+0x61a>
					{
						cnt=0;
 800466c:	2300      	movs	r3, #0
 800466e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8004672:	4b71      	ldr	r3, [pc, #452]	@ (8004838 <touch_Adjust+0x778>)
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	3b14      	subs	r3, #20
 8004678:	b298      	uxth	r0, r3
 800467a:	4b6f      	ldr	r3, [pc, #444]	@ (8004838 <touch_Adjust+0x778>)
 800467c:	885b      	ldrh	r3, [r3, #2]
 800467e:	3b14      	subs	r3, #20
 8004680:	b29b      	uxth	r3, r3
 8004682:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004686:	4619      	mov	r1, r3
 8004688:	f7ff fbfe 	bl	8003e88 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 800468c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004690:	2114      	movs	r1, #20
 8004692:	2014      	movs	r0, #20
 8004694:	f7ff fbf8 	bl	8003e88 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8004698:	2300      	movs	r3, #0
 800469a:	9302      	str	r3, [sp, #8]
 800469c:	2310      	movs	r3, #16
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80046aa:	4a64      	ldr	r2, [pc, #400]	@ (800483c <touch_Adjust+0x77c>)
 80046ac:	2128      	movs	r1, #40	@ 0x28
 80046ae:	2005      	movs	r0, #5
 80046b0:	f7fd fcf8 	bl	80020a4 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 80046b4:	2300      	movs	r3, #0
 80046b6:	9302      	str	r3, [sp, #8]
 80046b8:	2310      	movs	r3, #16
 80046ba:	9301      	str	r3, [sp, #4]
 80046bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80046c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004840 <touch_Adjust+0x780>)
 80046c8:	213c      	movs	r1, #60	@ 0x3c
 80046ca:	2005      	movs	r0, #5
 80046cc:	f7fd fcea 	bl	80020a4 <lcd_ShowStr>

						HAL_Delay(1000);
 80046d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80046d4:	f000 f9a6 	bl	8004a24 <HAL_Delay>
 							continue;
 80046d8:	e0a7      	b.n	800482a <touch_Adjust+0x76a>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 80046da:	4b57      	ldr	r3, [pc, #348]	@ (8004838 <touch_Adjust+0x778>)
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	3b28      	subs	r3, #40	@ 0x28
 80046e0:	ee07 3a90 	vmov	s15, r3
 80046e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80046e8:	88bb      	ldrh	r3, [r7, #4]
 80046ea:	461a      	mov	r2, r3
 80046ec:	883b      	ldrh	r3, [r7, #0]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	ee07 3a90 	vmov	s15, r3
 80046f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046fc:	4b51      	ldr	r3, [pc, #324]	@ (8004844 <touch_Adjust+0x784>)
 80046fe:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8004702:	4b4d      	ldr	r3, [pc, #308]	@ (8004838 <touch_Adjust+0x778>)
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800470e:	4b4d      	ldr	r3, [pc, #308]	@ (8004844 <touch_Adjust+0x784>)
 8004710:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8004714:	88bb      	ldrh	r3, [r7, #4]
 8004716:	461a      	mov	r2, r3
 8004718:	883b      	ldrh	r3, [r7, #0]
 800471a:	4413      	add	r3, r2
 800471c:	ee07 3a90 	vmov	s15, r3
 8004720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004728:	ee37 7a67 	vsub.f32	s14, s14, s15
 800472c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004730:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004734:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004738:	ee17 3a90 	vmov	r3, s15
 800473c:	b21a      	sxth	r2, r3
 800473e:	4b41      	ldr	r3, [pc, #260]	@ (8004844 <touch_Adjust+0x784>)
 8004740:	859a      	strh	r2, [r3, #44]	@ 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 8004742:	4b3d      	ldr	r3, [pc, #244]	@ (8004838 <touch_Adjust+0x778>)
 8004744:	885b      	ldrh	r3, [r3, #2]
 8004746:	3b28      	subs	r3, #40	@ 0x28
 8004748:	ee07 3a90 	vmov	s15, r3
 800474c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004750:	897b      	ldrh	r3, [r7, #10]
 8004752:	461a      	mov	r2, r3
 8004754:	887b      	ldrh	r3, [r7, #2]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	ee07 3a90 	vmov	s15, r3
 800475c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004764:	4b37      	ldr	r3, [pc, #220]	@ (8004844 <touch_Adjust+0x784>)
 8004766:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 800476a:	4b33      	ldr	r3, [pc, #204]	@ (8004838 <touch_Adjust+0x778>)
 800476c:	885b      	ldrh	r3, [r3, #2]
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004776:	4b33      	ldr	r3, [pc, #204]	@ (8004844 <touch_Adjust+0x784>)
 8004778:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800477c:	897b      	ldrh	r3, [r7, #10]
 800477e:	461a      	mov	r2, r3
 8004780:	887b      	ldrh	r3, [r7, #2]
 8004782:	4413      	add	r3, r2
 8004784:	ee07 3a90 	vmov	s15, r3
 8004788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800478c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004790:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004794:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004798:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800479c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047a0:	ee17 3a90 	vmov	r3, s15
 80047a4:	b21a      	sxth	r2, r3
 80047a6:	4b27      	ldr	r3, [pc, #156]	@ (8004844 <touch_Adjust+0x784>)
 80047a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80047aa:	4b23      	ldr	r3, [pc, #140]	@ (8004838 <touch_Adjust+0x778>)
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	3b14      	subs	r3, #20
 80047b0:	b298      	uxth	r0, r3
 80047b2:	4b21      	ldr	r3, [pc, #132]	@ (8004838 <touch_Adjust+0x778>)
 80047b4:	885b      	ldrh	r3, [r3, #2]
 80047b6:	3b14      	subs	r3, #20
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047be:	4619      	mov	r1, r3
 80047c0:	f7ff fb62 	bl	8003e88 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 80047c4:	2300      	movs	r3, #0
 80047c6:	9302      	str	r3, [sp, #8]
 80047c8:	2310      	movs	r3, #16
 80047ca:	9301      	str	r3, [sp, #4]
 80047cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80047d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004848 <touch_Adjust+0x788>)
 80047d8:	2128      	movs	r1, #40	@ 0x28
 80047da:	2005      	movs	r0, #5
 80047dc:	f7fd fc62 	bl	80020a4 <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 80047e0:	2300      	movs	r3, #0
 80047e2:	9302      	str	r3, [sp, #8]
 80047e4:	2310      	movs	r3, #16
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80047f2:	4a16      	ldr	r2, [pc, #88]	@ (800484c <touch_Adjust+0x78c>)
 80047f4:	213c      	movs	r1, #60	@ 0x3c
 80047f6:	2005      	movs	r0, #5
 80047f8:	f7fd fc54 	bl	80020a4 <lcd_ShowStr>
					HAL_Delay(1000);
 80047fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004800:	f000 f910 	bl	8004a24 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 8004804:	2300      	movs	r3, #0
 8004806:	9302      	str	r3, [sp, #8]
 8004808:	2310      	movs	r3, #16
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004816:	4a0e      	ldr	r2, [pc, #56]	@ (8004850 <touch_Adjust+0x790>)
 8004818:	2128      	movs	r1, #40	@ 0x28
 800481a:	2005      	movs	r0, #5
 800481c:	f7fd fc42 	bl	80020a4 <lcd_ShowStr>
					TP_Save_Adjdata();
 8004820:	f7ff fc20 	bl	8004064 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8004824:	f7ff fc2e 	bl	8004084 <TP_Get_Adjdata>
					return;
 8004828:	e000      	b.n	800482c <touch_Adjust+0x76c>
		HAL_Delay(50);
 800482a:	e495      	b.n	8004158 <touch_Adjust+0x98>
			}
		}
 	}
}
 800482c:	3728      	adds	r7, #40	@ 0x28
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	f3af 8000 	nop.w
 8004838:	20000234 	.word	0x20000234
 800483c:	08009c8c 	.word	0x08009c8c
 8004840:	08009cac 	.word	0x08009cac
 8004844:	20000018 	.word	0x20000018
 8004848:	08009ccc 	.word	0x08009ccc
 800484c:	08009cec 	.word	0x08009cec
 8004850:	08009d0c 	.word	0x08009d0c
 8004854:	66666666 	.word	0x66666666
 8004858:	3fee6666 	.word	0x3fee6666
 800485c:	cccccccd 	.word	0xcccccccd
 8004860:	3ff0cccc 	.word	0x3ff0cccc

08004864 <touch_init>:

void touch_init(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 8004868:	4904      	ldr	r1, [pc, #16]	@ (800487c <touch_init+0x18>)
 800486a:	4805      	ldr	r0, [pc, #20]	@ (8004880 <touch_init+0x1c>)
 800486c:	f7ff fa88 	bl	8003d80 <TP_Read_XY>
	at24c_init();
 8004870:	f7fc fc20 	bl	80010b4 <at24c_init>
	TP_Get_Adjdata();
 8004874:	f7ff fc06 	bl	8004084 <TP_Get_Adjdata>
}
 8004878:	bf00      	nop
 800487a:	bd80      	pop	{r7, pc}
 800487c:	2000002e 	.word	0x2000002e
 8004880:	20000024 	.word	0x20000024

08004884 <touch_Scan>:

void touch_Scan(){
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 8004888:	4b02      	ldr	r3, [pc, #8]	@ (8004894 <touch_Scan+0x10>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2000      	movs	r0, #0
 800488e:	4798      	blx	r3
}
 8004890:	bf00      	nop
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20000018 	.word	0x20000018

08004898 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 800489c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80048a0:	4805      	ldr	r0, [pc, #20]	@ (80048b8 <touch_IsTouched+0x20>)
 80048a2:	f001 f8dd 	bl	8005a60 <HAL_GPIO_ReadPin>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	bf0c      	ite	eq
 80048ac:	2301      	moveq	r3, #1
 80048ae:	2300      	movne	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40020800 	.word	0x40020800

080048bc <touch_GetX>:

uint16_t touch_GetX(){
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 80048c0:	4b03      	ldr	r3, [pc, #12]	@ (80048d0 <touch_GetX+0x14>)
 80048c2:	899b      	ldrh	r3, [r3, #12]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	20000018 	.word	0x20000018

080048d4 <touch_GetY>:

uint16_t touch_GetY(){
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 80048d8:	4b03      	ldr	r3, [pc, #12]	@ (80048e8 <touch_GetY+0x14>)
 80048da:	8adb      	ldrh	r3, [r3, #22]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	20000018 	.word	0x20000018

080048ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80048ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004924 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048f0:	480d      	ldr	r0, [pc, #52]	@ (8004928 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80048f2:	490e      	ldr	r1, [pc, #56]	@ (800492c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80048f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80048f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048f8:	e002      	b.n	8004900 <LoopCopyDataInit>

080048fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048fe:	3304      	adds	r3, #4

08004900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004904:	d3f9      	bcc.n	80048fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004906:	4a0b      	ldr	r2, [pc, #44]	@ (8004934 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004908:	4c0b      	ldr	r4, [pc, #44]	@ (8004938 <LoopFillZerobss+0x26>)
  movs r3, #0
 800490a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800490c:	e001      	b.n	8004912 <LoopFillZerobss>

0800490e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800490e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004910:	3204      	adds	r2, #4

08004912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004914:	d3fb      	bcc.n	800490e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004916:	f7fe ff85 	bl	8003824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800491a:	f004 fa37 	bl	8008d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800491e:	f7fd fcb1 	bl	8002284 <main>
  bx  lr    
 8004922:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004924:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800492c:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8004930:	0800cdb4 	.word	0x0800cdb4
  ldr r2, =_sbss
 8004934:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8004938:	200014b4 	.word	0x200014b4

0800493c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800493c:	e7fe      	b.n	800493c <ADC_IRQHandler>
	...

08004940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004944:	4b0e      	ldr	r3, [pc, #56]	@ (8004980 <HAL_Init+0x40>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a0d      	ldr	r2, [pc, #52]	@ (8004980 <HAL_Init+0x40>)
 800494a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800494e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004950:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <HAL_Init+0x40>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a0a      	ldr	r2, [pc, #40]	@ (8004980 <HAL_Init+0x40>)
 8004956:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800495a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800495c:	4b08      	ldr	r3, [pc, #32]	@ (8004980 <HAL_Init+0x40>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a07      	ldr	r2, [pc, #28]	@ (8004980 <HAL_Init+0x40>)
 8004962:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004966:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004968:	2003      	movs	r0, #3
 800496a:	f000 fbb1 	bl	80050d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800496e:	200f      	movs	r0, #15
 8004970:	f000 f808 	bl	8004984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004974:	f7fe fe24 	bl	80035c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40023c00 	.word	0x40023c00

08004984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800498c:	4b12      	ldr	r3, [pc, #72]	@ (80049d8 <HAL_InitTick+0x54>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	4b12      	ldr	r3, [pc, #72]	@ (80049dc <HAL_InitTick+0x58>)
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	4619      	mov	r1, r3
 8004996:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800499a:	fbb3 f3f1 	udiv	r3, r3, r1
 800499e:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fbc9 	bl	800513a <HAL_SYSTICK_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e00e      	b.n	80049d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b0f      	cmp	r3, #15
 80049b6:	d80a      	bhi.n	80049ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049b8:	2200      	movs	r2, #0
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	f04f 30ff 	mov.w	r0, #4294967295
 80049c0:	f000 fb91 	bl	80050e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049c4:	4a06      	ldr	r2, [pc, #24]	@ (80049e0 <HAL_InitTick+0x5c>)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	e000      	b.n	80049d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20000014 	.word	0x20000014
 80049dc:	20000054 	.word	0x20000054
 80049e0:	20000050 	.word	0x20000050

080049e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049e8:	4b06      	ldr	r3, [pc, #24]	@ (8004a04 <HAL_IncTick+0x20>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	4b06      	ldr	r3, [pc, #24]	@ (8004a08 <HAL_IncTick+0x24>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4413      	add	r3, r2
 80049f4:	4a04      	ldr	r2, [pc, #16]	@ (8004a08 <HAL_IncTick+0x24>)
 80049f6:	6013      	str	r3, [r2, #0]
}
 80049f8:	bf00      	nop
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20000054 	.word	0x20000054
 8004a08:	20001364 	.word	0x20001364

08004a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8004a10:	4b03      	ldr	r3, [pc, #12]	@ (8004a20 <HAL_GetTick+0x14>)
 8004a12:	681b      	ldr	r3, [r3, #0]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	20001364 	.word	0x20001364

08004a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a2c:	f7ff ffee 	bl	8004a0c <HAL_GetTick>
 8004a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3c:	d005      	beq.n	8004a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a68 <HAL_Delay+0x44>)
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a4a:	bf00      	nop
 8004a4c:	f7ff ffde 	bl	8004a0c <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d8f7      	bhi.n	8004a4c <HAL_Delay+0x28>
  {
  }
}
 8004a5c:	bf00      	nop
 8004a5e:	bf00      	nop
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000054 	.word	0x20000054

08004a6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e033      	b.n	8004aea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d109      	bne.n	8004a9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7fc fa7e 	bl	8000f8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa2:	f003 0310 	and.w	r3, r3, #16
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d118      	bne.n	8004adc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004ab2:	f023 0302 	bic.w	r3, r3, #2
 8004ab6:	f043 0202 	orr.w	r2, r3, #2
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f93a 	bl	8004d38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	f023 0303 	bic.w	r3, r3, #3
 8004ad2:	f043 0201 	orr.w	r2, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ada:	e001      	b.n	8004ae0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x1c>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e105      	b.n	8004d1c <HAL_ADC_ConfigChannel+0x228>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b09      	cmp	r3, #9
 8004b1e:	d925      	bls.n	8004b6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68d9      	ldr	r1, [r3, #12]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4613      	mov	r3, r2
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	4413      	add	r3, r2
 8004b34:	3b1e      	subs	r3, #30
 8004b36:	2207      	movs	r2, #7
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	43da      	mvns	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	400a      	ands	r2, r1
 8004b44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68d9      	ldr	r1, [r3, #12]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	4618      	mov	r0, r3
 8004b58:	4603      	mov	r3, r0
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	4403      	add	r3, r0
 8004b5e:	3b1e      	subs	r3, #30
 8004b60:	409a      	lsls	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	60da      	str	r2, [r3, #12]
 8004b6a:	e022      	b.n	8004bb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6919      	ldr	r1, [r3, #16]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	4413      	add	r3, r2
 8004b80:	2207      	movs	r2, #7
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43da      	mvns	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	400a      	ands	r2, r1
 8004b8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6919      	ldr	r1, [r3, #16]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	4403      	add	r3, r0
 8004ba8:	409a      	lsls	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b06      	cmp	r3, #6
 8004bb8:	d824      	bhi.n	8004c04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	3b05      	subs	r3, #5
 8004bcc:	221f      	movs	r2, #31
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	43da      	mvns	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	400a      	ands	r2, r1
 8004bda:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	4618      	mov	r0, r3
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	3b05      	subs	r3, #5
 8004bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c02:	e04c      	b.n	8004c9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b0c      	cmp	r3, #12
 8004c0a:	d824      	bhi.n	8004c56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3b23      	subs	r3, #35	@ 0x23
 8004c1e:	221f      	movs	r2, #31
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	43da      	mvns	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	400a      	ands	r2, r1
 8004c2c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	4613      	mov	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	3b23      	subs	r3, #35	@ 0x23
 8004c48:	fa00 f203 	lsl.w	r2, r0, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c54:	e023      	b.n	8004c9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	3b41      	subs	r3, #65	@ 0x41
 8004c68:	221f      	movs	r2, #31
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	43da      	mvns	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	400a      	ands	r2, r1
 8004c76:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	4618      	mov	r0, r3
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	3b41      	subs	r3, #65	@ 0x41
 8004c92:	fa00 f203 	lsl.w	r2, r0, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c9e:	4b22      	ldr	r3, [pc, #136]	@ (8004d28 <HAL_ADC_ConfigChannel+0x234>)
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a21      	ldr	r2, [pc, #132]	@ (8004d2c <HAL_ADC_ConfigChannel+0x238>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d109      	bne.n	8004cc0 <HAL_ADC_ConfigChannel+0x1cc>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b12      	cmp	r3, #18
 8004cb2:	d105      	bne.n	8004cc0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a19      	ldr	r2, [pc, #100]	@ (8004d2c <HAL_ADC_ConfigChannel+0x238>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d123      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x21e>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b10      	cmp	r3, #16
 8004cd0:	d003      	beq.n	8004cda <HAL_ADC_ConfigChannel+0x1e6>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b11      	cmp	r3, #17
 8004cd8:	d11b      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b10      	cmp	r3, #16
 8004cec:	d111      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004cee:	4b10      	ldr	r3, [pc, #64]	@ (8004d30 <HAL_ADC_ConfigChannel+0x23c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a10      	ldr	r2, [pc, #64]	@ (8004d34 <HAL_ADC_ConfigChannel+0x240>)
 8004cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf8:	0c9a      	lsrs	r2, r3, #18
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004d04:	e002      	b.n	8004d0c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f9      	bne.n	8004d06 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	40012300 	.word	0x40012300
 8004d2c:	40012000 	.word	0x40012000
 8004d30:	20000014 	.word	0x20000014
 8004d34:	431bde83 	.word	0x431bde83

08004d38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d40:	4b79      	ldr	r3, [pc, #484]	@ (8004f28 <ADC_Init+0x1f0>)
 8004d42:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6859      	ldr	r1, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	021a      	lsls	r2, r3, #8
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004d90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6859      	ldr	r1, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004db2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6899      	ldr	r1, [r3, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dca:	4a58      	ldr	r2, [pc, #352]	@ (8004f2c <ADC_Init+0x1f4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d022      	beq.n	8004e16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004dde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6899      	ldr	r1, [r3, #8]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004e00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6899      	ldr	r1, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	609a      	str	r2, [r3, #8]
 8004e14:	e00f      	b.n	8004e36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004e34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0202 	bic.w	r2, r2, #2
 8004e44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6899      	ldr	r1, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	7e1b      	ldrb	r3, [r3, #24]
 8004e50:	005a      	lsls	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d01b      	beq.n	8004e9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004e82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6859      	ldr	r1, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	035a      	lsls	r2, r3, #13
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
 8004e9a:	e007      	b.n	8004eac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eaa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004eba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	051a      	lsls	r2, r3, #20
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004ee0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6899      	ldr	r1, [r3, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004eee:	025a      	lsls	r2, r3, #9
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6899      	ldr	r1, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	029a      	lsls	r2, r3, #10
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	609a      	str	r2, [r3, #8]
}
 8004f1c:	bf00      	nop
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	40012300 	.word	0x40012300
 8004f2c:	0f000001 	.word	0x0f000001

08004f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f40:	4b0c      	ldr	r3, [pc, #48]	@ (8004f74 <__NVIC_SetPriorityGrouping+0x44>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f62:	4a04      	ldr	r2, [pc, #16]	@ (8004f74 <__NVIC_SetPriorityGrouping+0x44>)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	60d3      	str	r3, [r2, #12]
}
 8004f68:	bf00      	nop
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	e000ed00 	.word	0xe000ed00

08004f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f7c:	4b04      	ldr	r3, [pc, #16]	@ (8004f90 <__NVIC_GetPriorityGrouping+0x18>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	0a1b      	lsrs	r3, r3, #8
 8004f82:	f003 0307 	and.w	r3, r3, #7
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	e000ed00 	.word	0xe000ed00

08004f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	db0b      	blt.n	8004fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	f003 021f 	and.w	r2, r3, #31
 8004fac:	4907      	ldr	r1, [pc, #28]	@ (8004fcc <__NVIC_EnableIRQ+0x38>)
 8004fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8004fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	e000e100 	.word	0xe000e100

08004fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	6039      	str	r1, [r7, #0]
 8004fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	db0a      	blt.n	8004ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	490c      	ldr	r1, [pc, #48]	@ (800501c <__NVIC_SetPriority+0x4c>)
 8004fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fee:	0112      	lsls	r2, r2, #4
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ff8:	e00a      	b.n	8005010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	4908      	ldr	r1, [pc, #32]	@ (8005020 <__NVIC_SetPriority+0x50>)
 8005000:	79fb      	ldrb	r3, [r7, #7]
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	3b04      	subs	r3, #4
 8005008:	0112      	lsls	r2, r2, #4
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	440b      	add	r3, r1
 800500e:	761a      	strb	r2, [r3, #24]
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	e000e100 	.word	0xe000e100
 8005020:	e000ed00 	.word	0xe000ed00

08005024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005024:	b480      	push	{r7}
 8005026:	b089      	sub	sp, #36	@ 0x24
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	f1c3 0307 	rsb	r3, r3, #7
 800503e:	2b04      	cmp	r3, #4
 8005040:	bf28      	it	cs
 8005042:	2304      	movcs	r3, #4
 8005044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	3304      	adds	r3, #4
 800504a:	2b06      	cmp	r3, #6
 800504c:	d902      	bls.n	8005054 <NVIC_EncodePriority+0x30>
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	3b03      	subs	r3, #3
 8005052:	e000      	b.n	8005056 <NVIC_EncodePriority+0x32>
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005058:	f04f 32ff 	mov.w	r2, #4294967295
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	fa02 f303 	lsl.w	r3, r2, r3
 8005062:	43da      	mvns	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	401a      	ands	r2, r3
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800506c:	f04f 31ff 	mov.w	r1, #4294967295
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	fa01 f303 	lsl.w	r3, r1, r3
 8005076:	43d9      	mvns	r1, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800507c:	4313      	orrs	r3, r2
         );
}
 800507e:	4618      	mov	r0, r3
 8005080:	3724      	adds	r7, #36	@ 0x24
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3b01      	subs	r3, #1
 8005098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800509c:	d301      	bcc.n	80050a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800509e:	2301      	movs	r3, #1
 80050a0:	e00f      	b.n	80050c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050a2:	4a0a      	ldr	r2, [pc, #40]	@ (80050cc <SysTick_Config+0x40>)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050aa:	210f      	movs	r1, #15
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295
 80050b0:	f7ff ff8e 	bl	8004fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050b4:	4b05      	ldr	r3, [pc, #20]	@ (80050cc <SysTick_Config+0x40>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050ba:	4b04      	ldr	r3, [pc, #16]	@ (80050cc <SysTick_Config+0x40>)
 80050bc:	2207      	movs	r2, #7
 80050be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	e000e010 	.word	0xe000e010

080050d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7ff ff29 	bl	8004f30 <__NVIC_SetPriorityGrouping>
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b086      	sub	sp, #24
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	4603      	mov	r3, r0
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	607a      	str	r2, [r7, #4]
 80050f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050f8:	f7ff ff3e 	bl	8004f78 <__NVIC_GetPriorityGrouping>
 80050fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	6978      	ldr	r0, [r7, #20]
 8005104:	f7ff ff8e 	bl	8005024 <NVIC_EncodePriority>
 8005108:	4602      	mov	r2, r0
 800510a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800510e:	4611      	mov	r1, r2
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff ff5d 	bl	8004fd0 <__NVIC_SetPriority>
}
 8005116:	bf00      	nop
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b082      	sub	sp, #8
 8005122:	af00      	add	r7, sp, #0
 8005124:	4603      	mov	r3, r0
 8005126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff ff31 	bl	8004f94 <__NVIC_EnableIRQ>
}
 8005132:	bf00      	nop
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b082      	sub	sp, #8
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7ff ffa2 	bl	800508c <SysTick_Config>
 8005148:	4603      	mov	r3, r0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005160:	f7ff fc54 	bl	8004a0c <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e099      	b.n	80052a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0201 	bic.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005190:	e00f      	b.n	80051b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005192:	f7ff fc3b 	bl	8004a0c <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b05      	cmp	r3, #5
 800519e:	d908      	bls.n	80051b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2203      	movs	r2, #3
 80051aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e078      	b.n	80052a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e8      	bne.n	8005192 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	4b38      	ldr	r3, [pc, #224]	@ (80052ac <HAL_DMA_Init+0x158>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005208:	2b04      	cmp	r3, #4
 800520a:	d107      	bne.n	800521c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005214:	4313      	orrs	r3, r2
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f023 0307 	bic.w	r3, r3, #7
 8005232:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	2b04      	cmp	r3, #4
 8005244:	d117      	bne.n	8005276 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00e      	beq.n	8005276 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f9e9 	bl	8005630 <DMA_CheckFifoParam>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d008      	beq.n	8005276 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2240      	movs	r2, #64	@ 0x40
 8005268:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005272:	2301      	movs	r3, #1
 8005274:	e016      	b.n	80052a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f9a0 	bl	80055c4 <DMA_CalcBaseAndBitshift>
 8005284:	4603      	mov	r3, r0
 8005286:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800528c:	223f      	movs	r2, #63	@ 0x3f
 800528e:	409a      	lsls	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	f010803f 	.word	0xf010803f

080052b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80052bc:	4b8e      	ldr	r3, [pc, #568]	@ (80054f8 <HAL_DMA_IRQHandler+0x248>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a8e      	ldr	r2, [pc, #568]	@ (80054fc <HAL_DMA_IRQHandler+0x24c>)
 80052c2:	fba2 2303 	umull	r2, r3, r2, r3
 80052c6:	0a9b      	lsrs	r3, r3, #10
 80052c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052da:	2208      	movs	r2, #8
 80052dc:	409a      	lsls	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4013      	ands	r3, r2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d01a      	beq.n	800531c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d013      	beq.n	800531c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0204 	bic.w	r2, r2, #4
 8005302:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005308:	2208      	movs	r2, #8
 800530a:	409a      	lsls	r2, r3
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005314:	f043 0201 	orr.w	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005320:	2201      	movs	r2, #1
 8005322:	409a      	lsls	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4013      	ands	r3, r2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d012      	beq.n	8005352 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00b      	beq.n	8005352 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800533e:	2201      	movs	r2, #1
 8005340:	409a      	lsls	r2, r3
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800534a:	f043 0202 	orr.w	r2, r3, #2
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005356:	2204      	movs	r2, #4
 8005358:	409a      	lsls	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4013      	ands	r3, r2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d012      	beq.n	8005388 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00b      	beq.n	8005388 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005374:	2204      	movs	r2, #4
 8005376:	409a      	lsls	r2, r3
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005380:	f043 0204 	orr.w	r2, r3, #4
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800538c:	2210      	movs	r2, #16
 800538e:	409a      	lsls	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4013      	ands	r3, r2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d043      	beq.n	8005420 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d03c      	beq.n	8005420 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053aa:	2210      	movs	r2, #16
 80053ac:	409a      	lsls	r2, r3
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d018      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d108      	bne.n	80053e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d024      	beq.n	8005420 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	4798      	blx	r3
 80053de:	e01f      	b.n	8005420 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01b      	beq.n	8005420 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	4798      	blx	r3
 80053f0:	e016      	b.n	8005420 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d107      	bne.n	8005410 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0208 	bic.w	r2, r2, #8
 800540e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005424:	2220      	movs	r2, #32
 8005426:	409a      	lsls	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4013      	ands	r3, r2
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 808f 	beq.w	8005550 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 8087 	beq.w	8005550 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005446:	2220      	movs	r2, #32
 8005448:	409a      	lsls	r2, r3
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b05      	cmp	r3, #5
 8005458:	d136      	bne.n	80054c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0216 	bic.w	r2, r2, #22
 8005468:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695a      	ldr	r2, [r3, #20]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005478:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d103      	bne.n	800548a <HAL_DMA_IRQHandler+0x1da>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005486:	2b00      	cmp	r3, #0
 8005488:	d007      	beq.n	800549a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0208 	bic.w	r2, r2, #8
 8005498:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800549e:	223f      	movs	r2, #63	@ 0x3f
 80054a0:	409a      	lsls	r2, r3
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d07e      	beq.n	80055bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	4798      	blx	r3
        }
        return;
 80054c6:	e079      	b.n	80055bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d01d      	beq.n	8005512 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10d      	bne.n	8005500 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d031      	beq.n	8005550 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	4798      	blx	r3
 80054f4:	e02c      	b.n	8005550 <HAL_DMA_IRQHandler+0x2a0>
 80054f6:	bf00      	nop
 80054f8:	20000014 	.word	0x20000014
 80054fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005504:	2b00      	cmp	r3, #0
 8005506:	d023      	beq.n	8005550 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	4798      	blx	r3
 8005510:	e01e      	b.n	8005550 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10f      	bne.n	8005540 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0210 	bic.w	r2, r2, #16
 800552e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005554:	2b00      	cmp	r3, #0
 8005556:	d032      	beq.n	80055be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b00      	cmp	r3, #0
 8005562:	d022      	beq.n	80055aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2205      	movs	r2, #5
 8005568:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0201 	bic.w	r2, r2, #1
 800557a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	3301      	adds	r3, #1
 8005580:	60bb      	str	r3, [r7, #8]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	429a      	cmp	r2, r3
 8005586:	d307      	bcc.n	8005598 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f2      	bne.n	800557c <HAL_DMA_IRQHandler+0x2cc>
 8005596:	e000      	b.n	800559a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005598:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	4798      	blx	r3
 80055ba:	e000      	b.n	80055be <HAL_DMA_IRQHandler+0x30e>
        return;
 80055bc:	bf00      	nop
    }
  }
}
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	3b10      	subs	r3, #16
 80055d4:	4a14      	ldr	r2, [pc, #80]	@ (8005628 <DMA_CalcBaseAndBitshift+0x64>)
 80055d6:	fba2 2303 	umull	r2, r3, r2, r3
 80055da:	091b      	lsrs	r3, r3, #4
 80055dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80055de:	4a13      	ldr	r2, [pc, #76]	@ (800562c <DMA_CalcBaseAndBitshift+0x68>)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b03      	cmp	r3, #3
 80055f0:	d909      	bls.n	8005606 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80055fa:	f023 0303 	bic.w	r3, r3, #3
 80055fe:	1d1a      	adds	r2, r3, #4
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	659a      	str	r2, [r3, #88]	@ 0x58
 8005604:	e007      	b.n	8005616 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800560e:	f023 0303 	bic.w	r3, r3, #3
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	aaaaaaab 	.word	0xaaaaaaab
 800562c:	0800ccbc 	.word	0x0800ccbc

08005630 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005640:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d11f      	bne.n	800568a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b03      	cmp	r3, #3
 800564e:	d856      	bhi.n	80056fe <DMA_CheckFifoParam+0xce>
 8005650:	a201      	add	r2, pc, #4	@ (adr r2, 8005658 <DMA_CheckFifoParam+0x28>)
 8005652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005656:	bf00      	nop
 8005658:	08005669 	.word	0x08005669
 800565c:	0800567b 	.word	0x0800567b
 8005660:	08005669 	.word	0x08005669
 8005664:	080056ff 	.word	0x080056ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d046      	beq.n	8005702 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005678:	e043      	b.n	8005702 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005682:	d140      	bne.n	8005706 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005688:	e03d      	b.n	8005706 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005692:	d121      	bne.n	80056d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b03      	cmp	r3, #3
 8005698:	d837      	bhi.n	800570a <DMA_CheckFifoParam+0xda>
 800569a:	a201      	add	r2, pc, #4	@ (adr r2, 80056a0 <DMA_CheckFifoParam+0x70>)
 800569c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a0:	080056b1 	.word	0x080056b1
 80056a4:	080056b7 	.word	0x080056b7
 80056a8:	080056b1 	.word	0x080056b1
 80056ac:	080056c9 	.word	0x080056c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	73fb      	strb	r3, [r7, #15]
      break;
 80056b4:	e030      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d025      	beq.n	800570e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056c6:	e022      	b.n	800570e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056d0:	d11f      	bne.n	8005712 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80056d6:	e01c      	b.n	8005712 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d903      	bls.n	80056e6 <DMA_CheckFifoParam+0xb6>
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d003      	beq.n	80056ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80056e4:	e018      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	73fb      	strb	r3, [r7, #15]
      break;
 80056ea:	e015      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00e      	beq.n	8005716 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
      break;
 80056fc:	e00b      	b.n	8005716 <DMA_CheckFifoParam+0xe6>
      break;
 80056fe:	bf00      	nop
 8005700:	e00a      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
      break;
 8005702:	bf00      	nop
 8005704:	e008      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
      break;
 8005706:	bf00      	nop
 8005708:	e006      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
      break;
 800570a:	bf00      	nop
 800570c:	e004      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
      break;
 800570e:	bf00      	nop
 8005710:	e002      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
      break;   
 8005712:	bf00      	nop
 8005714:	e000      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
      break;
 8005716:	bf00      	nop
    }
  } 
  
  return status; 
 8005718:	7bfb      	ldrb	r3, [r7, #15]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop

08005728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005728:	b480      	push	{r7}
 800572a:	b089      	sub	sp, #36	@ 0x24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005732:	2300      	movs	r3, #0
 8005734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005736:	2300      	movs	r3, #0
 8005738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800573a:	2300      	movs	r3, #0
 800573c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800573e:	2300      	movs	r3, #0
 8005740:	61fb      	str	r3, [r7, #28]
 8005742:	e16b      	b.n	8005a1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005744:	2201      	movs	r2, #1
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	4013      	ands	r3, r2
 8005756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	429a      	cmp	r2, r3
 800575e:	f040 815a 	bne.w	8005a16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	2b01      	cmp	r3, #1
 800576c:	d005      	beq.n	800577a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005776:	2b02      	cmp	r3, #2
 8005778:	d130      	bne.n	80057dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	2203      	movs	r2, #3
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	43db      	mvns	r3, r3
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	4013      	ands	r3, r2
 8005790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	fa02 f303 	lsl.w	r3, r2, r3
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057b0:	2201      	movs	r2, #1
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4013      	ands	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	091b      	lsrs	r3, r3, #4
 80057c6:	f003 0201 	and.w	r2, r3, #1
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d017      	beq.n	8005818 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	2203      	movs	r2, #3
 80057f4:	fa02 f303 	lsl.w	r3, r2, r3
 80057f8:	43db      	mvns	r3, r3
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	4013      	ands	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	4313      	orrs	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d123      	bne.n	800586c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	08da      	lsrs	r2, r3, #3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3208      	adds	r2, #8
 800582c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	220f      	movs	r2, #15
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	43db      	mvns	r3, r3
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4013      	ands	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	4313      	orrs	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	08da      	lsrs	r2, r3, #3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3208      	adds	r2, #8
 8005866:	69b9      	ldr	r1, [r7, #24]
 8005868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	2203      	movs	r2, #3
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	43db      	mvns	r3, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4013      	ands	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f003 0203 	and.w	r2, r3, #3
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	fa02 f303 	lsl.w	r3, r2, r3
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	4313      	orrs	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 80b4 	beq.w	8005a16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ae:	2300      	movs	r3, #0
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	4b60      	ldr	r3, [pc, #384]	@ (8005a34 <HAL_GPIO_Init+0x30c>)
 80058b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b6:	4a5f      	ldr	r2, [pc, #380]	@ (8005a34 <HAL_GPIO_Init+0x30c>)
 80058b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80058be:	4b5d      	ldr	r3, [pc, #372]	@ (8005a34 <HAL_GPIO_Init+0x30c>)
 80058c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058ca:	4a5b      	ldr	r2, [pc, #364]	@ (8005a38 <HAL_GPIO_Init+0x310>)
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	089b      	lsrs	r3, r3, #2
 80058d0:	3302      	adds	r3, #2
 80058d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	220f      	movs	r2, #15
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	43db      	mvns	r3, r3
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	4013      	ands	r3, r2
 80058ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a52      	ldr	r2, [pc, #328]	@ (8005a3c <HAL_GPIO_Init+0x314>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d02b      	beq.n	800594e <HAL_GPIO_Init+0x226>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a51      	ldr	r2, [pc, #324]	@ (8005a40 <HAL_GPIO_Init+0x318>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d025      	beq.n	800594a <HAL_GPIO_Init+0x222>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a50      	ldr	r2, [pc, #320]	@ (8005a44 <HAL_GPIO_Init+0x31c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d01f      	beq.n	8005946 <HAL_GPIO_Init+0x21e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a4f      	ldr	r2, [pc, #316]	@ (8005a48 <HAL_GPIO_Init+0x320>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d019      	beq.n	8005942 <HAL_GPIO_Init+0x21a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a4e      	ldr	r2, [pc, #312]	@ (8005a4c <HAL_GPIO_Init+0x324>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d013      	beq.n	800593e <HAL_GPIO_Init+0x216>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a4d      	ldr	r2, [pc, #308]	@ (8005a50 <HAL_GPIO_Init+0x328>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00d      	beq.n	800593a <HAL_GPIO_Init+0x212>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a4c      	ldr	r2, [pc, #304]	@ (8005a54 <HAL_GPIO_Init+0x32c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d007      	beq.n	8005936 <HAL_GPIO_Init+0x20e>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a4b      	ldr	r2, [pc, #300]	@ (8005a58 <HAL_GPIO_Init+0x330>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d101      	bne.n	8005932 <HAL_GPIO_Init+0x20a>
 800592e:	2307      	movs	r3, #7
 8005930:	e00e      	b.n	8005950 <HAL_GPIO_Init+0x228>
 8005932:	2308      	movs	r3, #8
 8005934:	e00c      	b.n	8005950 <HAL_GPIO_Init+0x228>
 8005936:	2306      	movs	r3, #6
 8005938:	e00a      	b.n	8005950 <HAL_GPIO_Init+0x228>
 800593a:	2305      	movs	r3, #5
 800593c:	e008      	b.n	8005950 <HAL_GPIO_Init+0x228>
 800593e:	2304      	movs	r3, #4
 8005940:	e006      	b.n	8005950 <HAL_GPIO_Init+0x228>
 8005942:	2303      	movs	r3, #3
 8005944:	e004      	b.n	8005950 <HAL_GPIO_Init+0x228>
 8005946:	2302      	movs	r3, #2
 8005948:	e002      	b.n	8005950 <HAL_GPIO_Init+0x228>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <HAL_GPIO_Init+0x228>
 800594e:	2300      	movs	r3, #0
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	f002 0203 	and.w	r2, r2, #3
 8005956:	0092      	lsls	r2, r2, #2
 8005958:	4093      	lsls	r3, r2
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	4313      	orrs	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005960:	4935      	ldr	r1, [pc, #212]	@ (8005a38 <HAL_GPIO_Init+0x310>)
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	089b      	lsrs	r3, r3, #2
 8005966:	3302      	adds	r3, #2
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800596e:	4b3b      	ldr	r3, [pc, #236]	@ (8005a5c <HAL_GPIO_Init+0x334>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	43db      	mvns	r3, r3
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	4013      	ands	r3, r2
 800597c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	4313      	orrs	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005992:	4a32      	ldr	r2, [pc, #200]	@ (8005a5c <HAL_GPIO_Init+0x334>)
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005998:	4b30      	ldr	r3, [pc, #192]	@ (8005a5c <HAL_GPIO_Init+0x334>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	43db      	mvns	r3, r3
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	4013      	ands	r3, r2
 80059a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059bc:	4a27      	ldr	r2, [pc, #156]	@ (8005a5c <HAL_GPIO_Init+0x334>)
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059c2:	4b26      	ldr	r3, [pc, #152]	@ (8005a5c <HAL_GPIO_Init+0x334>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	43db      	mvns	r3, r3
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	4013      	ands	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059e6:	4a1d      	ldr	r2, [pc, #116]	@ (8005a5c <HAL_GPIO_Init+0x334>)
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059ec:	4b1b      	ldr	r3, [pc, #108]	@ (8005a5c <HAL_GPIO_Init+0x334>)
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	43db      	mvns	r3, r3
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	4013      	ands	r3, r2
 80059fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a10:	4a12      	ldr	r2, [pc, #72]	@ (8005a5c <HAL_GPIO_Init+0x334>)
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	61fb      	str	r3, [r7, #28]
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	2b0f      	cmp	r3, #15
 8005a20:	f67f ae90 	bls.w	8005744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a24:	bf00      	nop
 8005a26:	bf00      	nop
 8005a28:	3724      	adds	r7, #36	@ 0x24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40023800 	.word	0x40023800
 8005a38:	40013800 	.word	0x40013800
 8005a3c:	40020000 	.word	0x40020000
 8005a40:	40020400 	.word	0x40020400
 8005a44:	40020800 	.word	0x40020800
 8005a48:	40020c00 	.word	0x40020c00
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	40021400 	.word	0x40021400
 8005a54:	40021800 	.word	0x40021800
 8005a58:	40021c00 	.word	0x40021c00
 8005a5c:	40013c00 	.word	0x40013c00

08005a60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	887b      	ldrh	r3, [r7, #2]
 8005a72:	4013      	ands	r3, r2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	73fb      	strb	r3, [r7, #15]
 8005a7c:	e001      	b.n	8005a82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	807b      	strh	r3, [r7, #2]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005aa0:	787b      	ldrb	r3, [r7, #1]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005aa6:	887a      	ldrh	r2, [r7, #2]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005aac:	e003      	b.n	8005ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005aae:	887b      	ldrh	r3, [r7, #2]
 8005ab0:	041a      	lsls	r2, r3, #16
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	619a      	str	r2, [r3, #24]
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
	...

08005ac4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e12b      	b.n	8005d2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fb fdc4 	bl	8001678 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2224      	movs	r2, #36	@ 0x24
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0201 	bic.w	r2, r2, #1
 8005b06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b28:	f001 fbfc 	bl	8007324 <HAL_RCC_GetPCLK1Freq>
 8005b2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	4a81      	ldr	r2, [pc, #516]	@ (8005d38 <HAL_I2C_Init+0x274>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d807      	bhi.n	8005b48 <HAL_I2C_Init+0x84>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4a80      	ldr	r2, [pc, #512]	@ (8005d3c <HAL_I2C_Init+0x278>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	bf94      	ite	ls
 8005b40:	2301      	movls	r3, #1
 8005b42:	2300      	movhi	r3, #0
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	e006      	b.n	8005b56 <HAL_I2C_Init+0x92>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4a7d      	ldr	r2, [pc, #500]	@ (8005d40 <HAL_I2C_Init+0x27c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	bf94      	ite	ls
 8005b50:	2301      	movls	r3, #1
 8005b52:	2300      	movhi	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e0e7      	b.n	8005d2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	4a78      	ldr	r2, [pc, #480]	@ (8005d44 <HAL_I2C_Init+0x280>)
 8005b62:	fba2 2303 	umull	r2, r3, r2, r3
 8005b66:	0c9b      	lsrs	r3, r3, #18
 8005b68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	4a6a      	ldr	r2, [pc, #424]	@ (8005d38 <HAL_I2C_Init+0x274>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d802      	bhi.n	8005b98 <HAL_I2C_Init+0xd4>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	3301      	adds	r3, #1
 8005b96:	e009      	b.n	8005bac <HAL_I2C_Init+0xe8>
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005b9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ba2:	4a69      	ldr	r2, [pc, #420]	@ (8005d48 <HAL_I2C_Init+0x284>)
 8005ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba8:	099b      	lsrs	r3, r3, #6
 8005baa:	3301      	adds	r3, #1
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	6812      	ldr	r2, [r2, #0]
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005bbe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	495c      	ldr	r1, [pc, #368]	@ (8005d38 <HAL_I2C_Init+0x274>)
 8005bc8:	428b      	cmp	r3, r1
 8005bca:	d819      	bhi.n	8005c00 <HAL_I2C_Init+0x13c>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	1e59      	subs	r1, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bda:	1c59      	adds	r1, r3, #1
 8005bdc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005be0:	400b      	ands	r3, r1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <HAL_I2C_Init+0x138>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	1e59      	subs	r1, r3, #1
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bfa:	e051      	b.n	8005ca0 <HAL_I2C_Init+0x1dc>
 8005bfc:	2304      	movs	r3, #4
 8005bfe:	e04f      	b.n	8005ca0 <HAL_I2C_Init+0x1dc>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d111      	bne.n	8005c2c <HAL_I2C_Init+0x168>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	1e58      	subs	r0, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6859      	ldr	r1, [r3, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	440b      	add	r3, r1
 8005c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	bf0c      	ite	eq
 8005c24:	2301      	moveq	r3, #1
 8005c26:	2300      	movne	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	e012      	b.n	8005c52 <HAL_I2C_Init+0x18e>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	1e58      	subs	r0, r3, #1
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6859      	ldr	r1, [r3, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	440b      	add	r3, r1
 8005c3a:	0099      	lsls	r1, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c42:	3301      	adds	r3, #1
 8005c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	bf0c      	ite	eq
 8005c4c:	2301      	moveq	r3, #1
 8005c4e:	2300      	movne	r3, #0
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <HAL_I2C_Init+0x196>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e022      	b.n	8005ca0 <HAL_I2C_Init+0x1dc>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10e      	bne.n	8005c80 <HAL_I2C_Init+0x1bc>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	1e58      	subs	r0, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6859      	ldr	r1, [r3, #4]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	440b      	add	r3, r1
 8005c70:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c74:	3301      	adds	r3, #1
 8005c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c7e:	e00f      	b.n	8005ca0 <HAL_I2C_Init+0x1dc>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	1e58      	subs	r0, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6859      	ldr	r1, [r3, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	440b      	add	r3, r1
 8005c8e:	0099      	lsls	r1, r3, #2
 8005c90:	440b      	add	r3, r1
 8005c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c96:	3301      	adds	r3, #1
 8005c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	6809      	ldr	r1, [r1, #0]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69da      	ldr	r2, [r3, #28]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005cce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	6911      	ldr	r1, [r2, #16]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	68d2      	ldr	r2, [r2, #12]
 8005cda:	4311      	orrs	r1, r2
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	6812      	ldr	r2, [r2, #0]
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	695a      	ldr	r2, [r3, #20]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	000186a0 	.word	0x000186a0
 8005d3c:	001e847f 	.word	0x001e847f
 8005d40:	003d08ff 	.word	0x003d08ff
 8005d44:	431bde83 	.word	0x431bde83
 8005d48:	10624dd3 	.word	0x10624dd3

08005d4c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	4608      	mov	r0, r1
 8005d56:	4611      	mov	r1, r2
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	817b      	strh	r3, [r7, #10]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	813b      	strh	r3, [r7, #8]
 8005d62:	4613      	mov	r3, r2
 8005d64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d66:	f7fe fe51 	bl	8004a0c <HAL_GetTick>
 8005d6a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b20      	cmp	r3, #32
 8005d76:	f040 80d9 	bne.w	8005f2c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	2319      	movs	r3, #25
 8005d80:	2201      	movs	r2, #1
 8005d82:	496d      	ldr	r1, [pc, #436]	@ (8005f38 <HAL_I2C_Mem_Write+0x1ec>)
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 fc7f 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005d90:	2302      	movs	r3, #2
 8005d92:	e0cc      	b.n	8005f2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d101      	bne.n	8005da2 <HAL_I2C_Mem_Write+0x56>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	e0c5      	b.n	8005f2e <HAL_I2C_Mem_Write+0x1e2>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d007      	beq.n	8005dc8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0201 	orr.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2221      	movs	r2, #33	@ 0x21
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2240      	movs	r2, #64	@ 0x40
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a3a      	ldr	r2, [r7, #32]
 8005df2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005df8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4a4d      	ldr	r2, [pc, #308]	@ (8005f3c <HAL_I2C_Mem_Write+0x1f0>)
 8005e08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e0a:	88f8      	ldrh	r0, [r7, #6]
 8005e0c:	893a      	ldrh	r2, [r7, #8]
 8005e0e:	8979      	ldrh	r1, [r7, #10]
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	9301      	str	r3, [sp, #4]
 8005e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	4603      	mov	r3, r0
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 fab6 	bl	800638c <I2C_RequestMemoryWrite>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d052      	beq.n	8005ecc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e081      	b.n	8005f2e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 fd00 	bl	8006834 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00d      	beq.n	8005e56 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d107      	bne.n	8005e52 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e06b      	b.n	8005f2e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5a:	781a      	ldrb	r2, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e66:	1c5a      	adds	r2, r3, #1
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d11b      	bne.n	8005ecc <HAL_I2C_Mem_Write+0x180>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d017      	beq.n	8005ecc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea0:	781a      	ldrb	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1aa      	bne.n	8005e2a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 fcec 	bl	80068b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00d      	beq.n	8005f00 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	d107      	bne.n	8005efc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005efa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e016      	b.n	8005f2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	e000      	b.n	8005f2e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005f2c:	2302      	movs	r3, #2
  }
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	00100002 	.word	0x00100002
 8005f3c:	ffff0000 	.word	0xffff0000

08005f40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08c      	sub	sp, #48	@ 0x30
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	4608      	mov	r0, r1
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4603      	mov	r3, r0
 8005f50:	817b      	strh	r3, [r7, #10]
 8005f52:	460b      	mov	r3, r1
 8005f54:	813b      	strh	r3, [r7, #8]
 8005f56:	4613      	mov	r3, r2
 8005f58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f5a:	f7fe fd57 	bl	8004a0c <HAL_GetTick>
 8005f5e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b20      	cmp	r3, #32
 8005f6a:	f040 8208 	bne.w	800637e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	2319      	movs	r3, #25
 8005f74:	2201      	movs	r2, #1
 8005f76:	497b      	ldr	r1, [pc, #492]	@ (8006164 <HAL_I2C_Mem_Read+0x224>)
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 fb85 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005f84:	2302      	movs	r3, #2
 8005f86:	e1fb      	b.n	8006380 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d101      	bne.n	8005f96 <HAL_I2C_Mem_Read+0x56>
 8005f92:	2302      	movs	r3, #2
 8005f94:	e1f4      	b.n	8006380 <HAL_I2C_Mem_Read+0x440>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d007      	beq.n	8005fbc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0201 	orr.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005fca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2222      	movs	r2, #34	@ 0x22
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2240      	movs	r2, #64	@ 0x40
 8005fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fe6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005fec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4a5b      	ldr	r2, [pc, #364]	@ (8006168 <HAL_I2C_Mem_Read+0x228>)
 8005ffc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ffe:	88f8      	ldrh	r0, [r7, #6]
 8006000:	893a      	ldrh	r2, [r7, #8]
 8006002:	8979      	ldrh	r1, [r7, #10]
 8006004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006006:	9301      	str	r3, [sp, #4]
 8006008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	4603      	mov	r3, r0
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 fa52 	bl	80064b8 <I2C_RequestMemoryRead>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e1b0      	b.n	8006380 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006022:	2b00      	cmp	r3, #0
 8006024:	d113      	bne.n	800604e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006026:	2300      	movs	r3, #0
 8006028:	623b      	str	r3, [r7, #32]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	623b      	str	r3, [r7, #32]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	623b      	str	r3, [r7, #32]
 800603a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	e184      	b.n	8006358 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006052:	2b01      	cmp	r3, #1
 8006054:	d11b      	bne.n	800608e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006064:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006066:	2300      	movs	r3, #0
 8006068:	61fb      	str	r3, [r7, #28]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	61fb      	str	r3, [r7, #28]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	61fb      	str	r3, [r7, #28]
 800607a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	e164      	b.n	8006358 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006092:	2b02      	cmp	r3, #2
 8006094:	d11b      	bne.n	80060ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060b6:	2300      	movs	r3, #0
 80060b8:	61bb      	str	r3, [r7, #24]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	61bb      	str	r3, [r7, #24]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	61bb      	str	r3, [r7, #24]
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	e144      	b.n	8006358 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ce:	2300      	movs	r3, #0
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	617b      	str	r3, [r7, #20]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80060e4:	e138      	b.n	8006358 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	f200 80f1 	bhi.w	80062d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d123      	bne.n	8006140 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f000 fc1b 	bl	8006938 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e139      	b.n	8006380 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691a      	ldr	r2, [r3, #16]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800613e:	e10b      	b.n	8006358 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006144:	2b02      	cmp	r3, #2
 8006146:	d14e      	bne.n	80061e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614e:	2200      	movs	r2, #0
 8006150:	4906      	ldr	r1, [pc, #24]	@ (800616c <HAL_I2C_Mem_Read+0x22c>)
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f000 fa98 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d008      	beq.n	8006170 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e10e      	b.n	8006380 <HAL_I2C_Mem_Read+0x440>
 8006162:	bf00      	nop
 8006164:	00100002 	.word	0x00100002
 8006168:	ffff0000 	.word	0xffff0000
 800616c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800617e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691a      	ldr	r2, [r3, #16]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ce:	3b01      	subs	r3, #1
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061da:	b29b      	uxth	r3, r3
 80061dc:	3b01      	subs	r3, #1
 80061de:	b29a      	uxth	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80061e4:	e0b8      	b.n	8006358 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ec:	2200      	movs	r2, #0
 80061ee:	4966      	ldr	r1, [pc, #408]	@ (8006388 <HAL_I2C_Mem_Read+0x448>)
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 fa49 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e0bf      	b.n	8006380 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800620e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691a      	ldr	r2, [r3, #16]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621a:	b2d2      	uxtb	r2, r2
 800621c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800622c:	3b01      	subs	r3, #1
 800622e:	b29a      	uxth	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006238:	b29b      	uxth	r3, r3
 800623a:	3b01      	subs	r3, #1
 800623c:	b29a      	uxth	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006248:	2200      	movs	r2, #0
 800624a:	494f      	ldr	r1, [pc, #316]	@ (8006388 <HAL_I2C_Mem_Read+0x448>)
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 fa1b 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e091      	b.n	8006380 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800626a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691a      	ldr	r2, [r3, #16]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006288:	3b01      	subs	r3, #1
 800628a:	b29a      	uxth	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	691a      	ldr	r2, [r3, #16]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	3b01      	subs	r3, #1
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80062d0:	e042      	b.n	8006358 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 fb2e 	bl	8006938 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e04c      	b.n	8006380 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	691a      	ldr	r2, [r3, #16]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f8:	1c5a      	adds	r2, r3, #1
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006302:	3b01      	subs	r3, #1
 8006304:	b29a      	uxth	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800630e:	b29b      	uxth	r3, r3
 8006310:	3b01      	subs	r3, #1
 8006312:	b29a      	uxth	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	f003 0304 	and.w	r3, r3, #4
 8006322:	2b04      	cmp	r3, #4
 8006324:	d118      	bne.n	8006358 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006342:	3b01      	subs	r3, #1
 8006344:	b29a      	uxth	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800635c:	2b00      	cmp	r3, #0
 800635e:	f47f aec2 	bne.w	80060e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2220      	movs	r2, #32
 8006366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	e000      	b.n	8006380 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800637e:	2302      	movs	r3, #2
  }
}
 8006380:	4618      	mov	r0, r3
 8006382:	3728      	adds	r7, #40	@ 0x28
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	00010004 	.word	0x00010004

0800638c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af02      	add	r7, sp, #8
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	4608      	mov	r0, r1
 8006396:	4611      	mov	r1, r2
 8006398:	461a      	mov	r2, r3
 800639a:	4603      	mov	r3, r0
 800639c:	817b      	strh	r3, [r7, #10]
 800639e:	460b      	mov	r3, r1
 80063a0:	813b      	strh	r3, [r7, #8]
 80063a2:	4613      	mov	r3, r2
 80063a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	2200      	movs	r2, #0
 80063be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 f960 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00d      	beq.n	80063ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063dc:	d103      	bne.n	80063e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e05f      	b.n	80064aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063ea:	897b      	ldrh	r3, [r7, #10]
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80063f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fc:	6a3a      	ldr	r2, [r7, #32]
 80063fe:	492d      	ldr	r1, [pc, #180]	@ (80064b4 <I2C_RequestMemoryWrite+0x128>)
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 f998 	bl	8006736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e04c      	b.n	80064aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006410:	2300      	movs	r3, #0
 8006412:	617b      	str	r3, [r7, #20]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006428:	6a39      	ldr	r1, [r7, #32]
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 fa02 	bl	8006834 <I2C_WaitOnTXEFlagUntilTimeout>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00d      	beq.n	8006452 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643a:	2b04      	cmp	r3, #4
 800643c:	d107      	bne.n	800644e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800644c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e02b      	b.n	80064aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006452:	88fb      	ldrh	r3, [r7, #6]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d105      	bne.n	8006464 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006458:	893b      	ldrh	r3, [r7, #8]
 800645a:	b2da      	uxtb	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	611a      	str	r2, [r3, #16]
 8006462:	e021      	b.n	80064a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006464:	893b      	ldrh	r3, [r7, #8]
 8006466:	0a1b      	lsrs	r3, r3, #8
 8006468:	b29b      	uxth	r3, r3
 800646a:	b2da      	uxtb	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006474:	6a39      	ldr	r1, [r7, #32]
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 f9dc 	bl	8006834 <I2C_WaitOnTXEFlagUntilTimeout>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00d      	beq.n	800649e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006486:	2b04      	cmp	r3, #4
 8006488:	d107      	bne.n	800649a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006498:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e005      	b.n	80064aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800649e:	893b      	ldrh	r3, [r7, #8]
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	00010002 	.word	0x00010002

080064b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af02      	add	r7, sp, #8
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	4608      	mov	r0, r1
 80064c2:	4611      	mov	r1, r2
 80064c4:	461a      	mov	r2, r3
 80064c6:	4603      	mov	r3, r0
 80064c8:	817b      	strh	r3, [r7, #10]
 80064ca:	460b      	mov	r3, r1
 80064cc:	813b      	strh	r3, [r7, #8]
 80064ce:	4613      	mov	r3, r2
 80064d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80064e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 f8c2 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00d      	beq.n	8006526 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006514:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006518:	d103      	bne.n	8006522 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006520:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e0aa      	b.n	800667c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006526:	897b      	ldrh	r3, [r7, #10]
 8006528:	b2db      	uxtb	r3, r3
 800652a:	461a      	mov	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006534:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006538:	6a3a      	ldr	r2, [r7, #32]
 800653a:	4952      	ldr	r1, [pc, #328]	@ (8006684 <I2C_RequestMemoryRead+0x1cc>)
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f8fa 	bl	8006736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e097      	b.n	800667c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800654c:	2300      	movs	r3, #0
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006564:	6a39      	ldr	r1, [r7, #32]
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 f964 	bl	8006834 <I2C_WaitOnTXEFlagUntilTimeout>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00d      	beq.n	800658e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006576:	2b04      	cmp	r3, #4
 8006578:	d107      	bne.n	800658a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006588:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e076      	b.n	800667c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d105      	bne.n	80065a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006594:	893b      	ldrh	r3, [r7, #8]
 8006596:	b2da      	uxtb	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	611a      	str	r2, [r3, #16]
 800659e:	e021      	b.n	80065e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80065a0:	893b      	ldrh	r3, [r7, #8]
 80065a2:	0a1b      	lsrs	r3, r3, #8
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065b0:	6a39      	ldr	r1, [r7, #32]
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 f93e 	bl	8006834 <I2C_WaitOnTXEFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00d      	beq.n	80065da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d107      	bne.n	80065d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e050      	b.n	800667c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065da:	893b      	ldrh	r3, [r7, #8]
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065e6:	6a39      	ldr	r1, [r7, #32]
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f923 	bl	8006834 <I2C_WaitOnTXEFlagUntilTimeout>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00d      	beq.n	8006610 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d107      	bne.n	800660c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800660a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e035      	b.n	800667c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800661e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	2200      	movs	r2, #0
 8006628:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 f82b 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00d      	beq.n	8006654 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006646:	d103      	bne.n	8006650 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800664e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e013      	b.n	800667c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006654:	897b      	ldrh	r3, [r7, #10]
 8006656:	b2db      	uxtb	r3, r3
 8006658:	f043 0301 	orr.w	r3, r3, #1
 800665c:	b2da      	uxtb	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006666:	6a3a      	ldr	r2, [r7, #32]
 8006668:	4906      	ldr	r1, [pc, #24]	@ (8006684 <I2C_RequestMemoryRead+0x1cc>)
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 f863 	bl	8006736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e000      	b.n	800667c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3718      	adds	r7, #24
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	00010002 	.word	0x00010002

08006688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	4613      	mov	r3, r2
 8006696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006698:	e025      	b.n	80066e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a0:	d021      	beq.n	80066e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a2:	f7fe f9b3 	bl	8004a0c <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d302      	bcc.n	80066b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d116      	bne.n	80066e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d2:	f043 0220 	orr.w	r2, r3, #32
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e023      	b.n	800672e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	0c1b      	lsrs	r3, r3, #16
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d10d      	bne.n	800670c <I2C_WaitOnFlagUntilTimeout+0x84>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	43da      	mvns	r2, r3
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	4013      	ands	r3, r2
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bf0c      	ite	eq
 8006702:	2301      	moveq	r3, #1
 8006704:	2300      	movne	r3, #0
 8006706:	b2db      	uxtb	r3, r3
 8006708:	461a      	mov	r2, r3
 800670a:	e00c      	b.n	8006726 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	43da      	mvns	r2, r3
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4013      	ands	r3, r2
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	bf0c      	ite	eq
 800671e:	2301      	moveq	r3, #1
 8006720:	2300      	movne	r3, #0
 8006722:	b2db      	uxtb	r3, r3
 8006724:	461a      	mov	r2, r3
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	429a      	cmp	r2, r3
 800672a:	d0b6      	beq.n	800669a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	60f8      	str	r0, [r7, #12]
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	607a      	str	r2, [r7, #4]
 8006742:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006744:	e051      	b.n	80067ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006750:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006754:	d123      	bne.n	800679e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006764:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800676e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678a:	f043 0204 	orr.w	r2, r3, #4
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e046      	b.n	800682c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a4:	d021      	beq.n	80067ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a6:	f7fe f931 	bl	8004a0c <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d302      	bcc.n	80067bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d116      	bne.n	80067ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d6:	f043 0220 	orr.w	r2, r3, #32
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e020      	b.n	800682c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	0c1b      	lsrs	r3, r3, #16
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d10c      	bne.n	800680e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	43da      	mvns	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4013      	ands	r3, r2
 8006800:	b29b      	uxth	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	bf14      	ite	ne
 8006806:	2301      	movne	r3, #1
 8006808:	2300      	moveq	r3, #0
 800680a:	b2db      	uxtb	r3, r3
 800680c:	e00b      	b.n	8006826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	43da      	mvns	r2, r3
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	4013      	ands	r3, r2
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	bf14      	ite	ne
 8006820:	2301      	movne	r3, #1
 8006822:	2300      	moveq	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d18d      	bne.n	8006746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006840:	e02d      	b.n	800689e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f000 f8ce 	bl	80069e4 <I2C_IsAcknowledgeFailed>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e02d      	b.n	80068ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006858:	d021      	beq.n	800689e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685a:	f7fe f8d7 	bl	8004a0c <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	429a      	cmp	r2, r3
 8006868:	d302      	bcc.n	8006870 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d116      	bne.n	800689e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2220      	movs	r2, #32
 800687a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688a:	f043 0220 	orr.w	r2, r3, #32
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e007      	b.n	80068ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a8:	2b80      	cmp	r3, #128	@ 0x80
 80068aa:	d1ca      	bne.n	8006842 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068c2:	e02d      	b.n	8006920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f88d 	bl	80069e4 <I2C_IsAcknowledgeFailed>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e02d      	b.n	8006930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068da:	d021      	beq.n	8006920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068dc:	f7fe f896 	bl	8004a0c <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d302      	bcc.n	80068f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d116      	bne.n	8006920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690c:	f043 0220 	orr.w	r2, r3, #32
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e007      	b.n	8006930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	f003 0304 	and.w	r3, r3, #4
 800692a:	2b04      	cmp	r3, #4
 800692c:	d1ca      	bne.n	80068c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006944:	e042      	b.n	80069cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	f003 0310 	and.w	r3, r3, #16
 8006950:	2b10      	cmp	r3, #16
 8006952:	d119      	bne.n	8006988 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 0210 	mvn.w	r2, #16
 800695c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2220      	movs	r2, #32
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e029      	b.n	80069dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006988:	f7fe f840 	bl	8004a0c <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	429a      	cmp	r2, r3
 8006996:	d302      	bcc.n	800699e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d116      	bne.n	80069cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b8:	f043 0220 	orr.w	r2, r3, #32
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e007      	b.n	80069dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d6:	2b40      	cmp	r3, #64	@ 0x40
 80069d8:	d1b5      	bne.n	8006946 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069fa:	d11b      	bne.n	8006a34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a20:	f043 0204 	orr.w	r2, r3, #4
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e000      	b.n	8006a36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
	...

08006a44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e267      	b.n	8006f26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d075      	beq.n	8006b4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a62:	4b88      	ldr	r3, [pc, #544]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f003 030c 	and.w	r3, r3, #12
 8006a6a:	2b04      	cmp	r3, #4
 8006a6c:	d00c      	beq.n	8006a88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a6e:	4b85      	ldr	r3, [pc, #532]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a76:	2b08      	cmp	r3, #8
 8006a78:	d112      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a7a:	4b82      	ldr	r3, [pc, #520]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a86:	d10b      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a88:	4b7e      	ldr	r3, [pc, #504]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d05b      	beq.n	8006b4c <HAL_RCC_OscConfig+0x108>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d157      	bne.n	8006b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e242      	b.n	8006f26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aa8:	d106      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x74>
 8006aaa:	4b76      	ldr	r3, [pc, #472]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a75      	ldr	r2, [pc, #468]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	e01d      	b.n	8006af4 <HAL_RCC_OscConfig+0xb0>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ac0:	d10c      	bne.n	8006adc <HAL_RCC_OscConfig+0x98>
 8006ac2:	4b70      	ldr	r3, [pc, #448]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a6f      	ldr	r2, [pc, #444]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	4b6d      	ldr	r3, [pc, #436]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a6c      	ldr	r2, [pc, #432]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	e00b      	b.n	8006af4 <HAL_RCC_OscConfig+0xb0>
 8006adc:	4b69      	ldr	r3, [pc, #420]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a68      	ldr	r2, [pc, #416]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	4b66      	ldr	r3, [pc, #408]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a65      	ldr	r2, [pc, #404]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d013      	beq.n	8006b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006afc:	f7fd ff86 	bl	8004a0c <HAL_GetTick>
 8006b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b02:	e008      	b.n	8006b16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b04:	f7fd ff82 	bl	8004a0c <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b64      	cmp	r3, #100	@ 0x64
 8006b10:	d901      	bls.n	8006b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e207      	b.n	8006f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b16:	4b5b      	ldr	r3, [pc, #364]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d0f0      	beq.n	8006b04 <HAL_RCC_OscConfig+0xc0>
 8006b22:	e014      	b.n	8006b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b24:	f7fd ff72 	bl	8004a0c <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b2c:	f7fd ff6e 	bl	8004a0c <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b64      	cmp	r3, #100	@ 0x64
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e1f3      	b.n	8006f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b3e:	4b51      	ldr	r3, [pc, #324]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1f0      	bne.n	8006b2c <HAL_RCC_OscConfig+0xe8>
 8006b4a:	e000      	b.n	8006b4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d063      	beq.n	8006c22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f003 030c 	and.w	r3, r3, #12
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00b      	beq.n	8006b7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b66:	4b47      	ldr	r3, [pc, #284]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b6e:	2b08      	cmp	r3, #8
 8006b70:	d11c      	bne.n	8006bac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b72:	4b44      	ldr	r3, [pc, #272]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d116      	bne.n	8006bac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b7e:	4b41      	ldr	r3, [pc, #260]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d005      	beq.n	8006b96 <HAL_RCC_OscConfig+0x152>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d001      	beq.n	8006b96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e1c7      	b.n	8006f26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b96:	4b3b      	ldr	r3, [pc, #236]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	00db      	lsls	r3, r3, #3
 8006ba4:	4937      	ldr	r1, [pc, #220]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006baa:	e03a      	b.n	8006c22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d020      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bb4:	4b34      	ldr	r3, [pc, #208]	@ (8006c88 <HAL_RCC_OscConfig+0x244>)
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bba:	f7fd ff27 	bl	8004a0c <HAL_GetTick>
 8006bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bc0:	e008      	b.n	8006bd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bc2:	f7fd ff23 	bl	8004a0c <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d901      	bls.n	8006bd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e1a8      	b.n	8006f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d0f0      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006be0:	4b28      	ldr	r3, [pc, #160]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	00db      	lsls	r3, r3, #3
 8006bee:	4925      	ldr	r1, [pc, #148]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	600b      	str	r3, [r1, #0]
 8006bf4:	e015      	b.n	8006c22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bf6:	4b24      	ldr	r3, [pc, #144]	@ (8006c88 <HAL_RCC_OscConfig+0x244>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bfc:	f7fd ff06 	bl	8004a0c <HAL_GetTick>
 8006c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c02:	e008      	b.n	8006c16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c04:	f7fd ff02 	bl	8004a0c <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e187      	b.n	8006f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c16:	4b1b      	ldr	r3, [pc, #108]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1f0      	bne.n	8006c04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0308 	and.w	r3, r3, #8
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d036      	beq.n	8006c9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d016      	beq.n	8006c64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c36:	4b15      	ldr	r3, [pc, #84]	@ (8006c8c <HAL_RCC_OscConfig+0x248>)
 8006c38:	2201      	movs	r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c3c:	f7fd fee6 	bl	8004a0c <HAL_GetTick>
 8006c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c44:	f7fd fee2 	bl	8004a0c <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e167      	b.n	8006f26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c56:	4b0b      	ldr	r3, [pc, #44]	@ (8006c84 <HAL_RCC_OscConfig+0x240>)
 8006c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0f0      	beq.n	8006c44 <HAL_RCC_OscConfig+0x200>
 8006c62:	e01b      	b.n	8006c9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c64:	4b09      	ldr	r3, [pc, #36]	@ (8006c8c <HAL_RCC_OscConfig+0x248>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c6a:	f7fd fecf 	bl	8004a0c <HAL_GetTick>
 8006c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c70:	e00e      	b.n	8006c90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c72:	f7fd fecb 	bl	8004a0c <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d907      	bls.n	8006c90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e150      	b.n	8006f26 <HAL_RCC_OscConfig+0x4e2>
 8006c84:	40023800 	.word	0x40023800
 8006c88:	42470000 	.word	0x42470000
 8006c8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c90:	4b88      	ldr	r3, [pc, #544]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1ea      	bne.n	8006c72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 8097 	beq.w	8006dd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006caa:	2300      	movs	r3, #0
 8006cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cae:	4b81      	ldr	r3, [pc, #516]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10f      	bne.n	8006cda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60bb      	str	r3, [r7, #8]
 8006cbe:	4b7d      	ldr	r3, [pc, #500]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc2:	4a7c      	ldr	r2, [pc, #496]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006cca:	4b7a      	ldr	r3, [pc, #488]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cd2:	60bb      	str	r3, [r7, #8]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cda:	4b77      	ldr	r3, [pc, #476]	@ (8006eb8 <HAL_RCC_OscConfig+0x474>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d118      	bne.n	8006d18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ce6:	4b74      	ldr	r3, [pc, #464]	@ (8006eb8 <HAL_RCC_OscConfig+0x474>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a73      	ldr	r2, [pc, #460]	@ (8006eb8 <HAL_RCC_OscConfig+0x474>)
 8006cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cf2:	f7fd fe8b 	bl	8004a0c <HAL_GetTick>
 8006cf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cf8:	e008      	b.n	8006d0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cfa:	f7fd fe87 	bl	8004a0c <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d901      	bls.n	8006d0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e10c      	b.n	8006f26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d0c:	4b6a      	ldr	r3, [pc, #424]	@ (8006eb8 <HAL_RCC_OscConfig+0x474>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0f0      	beq.n	8006cfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d106      	bne.n	8006d2e <HAL_RCC_OscConfig+0x2ea>
 8006d20:	4b64      	ldr	r3, [pc, #400]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d24:	4a63      	ldr	r2, [pc, #396]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006d26:	f043 0301 	orr.w	r3, r3, #1
 8006d2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d2c:	e01c      	b.n	8006d68 <HAL_RCC_OscConfig+0x324>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	2b05      	cmp	r3, #5
 8006d34:	d10c      	bne.n	8006d50 <HAL_RCC_OscConfig+0x30c>
 8006d36:	4b5f      	ldr	r3, [pc, #380]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d3a:	4a5e      	ldr	r2, [pc, #376]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006d3c:	f043 0304 	orr.w	r3, r3, #4
 8006d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d42:	4b5c      	ldr	r3, [pc, #368]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d46:	4a5b      	ldr	r2, [pc, #364]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006d48:	f043 0301 	orr.w	r3, r3, #1
 8006d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d4e:	e00b      	b.n	8006d68 <HAL_RCC_OscConfig+0x324>
 8006d50:	4b58      	ldr	r3, [pc, #352]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d54:	4a57      	ldr	r2, [pc, #348]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006d56:	f023 0301 	bic.w	r3, r3, #1
 8006d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d5c:	4b55      	ldr	r3, [pc, #340]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d60:	4a54      	ldr	r2, [pc, #336]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006d62:	f023 0304 	bic.w	r3, r3, #4
 8006d66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d015      	beq.n	8006d9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d70:	f7fd fe4c 	bl	8004a0c <HAL_GetTick>
 8006d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d76:	e00a      	b.n	8006d8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d78:	f7fd fe48 	bl	8004a0c <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e0cb      	b.n	8006f26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d8e:	4b49      	ldr	r3, [pc, #292]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d92:	f003 0302 	and.w	r3, r3, #2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d0ee      	beq.n	8006d78 <HAL_RCC_OscConfig+0x334>
 8006d9a:	e014      	b.n	8006dc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d9c:	f7fd fe36 	bl	8004a0c <HAL_GetTick>
 8006da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006da2:	e00a      	b.n	8006dba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006da4:	f7fd fe32 	bl	8004a0c <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d901      	bls.n	8006dba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e0b5      	b.n	8006f26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dba:	4b3e      	ldr	r3, [pc, #248]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1ee      	bne.n	8006da4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d105      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dcc:	4b39      	ldr	r3, [pc, #228]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd0:	4a38      	ldr	r2, [pc, #224]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006dd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 80a1 	beq.w	8006f24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006de2:	4b34      	ldr	r3, [pc, #208]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f003 030c 	and.w	r3, r3, #12
 8006dea:	2b08      	cmp	r3, #8
 8006dec:	d05c      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d141      	bne.n	8006e7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006df6:	4b31      	ldr	r3, [pc, #196]	@ (8006ebc <HAL_RCC_OscConfig+0x478>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dfc:	f7fd fe06 	bl	8004a0c <HAL_GetTick>
 8006e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e02:	e008      	b.n	8006e16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e04:	f7fd fe02 	bl	8004a0c <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e087      	b.n	8006f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e16:	4b27      	ldr	r3, [pc, #156]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1f0      	bne.n	8006e04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	69da      	ldr	r2, [r3, #28]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e30:	019b      	lsls	r3, r3, #6
 8006e32:	431a      	orrs	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e38:	085b      	lsrs	r3, r3, #1
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	041b      	lsls	r3, r3, #16
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e44:	061b      	lsls	r3, r3, #24
 8006e46:	491b      	ldr	r1, [pc, #108]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8006ebc <HAL_RCC_OscConfig+0x478>)
 8006e4e:	2201      	movs	r2, #1
 8006e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e52:	f7fd fddb 	bl	8004a0c <HAL_GetTick>
 8006e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e58:	e008      	b.n	8006e6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e5a:	f7fd fdd7 	bl	8004a0c <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d901      	bls.n	8006e6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e05c      	b.n	8006f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e6c:	4b11      	ldr	r3, [pc, #68]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0f0      	beq.n	8006e5a <HAL_RCC_OscConfig+0x416>
 8006e78:	e054      	b.n	8006f24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e7a:	4b10      	ldr	r3, [pc, #64]	@ (8006ebc <HAL_RCC_OscConfig+0x478>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e80:	f7fd fdc4 	bl	8004a0c <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e88:	f7fd fdc0 	bl	8004a0c <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e045      	b.n	8006f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e9a:	4b06      	ldr	r3, [pc, #24]	@ (8006eb4 <HAL_RCC_OscConfig+0x470>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1f0      	bne.n	8006e88 <HAL_RCC_OscConfig+0x444>
 8006ea6:	e03d      	b.n	8006f24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d107      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e038      	b.n	8006f26 <HAL_RCC_OscConfig+0x4e2>
 8006eb4:	40023800 	.word	0x40023800
 8006eb8:	40007000 	.word	0x40007000
 8006ebc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f30 <HAL_RCC_OscConfig+0x4ec>)
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d028      	beq.n	8006f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d121      	bne.n	8006f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d11a      	bne.n	8006f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ef6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d111      	bne.n	8006f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f06:	085b      	lsrs	r3, r3, #1
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d107      	bne.n	8006f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d001      	beq.n	8006f24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e000      	b.n	8006f26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	40023800 	.word	0x40023800

08006f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e0cc      	b.n	80070e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f48:	4b68      	ldr	r3, [pc, #416]	@ (80070ec <HAL_RCC_ClockConfig+0x1b8>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0307 	and.w	r3, r3, #7
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d90c      	bls.n	8006f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f56:	4b65      	ldr	r3, [pc, #404]	@ (80070ec <HAL_RCC_ClockConfig+0x1b8>)
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f5e:	4b63      	ldr	r3, [pc, #396]	@ (80070ec <HAL_RCC_ClockConfig+0x1b8>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d001      	beq.n	8006f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e0b8      	b.n	80070e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0302 	and.w	r3, r3, #2
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d020      	beq.n	8006fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0304 	and.w	r3, r3, #4
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d005      	beq.n	8006f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f88:	4b59      	ldr	r3, [pc, #356]	@ (80070f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	4a58      	ldr	r2, [pc, #352]	@ (80070f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006f92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0308 	and.w	r3, r3, #8
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fa0:	4b53      	ldr	r3, [pc, #332]	@ (80070f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	4a52      	ldr	r2, [pc, #328]	@ (80070f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fac:	4b50      	ldr	r3, [pc, #320]	@ (80070f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	494d      	ldr	r1, [pc, #308]	@ (80070f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d044      	beq.n	8007054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d107      	bne.n	8006fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fd2:	4b47      	ldr	r3, [pc, #284]	@ (80070f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d119      	bne.n	8007012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e07f      	b.n	80070e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d003      	beq.n	8006ff2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d107      	bne.n	8007002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80070f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d109      	bne.n	8007012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e06f      	b.n	80070e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007002:	4b3b      	ldr	r3, [pc, #236]	@ (80070f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0302 	and.w	r3, r3, #2
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e067      	b.n	80070e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007012:	4b37      	ldr	r3, [pc, #220]	@ (80070f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f023 0203 	bic.w	r2, r3, #3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	4934      	ldr	r1, [pc, #208]	@ (80070f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007020:	4313      	orrs	r3, r2
 8007022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007024:	f7fd fcf2 	bl	8004a0c <HAL_GetTick>
 8007028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800702a:	e00a      	b.n	8007042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800702c:	f7fd fcee 	bl	8004a0c <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800703a:	4293      	cmp	r3, r2
 800703c:	d901      	bls.n	8007042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e04f      	b.n	80070e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007042:	4b2b      	ldr	r3, [pc, #172]	@ (80070f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f003 020c 	and.w	r2, r3, #12
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	429a      	cmp	r2, r3
 8007052:	d1eb      	bne.n	800702c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007054:	4b25      	ldr	r3, [pc, #148]	@ (80070ec <HAL_RCC_ClockConfig+0x1b8>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	429a      	cmp	r2, r3
 8007060:	d20c      	bcs.n	800707c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007062:	4b22      	ldr	r3, [pc, #136]	@ (80070ec <HAL_RCC_ClockConfig+0x1b8>)
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	b2d2      	uxtb	r2, r2
 8007068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800706a:	4b20      	ldr	r3, [pc, #128]	@ (80070ec <HAL_RCC_ClockConfig+0x1b8>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0307 	and.w	r3, r3, #7
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	429a      	cmp	r2, r3
 8007076:	d001      	beq.n	800707c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e032      	b.n	80070e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b00      	cmp	r3, #0
 8007086:	d008      	beq.n	800709a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007088:	4b19      	ldr	r3, [pc, #100]	@ (80070f0 <HAL_RCC_ClockConfig+0x1bc>)
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	4916      	ldr	r1, [pc, #88]	@ (80070f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007096:	4313      	orrs	r3, r2
 8007098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0308 	and.w	r3, r3, #8
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d009      	beq.n	80070ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070a6:	4b12      	ldr	r3, [pc, #72]	@ (80070f0 <HAL_RCC_ClockConfig+0x1bc>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	490e      	ldr	r1, [pc, #56]	@ (80070f0 <HAL_RCC_ClockConfig+0x1bc>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070ba:	f000 f821 	bl	8007100 <HAL_RCC_GetSysClockFreq>
 80070be:	4602      	mov	r2, r0
 80070c0:	4b0b      	ldr	r3, [pc, #44]	@ (80070f0 <HAL_RCC_ClockConfig+0x1bc>)
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	091b      	lsrs	r3, r3, #4
 80070c6:	f003 030f 	and.w	r3, r3, #15
 80070ca:	490a      	ldr	r1, [pc, #40]	@ (80070f4 <HAL_RCC_ClockConfig+0x1c0>)
 80070cc:	5ccb      	ldrb	r3, [r1, r3]
 80070ce:	fa22 f303 	lsr.w	r3, r2, r3
 80070d2:	4a09      	ldr	r2, [pc, #36]	@ (80070f8 <HAL_RCC_ClockConfig+0x1c4>)
 80070d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80070d6:	4b09      	ldr	r3, [pc, #36]	@ (80070fc <HAL_RCC_ClockConfig+0x1c8>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fd fc52 	bl	8004984 <HAL_InitTick>

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	40023c00 	.word	0x40023c00
 80070f0:	40023800 	.word	0x40023800
 80070f4:	0800cca4 	.word	0x0800cca4
 80070f8:	20000014 	.word	0x20000014
 80070fc:	20000050 	.word	0x20000050

08007100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007104:	b094      	sub	sp, #80	@ 0x50
 8007106:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007108:	2300      	movs	r3, #0
 800710a:	647b      	str	r3, [r7, #68]	@ 0x44
 800710c:	2300      	movs	r3, #0
 800710e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007110:	2300      	movs	r3, #0
 8007112:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007118:	4b79      	ldr	r3, [pc, #484]	@ (8007300 <HAL_RCC_GetSysClockFreq+0x200>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f003 030c 	and.w	r3, r3, #12
 8007120:	2b08      	cmp	r3, #8
 8007122:	d00d      	beq.n	8007140 <HAL_RCC_GetSysClockFreq+0x40>
 8007124:	2b08      	cmp	r3, #8
 8007126:	f200 80e1 	bhi.w	80072ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800712a:	2b00      	cmp	r3, #0
 800712c:	d002      	beq.n	8007134 <HAL_RCC_GetSysClockFreq+0x34>
 800712e:	2b04      	cmp	r3, #4
 8007130:	d003      	beq.n	800713a <HAL_RCC_GetSysClockFreq+0x3a>
 8007132:	e0db      	b.n	80072ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007134:	4b73      	ldr	r3, [pc, #460]	@ (8007304 <HAL_RCC_GetSysClockFreq+0x204>)
 8007136:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007138:	e0db      	b.n	80072f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800713a:	4b73      	ldr	r3, [pc, #460]	@ (8007308 <HAL_RCC_GetSysClockFreq+0x208>)
 800713c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800713e:	e0d8      	b.n	80072f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007140:	4b6f      	ldr	r3, [pc, #444]	@ (8007300 <HAL_RCC_GetSysClockFreq+0x200>)
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007148:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800714a:	4b6d      	ldr	r3, [pc, #436]	@ (8007300 <HAL_RCC_GetSysClockFreq+0x200>)
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d063      	beq.n	800721e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007156:	4b6a      	ldr	r3, [pc, #424]	@ (8007300 <HAL_RCC_GetSysClockFreq+0x200>)
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	099b      	lsrs	r3, r3, #6
 800715c:	2200      	movs	r2, #0
 800715e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007160:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007168:	633b      	str	r3, [r7, #48]	@ 0x30
 800716a:	2300      	movs	r3, #0
 800716c:	637b      	str	r3, [r7, #52]	@ 0x34
 800716e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007172:	4622      	mov	r2, r4
 8007174:	462b      	mov	r3, r5
 8007176:	f04f 0000 	mov.w	r0, #0
 800717a:	f04f 0100 	mov.w	r1, #0
 800717e:	0159      	lsls	r1, r3, #5
 8007180:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007184:	0150      	lsls	r0, r2, #5
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	4621      	mov	r1, r4
 800718c:	1a51      	subs	r1, r2, r1
 800718e:	6139      	str	r1, [r7, #16]
 8007190:	4629      	mov	r1, r5
 8007192:	eb63 0301 	sbc.w	r3, r3, r1
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	f04f 0200 	mov.w	r2, #0
 800719c:	f04f 0300 	mov.w	r3, #0
 80071a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071a4:	4659      	mov	r1, fp
 80071a6:	018b      	lsls	r3, r1, #6
 80071a8:	4651      	mov	r1, sl
 80071aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071ae:	4651      	mov	r1, sl
 80071b0:	018a      	lsls	r2, r1, #6
 80071b2:	4651      	mov	r1, sl
 80071b4:	ebb2 0801 	subs.w	r8, r2, r1
 80071b8:	4659      	mov	r1, fp
 80071ba:	eb63 0901 	sbc.w	r9, r3, r1
 80071be:	f04f 0200 	mov.w	r2, #0
 80071c2:	f04f 0300 	mov.w	r3, #0
 80071c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071d2:	4690      	mov	r8, r2
 80071d4:	4699      	mov	r9, r3
 80071d6:	4623      	mov	r3, r4
 80071d8:	eb18 0303 	adds.w	r3, r8, r3
 80071dc:	60bb      	str	r3, [r7, #8]
 80071de:	462b      	mov	r3, r5
 80071e0:	eb49 0303 	adc.w	r3, r9, r3
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	f04f 0200 	mov.w	r2, #0
 80071ea:	f04f 0300 	mov.w	r3, #0
 80071ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80071f2:	4629      	mov	r1, r5
 80071f4:	024b      	lsls	r3, r1, #9
 80071f6:	4621      	mov	r1, r4
 80071f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80071fc:	4621      	mov	r1, r4
 80071fe:	024a      	lsls	r2, r1, #9
 8007200:	4610      	mov	r0, r2
 8007202:	4619      	mov	r1, r3
 8007204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007206:	2200      	movs	r2, #0
 8007208:	62bb      	str	r3, [r7, #40]	@ 0x28
 800720a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800720c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007210:	f7f9 fcba 	bl	8000b88 <__aeabi_uldivmod>
 8007214:	4602      	mov	r2, r0
 8007216:	460b      	mov	r3, r1
 8007218:	4613      	mov	r3, r2
 800721a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800721c:	e058      	b.n	80072d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800721e:	4b38      	ldr	r3, [pc, #224]	@ (8007300 <HAL_RCC_GetSysClockFreq+0x200>)
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	099b      	lsrs	r3, r3, #6
 8007224:	2200      	movs	r2, #0
 8007226:	4618      	mov	r0, r3
 8007228:	4611      	mov	r1, r2
 800722a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800722e:	623b      	str	r3, [r7, #32]
 8007230:	2300      	movs	r3, #0
 8007232:	627b      	str	r3, [r7, #36]	@ 0x24
 8007234:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007238:	4642      	mov	r2, r8
 800723a:	464b      	mov	r3, r9
 800723c:	f04f 0000 	mov.w	r0, #0
 8007240:	f04f 0100 	mov.w	r1, #0
 8007244:	0159      	lsls	r1, r3, #5
 8007246:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800724a:	0150      	lsls	r0, r2, #5
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4641      	mov	r1, r8
 8007252:	ebb2 0a01 	subs.w	sl, r2, r1
 8007256:	4649      	mov	r1, r9
 8007258:	eb63 0b01 	sbc.w	fp, r3, r1
 800725c:	f04f 0200 	mov.w	r2, #0
 8007260:	f04f 0300 	mov.w	r3, #0
 8007264:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007268:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800726c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007270:	ebb2 040a 	subs.w	r4, r2, sl
 8007274:	eb63 050b 	sbc.w	r5, r3, fp
 8007278:	f04f 0200 	mov.w	r2, #0
 800727c:	f04f 0300 	mov.w	r3, #0
 8007280:	00eb      	lsls	r3, r5, #3
 8007282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007286:	00e2      	lsls	r2, r4, #3
 8007288:	4614      	mov	r4, r2
 800728a:	461d      	mov	r5, r3
 800728c:	4643      	mov	r3, r8
 800728e:	18e3      	adds	r3, r4, r3
 8007290:	603b      	str	r3, [r7, #0]
 8007292:	464b      	mov	r3, r9
 8007294:	eb45 0303 	adc.w	r3, r5, r3
 8007298:	607b      	str	r3, [r7, #4]
 800729a:	f04f 0200 	mov.w	r2, #0
 800729e:	f04f 0300 	mov.w	r3, #0
 80072a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072a6:	4629      	mov	r1, r5
 80072a8:	028b      	lsls	r3, r1, #10
 80072aa:	4621      	mov	r1, r4
 80072ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072b0:	4621      	mov	r1, r4
 80072b2:	028a      	lsls	r2, r1, #10
 80072b4:	4610      	mov	r0, r2
 80072b6:	4619      	mov	r1, r3
 80072b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072ba:	2200      	movs	r2, #0
 80072bc:	61bb      	str	r3, [r7, #24]
 80072be:	61fa      	str	r2, [r7, #28]
 80072c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072c4:	f7f9 fc60 	bl	8000b88 <__aeabi_uldivmod>
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	4613      	mov	r3, r2
 80072ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007300 <HAL_RCC_GetSysClockFreq+0x200>)
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	0c1b      	lsrs	r3, r3, #16
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	3301      	adds	r3, #1
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80072e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80072ea:	e002      	b.n	80072f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072ec:	4b05      	ldr	r3, [pc, #20]	@ (8007304 <HAL_RCC_GetSysClockFreq+0x204>)
 80072ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80072f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3750      	adds	r7, #80	@ 0x50
 80072f8:	46bd      	mov	sp, r7
 80072fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072fe:	bf00      	nop
 8007300:	40023800 	.word	0x40023800
 8007304:	00f42400 	.word	0x00f42400
 8007308:	007a1200 	.word	0x007a1200

0800730c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800730c:	b480      	push	{r7}
 800730e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007310:	4b03      	ldr	r3, [pc, #12]	@ (8007320 <HAL_RCC_GetHCLKFreq+0x14>)
 8007312:	681b      	ldr	r3, [r3, #0]
}
 8007314:	4618      	mov	r0, r3
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	20000014 	.word	0x20000014

08007324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007328:	f7ff fff0 	bl	800730c <HAL_RCC_GetHCLKFreq>
 800732c:	4602      	mov	r2, r0
 800732e:	4b05      	ldr	r3, [pc, #20]	@ (8007344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	0a9b      	lsrs	r3, r3, #10
 8007334:	f003 0307 	and.w	r3, r3, #7
 8007338:	4903      	ldr	r1, [pc, #12]	@ (8007348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800733a:	5ccb      	ldrb	r3, [r1, r3]
 800733c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007340:	4618      	mov	r0, r3
 8007342:	bd80      	pop	{r7, pc}
 8007344:	40023800 	.word	0x40023800
 8007348:	0800ccb4 	.word	0x0800ccb4

0800734c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e07b      	b.n	8007456 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007362:	2b00      	cmp	r3, #0
 8007364:	d108      	bne.n	8007378 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800736e:	d009      	beq.n	8007384 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	61da      	str	r2, [r3, #28]
 8007376:	e005      	b.n	8007384 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d106      	bne.n	80073a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7fc f8c6 	bl	8003530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2202      	movs	r2, #2
 80073a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80073cc:	431a      	orrs	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	431a      	orrs	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	431a      	orrs	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073f4:	431a      	orrs	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007408:	ea42 0103 	orr.w	r1, r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007410:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	0c1b      	lsrs	r3, r3, #16
 8007422:	f003 0104 	and.w	r1, r3, #4
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742a:	f003 0210 	and.w	r2, r3, #16
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69da      	ldr	r2, [r3, #28]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007444:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b088      	sub	sp, #32
 8007462:	af00      	add	r7, sp, #0
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	603b      	str	r3, [r7, #0]
 800746a:	4613      	mov	r3, r2
 800746c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007478:	2b01      	cmp	r3, #1
 800747a:	d101      	bne.n	8007480 <HAL_SPI_Transmit+0x22>
 800747c:	2302      	movs	r3, #2
 800747e:	e126      	b.n	80076ce <HAL_SPI_Transmit+0x270>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007488:	f7fd fac0 	bl	8004a0c <HAL_GetTick>
 800748c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800748e:	88fb      	ldrh	r3, [r7, #6]
 8007490:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b01      	cmp	r3, #1
 800749c:	d002      	beq.n	80074a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800749e:	2302      	movs	r3, #2
 80074a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074a2:	e10b      	b.n	80076bc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d002      	beq.n	80074b0 <HAL_SPI_Transmit+0x52>
 80074aa:	88fb      	ldrh	r3, [r7, #6]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d102      	bne.n	80074b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074b4:	e102      	b.n	80076bc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2203      	movs	r2, #3
 80074ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	88fa      	ldrh	r2, [r7, #6]
 80074ce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	88fa      	ldrh	r2, [r7, #6]
 80074d4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074fc:	d10f      	bne.n	800751e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800750c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800751c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007528:	2b40      	cmp	r3, #64	@ 0x40
 800752a:	d007      	beq.n	800753c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800753a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007544:	d14b      	bne.n	80075de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <HAL_SPI_Transmit+0xf6>
 800754e:	8afb      	ldrh	r3, [r7, #22]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d13e      	bne.n	80075d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007558:	881a      	ldrh	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007564:	1c9a      	adds	r2, r3, #2
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800756e:	b29b      	uxth	r3, r3
 8007570:	3b01      	subs	r3, #1
 8007572:	b29a      	uxth	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007578:	e02b      	b.n	80075d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f003 0302 	and.w	r3, r3, #2
 8007584:	2b02      	cmp	r3, #2
 8007586:	d112      	bne.n	80075ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800758c:	881a      	ldrh	r2, [r3, #0]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007598:	1c9a      	adds	r2, r3, #2
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80075ac:	e011      	b.n	80075d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075ae:	f7fd fa2d 	bl	8004a0c <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d803      	bhi.n	80075c6 <HAL_SPI_Transmit+0x168>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c4:	d102      	bne.n	80075cc <HAL_SPI_Transmit+0x16e>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d102      	bne.n	80075d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075d0:	e074      	b.n	80076bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1ce      	bne.n	800757a <HAL_SPI_Transmit+0x11c>
 80075dc:	e04c      	b.n	8007678 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d002      	beq.n	80075ec <HAL_SPI_Transmit+0x18e>
 80075e6:	8afb      	ldrh	r3, [r7, #22]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d140      	bne.n	800766e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	330c      	adds	r3, #12
 80075f6:	7812      	ldrb	r2, [r2, #0]
 80075f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007608:	b29b      	uxth	r3, r3
 800760a:	3b01      	subs	r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007612:	e02c      	b.n	800766e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f003 0302 	and.w	r3, r3, #2
 800761e:	2b02      	cmp	r3, #2
 8007620:	d113      	bne.n	800764a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	330c      	adds	r3, #12
 800762c:	7812      	ldrb	r2, [r2, #0]
 800762e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800763e:	b29b      	uxth	r3, r3
 8007640:	3b01      	subs	r3, #1
 8007642:	b29a      	uxth	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007648:	e011      	b.n	800766e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800764a:	f7fd f9df 	bl	8004a0c <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	429a      	cmp	r2, r3
 8007658:	d803      	bhi.n	8007662 <HAL_SPI_Transmit+0x204>
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007660:	d102      	bne.n	8007668 <HAL_SPI_Transmit+0x20a>
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d102      	bne.n	800766e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800766c:	e026      	b.n	80076bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007672:	b29b      	uxth	r3, r3
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1cd      	bne.n	8007614 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007678:	69ba      	ldr	r2, [r7, #24]
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 f8b3 	bl	80077e8 <SPI_EndRxTxTransaction>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2220      	movs	r2, #32
 800768c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10a      	bne.n	80076ac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007696:	2300      	movs	r3, #0
 8007698:	613b      	str	r3, [r7, #16]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	613b      	str	r3, [r7, #16]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	613b      	str	r3, [r7, #16]
 80076aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d002      	beq.n	80076ba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	77fb      	strb	r3, [r7, #31]
 80076b8:	e000      	b.n	80076bc <HAL_SPI_Transmit+0x25e>
  }

error:
 80076ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80076cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3720      	adds	r7, #32
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	603b      	str	r3, [r7, #0]
 80076e4:	4613      	mov	r3, r2
 80076e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076e8:	f7fd f990 	bl	8004a0c <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f0:	1a9b      	subs	r3, r3, r2
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	4413      	add	r3, r2
 80076f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076f8:	f7fd f988 	bl	8004a0c <HAL_GetTick>
 80076fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076fe:	4b39      	ldr	r3, [pc, #228]	@ (80077e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	015b      	lsls	r3, r3, #5
 8007704:	0d1b      	lsrs	r3, r3, #20
 8007706:	69fa      	ldr	r2, [r7, #28]
 8007708:	fb02 f303 	mul.w	r3, r2, r3
 800770c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800770e:	e054      	b.n	80077ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007716:	d050      	beq.n	80077ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007718:	f7fd f978 	bl	8004a0c <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	69fa      	ldr	r2, [r7, #28]
 8007724:	429a      	cmp	r2, r3
 8007726:	d902      	bls.n	800772e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d13d      	bne.n	80077aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800773c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007746:	d111      	bne.n	800776c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007750:	d004      	beq.n	800775c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800775a:	d107      	bne.n	800776c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800776a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007774:	d10f      	bne.n	8007796 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007794:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e017      	b.n	80077da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d101      	bne.n	80077b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	3b01      	subs	r3, #1
 80077b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	689a      	ldr	r2, [r3, #8]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	4013      	ands	r3, r2
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	bf0c      	ite	eq
 80077ca:	2301      	moveq	r3, #1
 80077cc:	2300      	movne	r3, #0
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	461a      	mov	r2, r3
 80077d2:	79fb      	ldrb	r3, [r7, #7]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d19b      	bne.n	8007710 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3720      	adds	r7, #32
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20000014 	.word	0x20000014

080077e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80077f4:	4b1b      	ldr	r3, [pc, #108]	@ (8007864 <SPI_EndRxTxTransaction+0x7c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a1b      	ldr	r2, [pc, #108]	@ (8007868 <SPI_EndRxTxTransaction+0x80>)
 80077fa:	fba2 2303 	umull	r2, r3, r2, r3
 80077fe:	0d5b      	lsrs	r3, r3, #21
 8007800:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007804:	fb02 f303 	mul.w	r3, r2, r3
 8007808:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007812:	d112      	bne.n	800783a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2200      	movs	r2, #0
 800781c:	2180      	movs	r1, #128	@ 0x80
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f7ff ff5a 	bl	80076d8 <SPI_WaitFlagStateUntilTimeout>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d016      	beq.n	8007858 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800782e:	f043 0220 	orr.w	r2, r3, #32
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e00f      	b.n	800785a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00a      	beq.n	8007856 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	3b01      	subs	r3, #1
 8007844:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007850:	2b80      	cmp	r3, #128	@ 0x80
 8007852:	d0f2      	beq.n	800783a <SPI_EndRxTxTransaction+0x52>
 8007854:	e000      	b.n	8007858 <SPI_EndRxTxTransaction+0x70>
        break;
 8007856:	bf00      	nop
  }

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3718      	adds	r7, #24
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	20000014 	.word	0x20000014
 8007868:	165e9f81 	.word	0x165e9f81

0800786c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e034      	b.n	80078ec <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d106      	bne.n	800789c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f7f9 fda0 	bl	80013dc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3308      	adds	r3, #8
 80078a4:	4619      	mov	r1, r3
 80078a6:	4610      	mov	r0, r2
 80078a8:	f000 ffda 	bl	8008860 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6818      	ldr	r0, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	461a      	mov	r2, r3
 80078b6:	68b9      	ldr	r1, [r7, #8]
 80078b8:	f001 f824 	bl	8008904 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6858      	ldr	r0, [r3, #4]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c8:	6879      	ldr	r1, [r7, #4]
 80078ca:	f001 f859 	bl	8008980 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	6892      	ldr	r2, [r2, #8]
 80078d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	6892      	ldr	r2, [r2, #8]
 80078e2:	f041 0101 	orr.w	r1, r1, #1
 80078e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e041      	b.n	800798a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d106      	bne.n	8007920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fc f87e 	bl	8003a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3304      	adds	r3, #4
 8007930:	4619      	mov	r1, r3
 8007932:	4610      	mov	r0, r2
 8007934:	f000 fc1a 	bl	800816c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d001      	beq.n	80079ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e046      	b.n	8007a3a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a23      	ldr	r2, [pc, #140]	@ (8007a48 <HAL_TIM_Base_Start+0xb4>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d022      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c6:	d01d      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a1f      	ldr	r2, [pc, #124]	@ (8007a4c <HAL_TIM_Base_Start+0xb8>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d018      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007a50 <HAL_TIM_Base_Start+0xbc>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d013      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a1c      	ldr	r2, [pc, #112]	@ (8007a54 <HAL_TIM_Base_Start+0xc0>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d00e      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007a58 <HAL_TIM_Base_Start+0xc4>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d009      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a19      	ldr	r2, [pc, #100]	@ (8007a5c <HAL_TIM_Base_Start+0xc8>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d004      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a18      	ldr	r2, [pc, #96]	@ (8007a60 <HAL_TIM_Base_Start+0xcc>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d111      	bne.n	8007a28 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f003 0307 	and.w	r3, r3, #7
 8007a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b06      	cmp	r3, #6
 8007a14:	d010      	beq.n	8007a38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f042 0201 	orr.w	r2, r2, #1
 8007a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a26:	e007      	b.n	8007a38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0201 	orr.w	r2, r2, #1
 8007a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	40010000 	.word	0x40010000
 8007a4c:	40000400 	.word	0x40000400
 8007a50:	40000800 	.word	0x40000800
 8007a54:	40000c00 	.word	0x40000c00
 8007a58:	40010400 	.word	0x40010400
 8007a5c:	40014000 	.word	0x40014000
 8007a60:	40001800 	.word	0x40001800

08007a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d001      	beq.n	8007a7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e04e      	b.n	8007b1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f042 0201 	orr.w	r2, r2, #1
 8007a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a23      	ldr	r2, [pc, #140]	@ (8007b28 <HAL_TIM_Base_Start_IT+0xc4>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d022      	beq.n	8007ae4 <HAL_TIM_Base_Start_IT+0x80>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aa6:	d01d      	beq.n	8007ae4 <HAL_TIM_Base_Start_IT+0x80>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a1f      	ldr	r2, [pc, #124]	@ (8007b2c <HAL_TIM_Base_Start_IT+0xc8>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d018      	beq.n	8007ae4 <HAL_TIM_Base_Start_IT+0x80>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a1e      	ldr	r2, [pc, #120]	@ (8007b30 <HAL_TIM_Base_Start_IT+0xcc>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d013      	beq.n	8007ae4 <HAL_TIM_Base_Start_IT+0x80>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8007b34 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00e      	beq.n	8007ae4 <HAL_TIM_Base_Start_IT+0x80>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a1b      	ldr	r2, [pc, #108]	@ (8007b38 <HAL_TIM_Base_Start_IT+0xd4>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d009      	beq.n	8007ae4 <HAL_TIM_Base_Start_IT+0x80>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a19      	ldr	r2, [pc, #100]	@ (8007b3c <HAL_TIM_Base_Start_IT+0xd8>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d004      	beq.n	8007ae4 <HAL_TIM_Base_Start_IT+0x80>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a18      	ldr	r2, [pc, #96]	@ (8007b40 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d111      	bne.n	8007b08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f003 0307 	and.w	r3, r3, #7
 8007aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2b06      	cmp	r3, #6
 8007af4:	d010      	beq.n	8007b18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f042 0201 	orr.w	r2, r2, #1
 8007b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b06:	e007      	b.n	8007b18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f042 0201 	orr.w	r2, r2, #1
 8007b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	40010000 	.word	0x40010000
 8007b2c:	40000400 	.word	0x40000400
 8007b30:	40000800 	.word	0x40000800
 8007b34:	40000c00 	.word	0x40000c00
 8007b38:	40010400 	.word	0x40010400
 8007b3c:	40014000 	.word	0x40014000
 8007b40:	40001800 	.word	0x40001800

08007b44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e041      	b.n	8007bda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d106      	bne.n	8007b70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f839 	bl	8007be2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	3304      	adds	r3, #4
 8007b80:	4619      	mov	r1, r3
 8007b82:	4610      	mov	r0, r2
 8007b84:	f000 faf2 	bl	800816c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b083      	sub	sp, #12
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b082      	sub	sp, #8
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d122      	bne.n	8007c52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d11b      	bne.n	8007c52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f06f 0202 	mvn.w	r2, #2
 8007c22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	f003 0303 	and.w	r3, r3, #3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d003      	beq.n	8007c40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fa78 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8007c3e:	e005      	b.n	8007c4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fa6a 	bl	800811a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fa7b 	bl	8008142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	f003 0304 	and.w	r3, r3, #4
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d122      	bne.n	8007ca6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	f003 0304 	and.w	r3, r3, #4
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d11b      	bne.n	8007ca6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f06f 0204 	mvn.w	r2, #4
 8007c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d003      	beq.n	8007c94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fa4e 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8007c92:	e005      	b.n	8007ca0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fa40 	bl	800811a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fa51 	bl	8008142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	f003 0308 	and.w	r3, r3, #8
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d122      	bne.n	8007cfa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	f003 0308 	and.w	r3, r3, #8
 8007cbe:	2b08      	cmp	r3, #8
 8007cc0:	d11b      	bne.n	8007cfa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f06f 0208 	mvn.w	r2, #8
 8007cca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2204      	movs	r2, #4
 8007cd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	f003 0303 	and.w	r3, r3, #3
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fa24 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8007ce6:	e005      	b.n	8007cf4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fa16 	bl	800811a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fa27 	bl	8008142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	f003 0310 	and.w	r3, r3, #16
 8007d04:	2b10      	cmp	r3, #16
 8007d06:	d122      	bne.n	8007d4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	f003 0310 	and.w	r3, r3, #16
 8007d12:	2b10      	cmp	r3, #16
 8007d14:	d11b      	bne.n	8007d4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f06f 0210 	mvn.w	r2, #16
 8007d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2208      	movs	r2, #8
 8007d24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	69db      	ldr	r3, [r3, #28]
 8007d2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d003      	beq.n	8007d3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f9fa 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8007d3a:	e005      	b.n	8007d48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f9ec 	bl	800811a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f9fd 	bl	8008142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d10e      	bne.n	8007d7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f003 0301 	and.w	r3, r3, #1
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d107      	bne.n	8007d7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f06f 0201 	mvn.w	r2, #1
 8007d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7fb fb45 	bl	8003404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d84:	2b80      	cmp	r3, #128	@ 0x80
 8007d86:	d10e      	bne.n	8007da6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d92:	2b80      	cmp	r3, #128	@ 0x80
 8007d94:	d107      	bne.n	8007da6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fd53 	bl	800884c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db0:	2b40      	cmp	r3, #64	@ 0x40
 8007db2:	d10e      	bne.n	8007dd2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dbe:	2b40      	cmp	r3, #64	@ 0x40
 8007dc0:	d107      	bne.n	8007dd2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f9c2 	bl	8008156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	f003 0320 	and.w	r3, r3, #32
 8007ddc:	2b20      	cmp	r3, #32
 8007dde:	d10e      	bne.n	8007dfe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	f003 0320 	and.w	r3, r3, #32
 8007dea:	2b20      	cmp	r3, #32
 8007dec:	d107      	bne.n	8007dfe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f06f 0220 	mvn.w	r2, #32
 8007df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fd1d 	bl	8008838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dfe:	bf00      	nop
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
	...

08007e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d101      	bne.n	8007e26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e22:	2302      	movs	r3, #2
 8007e24:	e0ae      	b.n	8007f84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b0c      	cmp	r3, #12
 8007e32:	f200 809f 	bhi.w	8007f74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007e36:	a201      	add	r2, pc, #4	@ (adr r2, 8007e3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3c:	08007e71 	.word	0x08007e71
 8007e40:	08007f75 	.word	0x08007f75
 8007e44:	08007f75 	.word	0x08007f75
 8007e48:	08007f75 	.word	0x08007f75
 8007e4c:	08007eb1 	.word	0x08007eb1
 8007e50:	08007f75 	.word	0x08007f75
 8007e54:	08007f75 	.word	0x08007f75
 8007e58:	08007f75 	.word	0x08007f75
 8007e5c:	08007ef3 	.word	0x08007ef3
 8007e60:	08007f75 	.word	0x08007f75
 8007e64:	08007f75 	.word	0x08007f75
 8007e68:	08007f75 	.word	0x08007f75
 8007e6c:	08007f33 	.word	0x08007f33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68b9      	ldr	r1, [r7, #8]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fa18 	bl	80082ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	699a      	ldr	r2, [r3, #24]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f042 0208 	orr.w	r2, r2, #8
 8007e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	699a      	ldr	r2, [r3, #24]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0204 	bic.w	r2, r2, #4
 8007e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6999      	ldr	r1, [r3, #24]
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	691a      	ldr	r2, [r3, #16]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	619a      	str	r2, [r3, #24]
      break;
 8007eae:	e064      	b.n	8007f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68b9      	ldr	r1, [r7, #8]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 fa68 	bl	800838c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	699a      	ldr	r2, [r3, #24]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	699a      	ldr	r2, [r3, #24]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6999      	ldr	r1, [r3, #24]
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	021a      	lsls	r2, r3, #8
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	430a      	orrs	r2, r1
 8007eee:	619a      	str	r2, [r3, #24]
      break;
 8007ef0:	e043      	b.n	8007f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68b9      	ldr	r1, [r7, #8]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 fabd 	bl	8008478 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	69da      	ldr	r2, [r3, #28]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f042 0208 	orr.w	r2, r2, #8
 8007f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	69da      	ldr	r2, [r3, #28]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 0204 	bic.w	r2, r2, #4
 8007f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	69d9      	ldr	r1, [r3, #28]
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	691a      	ldr	r2, [r3, #16]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	430a      	orrs	r2, r1
 8007f2e:	61da      	str	r2, [r3, #28]
      break;
 8007f30:	e023      	b.n	8007f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68b9      	ldr	r1, [r7, #8]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 fb11 	bl	8008560 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	69da      	ldr	r2, [r3, #28]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	69da      	ldr	r2, [r3, #28]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	69d9      	ldr	r1, [r3, #28]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	021a      	lsls	r2, r3, #8
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	61da      	str	r2, [r3, #28]
      break;
 8007f72:	e002      	b.n	8007f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	75fb      	strb	r3, [r7, #23]
      break;
 8007f78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3718      	adds	r7, #24
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d101      	bne.n	8007fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	e0b4      	b.n	8008112 <HAL_TIM_ConfigClockSource+0x186>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fe0:	d03e      	beq.n	8008060 <HAL_TIM_ConfigClockSource+0xd4>
 8007fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fe6:	f200 8087 	bhi.w	80080f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fee:	f000 8086 	beq.w	80080fe <HAL_TIM_ConfigClockSource+0x172>
 8007ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ff6:	d87f      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff8:	2b70      	cmp	r3, #112	@ 0x70
 8007ffa:	d01a      	beq.n	8008032 <HAL_TIM_ConfigClockSource+0xa6>
 8007ffc:	2b70      	cmp	r3, #112	@ 0x70
 8007ffe:	d87b      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008000:	2b60      	cmp	r3, #96	@ 0x60
 8008002:	d050      	beq.n	80080a6 <HAL_TIM_ConfigClockSource+0x11a>
 8008004:	2b60      	cmp	r3, #96	@ 0x60
 8008006:	d877      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008008:	2b50      	cmp	r3, #80	@ 0x50
 800800a:	d03c      	beq.n	8008086 <HAL_TIM_ConfigClockSource+0xfa>
 800800c:	2b50      	cmp	r3, #80	@ 0x50
 800800e:	d873      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008010:	2b40      	cmp	r3, #64	@ 0x40
 8008012:	d058      	beq.n	80080c6 <HAL_TIM_ConfigClockSource+0x13a>
 8008014:	2b40      	cmp	r3, #64	@ 0x40
 8008016:	d86f      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008018:	2b30      	cmp	r3, #48	@ 0x30
 800801a:	d064      	beq.n	80080e6 <HAL_TIM_ConfigClockSource+0x15a>
 800801c:	2b30      	cmp	r3, #48	@ 0x30
 800801e:	d86b      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008020:	2b20      	cmp	r3, #32
 8008022:	d060      	beq.n	80080e6 <HAL_TIM_ConfigClockSource+0x15a>
 8008024:	2b20      	cmp	r3, #32
 8008026:	d867      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008028:	2b00      	cmp	r3, #0
 800802a:	d05c      	beq.n	80080e6 <HAL_TIM_ConfigClockSource+0x15a>
 800802c:	2b10      	cmp	r3, #16
 800802e:	d05a      	beq.n	80080e6 <HAL_TIM_ConfigClockSource+0x15a>
 8008030:	e062      	b.n	80080f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6818      	ldr	r0, [r3, #0]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	6899      	ldr	r1, [r3, #8]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f000 fb5d 	bl	8008700 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008054:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	609a      	str	r2, [r3, #8]
      break;
 800805e:	e04f      	b.n	8008100 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6818      	ldr	r0, [r3, #0]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	6899      	ldr	r1, [r3, #8]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f000 fb46 	bl	8008700 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689a      	ldr	r2, [r3, #8]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008082:	609a      	str	r2, [r3, #8]
      break;
 8008084:	e03c      	b.n	8008100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6818      	ldr	r0, [r3, #0]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	6859      	ldr	r1, [r3, #4]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	461a      	mov	r2, r3
 8008094:	f000 faba 	bl	800860c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2150      	movs	r1, #80	@ 0x50
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fb13 	bl	80086ca <TIM_ITRx_SetConfig>
      break;
 80080a4:	e02c      	b.n	8008100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6818      	ldr	r0, [r3, #0]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	6859      	ldr	r1, [r3, #4]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	461a      	mov	r2, r3
 80080b4:	f000 fad9 	bl	800866a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2160      	movs	r1, #96	@ 0x60
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 fb03 	bl	80086ca <TIM_ITRx_SetConfig>
      break;
 80080c4:	e01c      	b.n	8008100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6818      	ldr	r0, [r3, #0]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	6859      	ldr	r1, [r3, #4]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	461a      	mov	r2, r3
 80080d4:	f000 fa9a 	bl	800860c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2140      	movs	r1, #64	@ 0x40
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 faf3 	bl	80086ca <TIM_ITRx_SetConfig>
      break;
 80080e4:	e00c      	b.n	8008100 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4619      	mov	r1, r3
 80080f0:	4610      	mov	r0, r2
 80080f2:	f000 faea 	bl	80086ca <TIM_ITRx_SetConfig>
      break;
 80080f6:	e003      	b.n	8008100 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	73fb      	strb	r3, [r7, #15]
      break;
 80080fc:	e000      	b.n	8008100 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008110:	7bfb      	ldrb	r3, [r7, #15]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800811a:	b480      	push	{r7}
 800811c:	b083      	sub	sp, #12
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008122:	bf00      	nop
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800812e:	b480      	push	{r7}
 8008130:	b083      	sub	sp, #12
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008136:	bf00      	nop
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008142:	b480      	push	{r7}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800814a:	bf00      	nop
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008156:	b480      	push	{r7}
 8008158:	b083      	sub	sp, #12
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800815e:	bf00      	nop
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
	...

0800816c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a40      	ldr	r2, [pc, #256]	@ (8008280 <TIM_Base_SetConfig+0x114>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d013      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800818a:	d00f      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a3d      	ldr	r2, [pc, #244]	@ (8008284 <TIM_Base_SetConfig+0x118>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d00b      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a3c      	ldr	r2, [pc, #240]	@ (8008288 <TIM_Base_SetConfig+0x11c>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d007      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a3b      	ldr	r2, [pc, #236]	@ (800828c <TIM_Base_SetConfig+0x120>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d003      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a3a      	ldr	r2, [pc, #232]	@ (8008290 <TIM_Base_SetConfig+0x124>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d108      	bne.n	80081be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a2f      	ldr	r2, [pc, #188]	@ (8008280 <TIM_Base_SetConfig+0x114>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d02b      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081cc:	d027      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a2c      	ldr	r2, [pc, #176]	@ (8008284 <TIM_Base_SetConfig+0x118>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d023      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a2b      	ldr	r2, [pc, #172]	@ (8008288 <TIM_Base_SetConfig+0x11c>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d01f      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a2a      	ldr	r2, [pc, #168]	@ (800828c <TIM_Base_SetConfig+0x120>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d01b      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a29      	ldr	r2, [pc, #164]	@ (8008290 <TIM_Base_SetConfig+0x124>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d017      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a28      	ldr	r2, [pc, #160]	@ (8008294 <TIM_Base_SetConfig+0x128>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d013      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a27      	ldr	r2, [pc, #156]	@ (8008298 <TIM_Base_SetConfig+0x12c>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d00f      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a26      	ldr	r2, [pc, #152]	@ (800829c <TIM_Base_SetConfig+0x130>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d00b      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a25      	ldr	r2, [pc, #148]	@ (80082a0 <TIM_Base_SetConfig+0x134>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d007      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a24      	ldr	r2, [pc, #144]	@ (80082a4 <TIM_Base_SetConfig+0x138>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d003      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a23      	ldr	r2, [pc, #140]	@ (80082a8 <TIM_Base_SetConfig+0x13c>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d108      	bne.n	8008230 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	4313      	orrs	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a0a      	ldr	r2, [pc, #40]	@ (8008280 <TIM_Base_SetConfig+0x114>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d003      	beq.n	8008264 <TIM_Base_SetConfig+0xf8>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a0c      	ldr	r2, [pc, #48]	@ (8008290 <TIM_Base_SetConfig+0x124>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d103      	bne.n	800826c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	691a      	ldr	r2, [r3, #16]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	615a      	str	r2, [r3, #20]
}
 8008272:	bf00      	nop
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	40010000 	.word	0x40010000
 8008284:	40000400 	.word	0x40000400
 8008288:	40000800 	.word	0x40000800
 800828c:	40000c00 	.word	0x40000c00
 8008290:	40010400 	.word	0x40010400
 8008294:	40014000 	.word	0x40014000
 8008298:	40014400 	.word	0x40014400
 800829c:	40014800 	.word	0x40014800
 80082a0:	40001800 	.word	0x40001800
 80082a4:	40001c00 	.word	0x40001c00
 80082a8:	40002000 	.word	0x40002000

080082ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b087      	sub	sp, #28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	f023 0201 	bic.w	r2, r3, #1
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f023 0303 	bic.w	r3, r3, #3
 80082e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f023 0302 	bic.w	r3, r3, #2
 80082f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a20      	ldr	r2, [pc, #128]	@ (8008384 <TIM_OC1_SetConfig+0xd8>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d003      	beq.n	8008310 <TIM_OC1_SetConfig+0x64>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a1f      	ldr	r2, [pc, #124]	@ (8008388 <TIM_OC1_SetConfig+0xdc>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d10c      	bne.n	800832a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f023 0308 	bic.w	r3, r3, #8
 8008316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	4313      	orrs	r3, r2
 8008320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f023 0304 	bic.w	r3, r3, #4
 8008328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a15      	ldr	r2, [pc, #84]	@ (8008384 <TIM_OC1_SetConfig+0xd8>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d003      	beq.n	800833a <TIM_OC1_SetConfig+0x8e>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a14      	ldr	r2, [pc, #80]	@ (8008388 <TIM_OC1_SetConfig+0xdc>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d111      	bne.n	800835e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	4313      	orrs	r3, r2
 8008352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	4313      	orrs	r3, r2
 800835c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	697a      	ldr	r2, [r7, #20]
 8008376:	621a      	str	r2, [r3, #32]
}
 8008378:	bf00      	nop
 800837a:	371c      	adds	r7, #28
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	40010000 	.word	0x40010000
 8008388:	40010400 	.word	0x40010400

0800838c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800838c:	b480      	push	{r7}
 800838e:	b087      	sub	sp, #28
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	f023 0210 	bic.w	r2, r3, #16
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	021b      	lsls	r3, r3, #8
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f023 0320 	bic.w	r3, r3, #32
 80083d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	011b      	lsls	r3, r3, #4
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a22      	ldr	r2, [pc, #136]	@ (8008470 <TIM_OC2_SetConfig+0xe4>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d003      	beq.n	80083f4 <TIM_OC2_SetConfig+0x68>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a21      	ldr	r2, [pc, #132]	@ (8008474 <TIM_OC2_SetConfig+0xe8>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d10d      	bne.n	8008410 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	011b      	lsls	r3, r3, #4
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	4313      	orrs	r3, r2
 8008406:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800840e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a17      	ldr	r2, [pc, #92]	@ (8008470 <TIM_OC2_SetConfig+0xe4>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d003      	beq.n	8008420 <TIM_OC2_SetConfig+0x94>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a16      	ldr	r2, [pc, #88]	@ (8008474 <TIM_OC2_SetConfig+0xe8>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d113      	bne.n	8008448 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008426:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800842e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	695b      	ldr	r3, [r3, #20]
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	4313      	orrs	r3, r2
 800843a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	4313      	orrs	r3, r2
 8008446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	621a      	str	r2, [r3, #32]
}
 8008462:	bf00      	nop
 8008464:	371c      	adds	r7, #28
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	40010000 	.word	0x40010000
 8008474:	40010400 	.word	0x40010400

08008478 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008478:	b480      	push	{r7}
 800847a:	b087      	sub	sp, #28
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f023 0303 	bic.w	r3, r3, #3
 80084ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80084c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	021b      	lsls	r3, r3, #8
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a21      	ldr	r2, [pc, #132]	@ (8008558 <TIM_OC3_SetConfig+0xe0>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d003      	beq.n	80084de <TIM_OC3_SetConfig+0x66>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a20      	ldr	r2, [pc, #128]	@ (800855c <TIM_OC3_SetConfig+0xe4>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d10d      	bne.n	80084fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80084e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	021b      	lsls	r3, r3, #8
 80084ec:	697a      	ldr	r2, [r7, #20]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a16      	ldr	r2, [pc, #88]	@ (8008558 <TIM_OC3_SetConfig+0xe0>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d003      	beq.n	800850a <TIM_OC3_SetConfig+0x92>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a15      	ldr	r2, [pc, #84]	@ (800855c <TIM_OC3_SetConfig+0xe4>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d113      	bne.n	8008532 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	011b      	lsls	r3, r3, #4
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	4313      	orrs	r3, r2
 8008524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	011b      	lsls	r3, r3, #4
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	4313      	orrs	r3, r2
 8008530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	621a      	str	r2, [r3, #32]
}
 800854c:	bf00      	nop
 800854e:	371c      	adds	r7, #28
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	40010000 	.word	0x40010000
 800855c:	40010400 	.word	0x40010400

08008560 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008560:	b480      	push	{r7}
 8008562:	b087      	sub	sp, #28
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800858e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	021b      	lsls	r3, r3, #8
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80085aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	031b      	lsls	r3, r3, #12
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a12      	ldr	r2, [pc, #72]	@ (8008604 <TIM_OC4_SetConfig+0xa4>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d003      	beq.n	80085c8 <TIM_OC4_SetConfig+0x68>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a11      	ldr	r2, [pc, #68]	@ (8008608 <TIM_OC4_SetConfig+0xa8>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d109      	bne.n	80085dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	695b      	ldr	r3, [r3, #20]
 80085d4:	019b      	lsls	r3, r3, #6
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	4313      	orrs	r3, r2
 80085da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	621a      	str	r2, [r3, #32]
}
 80085f6:	bf00      	nop
 80085f8:	371c      	adds	r7, #28
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	40010000 	.word	0x40010000
 8008608:	40010400 	.word	0x40010400

0800860c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	f023 0201 	bic.w	r2, r3, #1
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	011b      	lsls	r3, r3, #4
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	4313      	orrs	r3, r2
 8008640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f023 030a 	bic.w	r3, r3, #10
 8008648:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	4313      	orrs	r3, r2
 8008650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	621a      	str	r2, [r3, #32]
}
 800865e:	bf00      	nop
 8008660:	371c      	adds	r7, #28
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr

0800866a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800866a:	b480      	push	{r7}
 800866c:	b087      	sub	sp, #28
 800866e:	af00      	add	r7, sp, #0
 8008670:	60f8      	str	r0, [r7, #12]
 8008672:	60b9      	str	r1, [r7, #8]
 8008674:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	f023 0210 	bic.w	r2, r3, #16
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6a1b      	ldr	r3, [r3, #32]
 800868c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008694:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	031b      	lsls	r3, r3, #12
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	4313      	orrs	r3, r2
 800869e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80086a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	011b      	lsls	r3, r3, #4
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	621a      	str	r2, [r3, #32]
}
 80086be:	bf00      	nop
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b085      	sub	sp, #20
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	f043 0307 	orr.w	r3, r3, #7
 80086ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	609a      	str	r2, [r3, #8]
}
 80086f4:	bf00      	nop
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
 800870c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800871a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	021a      	lsls	r2, r3, #8
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	431a      	orrs	r2, r3
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	4313      	orrs	r3, r2
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	4313      	orrs	r3, r2
 800872c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	609a      	str	r2, [r3, #8]
}
 8008734:	bf00      	nop
 8008736:	371c      	adds	r7, #28
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008750:	2b01      	cmp	r3, #1
 8008752:	d101      	bne.n	8008758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008754:	2302      	movs	r3, #2
 8008756:	e05a      	b.n	800880e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2202      	movs	r2, #2
 8008764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800877e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	4313      	orrs	r3, r2
 8008788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a21      	ldr	r2, [pc, #132]	@ (800881c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d022      	beq.n	80087e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087a4:	d01d      	beq.n	80087e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a1d      	ldr	r2, [pc, #116]	@ (8008820 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d018      	beq.n	80087e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a1b      	ldr	r2, [pc, #108]	@ (8008824 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d013      	beq.n	80087e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a1a      	ldr	r2, [pc, #104]	@ (8008828 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d00e      	beq.n	80087e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a18      	ldr	r2, [pc, #96]	@ (800882c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d009      	beq.n	80087e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a17      	ldr	r2, [pc, #92]	@ (8008830 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d004      	beq.n	80087e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a15      	ldr	r2, [pc, #84]	@ (8008834 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d10c      	bne.n	80087fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3714      	adds	r7, #20
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	40010000 	.word	0x40010000
 8008820:	40000400 	.word	0x40000400
 8008824:	40000800 	.word	0x40000800
 8008828:	40000c00 	.word	0x40000c00
 800882c:	40010400 	.word	0x40010400
 8008830:	40014000 	.word	0x40014000
 8008834:	40001800 	.word	0x40001800

08008838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800886a:	2300      	movs	r3, #0
 800886c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008878:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	4b20      	ldr	r3, [pc, #128]	@ (8008900 <FSMC_NORSRAM_Init+0xa0>)
 800887e:	4013      	ands	r3, r2
 8008880:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800888a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8008890:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8008896:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800889c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80088a2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80088a8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80088ae:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 80088b4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 80088ba:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 80088c0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 80088c6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 80088cc:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	2b08      	cmp	r3, #8
 80088da:	d103      	bne.n	80088e4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088e2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	68f9      	ldr	r1, [r7, #12]
 80088ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3714      	adds	r7, #20
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	fff00080 	.word	0xfff00080

08008904 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008904:	b480      	push	{r7}
 8008906:	b087      	sub	sp, #28
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008910:	2300      	movs	r3, #0
 8008912:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	1c5a      	adds	r2, r3, #1
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800891e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008926:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008932:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800893a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008942:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	3b01      	subs	r3, #1
 800894a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800894c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	3b02      	subs	r3, #2
 8008954:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008956:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800895c:	4313      	orrs	r3, r2
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	4313      	orrs	r3, r2
 8008962:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	1c5a      	adds	r2, r3, #1
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6979      	ldr	r1, [r7, #20]
 800896c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	371c      	adds	r7, #28
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
	...

08008980 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008980:	b480      	push	{r7}
 8008982:	b087      	sub	sp, #28
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
 800898c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800898e:	2300      	movs	r3, #0
 8008990:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008998:	d122      	bne.n	80089e0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	4b15      	ldr	r3, [pc, #84]	@ (80089fc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80089a8:	4013      	ands	r3, r2
 80089aa:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80089b6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80089be:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80089c6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80089cc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	6979      	ldr	r1, [r7, #20]
 80089da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80089de:	e005      	b.n	80089ec <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80089e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	371c      	adds	r7, #28
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	cff00000 	.word	0xcff00000

08008a00 <srand>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	4b10      	ldr	r3, [pc, #64]	@ (8008a44 <srand+0x44>)
 8008a04:	681d      	ldr	r5, [r3, #0]
 8008a06:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008a08:	4604      	mov	r4, r0
 8008a0a:	b9b3      	cbnz	r3, 8008a3a <srand+0x3a>
 8008a0c:	2018      	movs	r0, #24
 8008a0e:	f000 fa4d 	bl	8008eac <malloc>
 8008a12:	4602      	mov	r2, r0
 8008a14:	6328      	str	r0, [r5, #48]	@ 0x30
 8008a16:	b920      	cbnz	r0, 8008a22 <srand+0x22>
 8008a18:	4b0b      	ldr	r3, [pc, #44]	@ (8008a48 <srand+0x48>)
 8008a1a:	480c      	ldr	r0, [pc, #48]	@ (8008a4c <srand+0x4c>)
 8008a1c:	2146      	movs	r1, #70	@ 0x46
 8008a1e:	f000 f9dd 	bl	8008ddc <__assert_func>
 8008a22:	490b      	ldr	r1, [pc, #44]	@ (8008a50 <srand+0x50>)
 8008a24:	4b0b      	ldr	r3, [pc, #44]	@ (8008a54 <srand+0x54>)
 8008a26:	e9c0 1300 	strd	r1, r3, [r0]
 8008a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8008a58 <srand+0x58>)
 8008a2c:	6083      	str	r3, [r0, #8]
 8008a2e:	230b      	movs	r3, #11
 8008a30:	8183      	strh	r3, [r0, #12]
 8008a32:	2100      	movs	r1, #0
 8008a34:	2001      	movs	r0, #1
 8008a36:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008a3a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	611c      	str	r4, [r3, #16]
 8008a40:	615a      	str	r2, [r3, #20]
 8008a42:	bd38      	pop	{r3, r4, r5, pc}
 8008a44:	20000064 	.word	0x20000064
 8008a48:	0800ccc4 	.word	0x0800ccc4
 8008a4c:	0800ccdb 	.word	0x0800ccdb
 8008a50:	abcd330e 	.word	0xabcd330e
 8008a54:	e66d1234 	.word	0xe66d1234
 8008a58:	0005deec 	.word	0x0005deec

08008a5c <rand>:
 8008a5c:	4b16      	ldr	r3, [pc, #88]	@ (8008ab8 <rand+0x5c>)
 8008a5e:	b510      	push	{r4, lr}
 8008a60:	681c      	ldr	r4, [r3, #0]
 8008a62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008a64:	b9b3      	cbnz	r3, 8008a94 <rand+0x38>
 8008a66:	2018      	movs	r0, #24
 8008a68:	f000 fa20 	bl	8008eac <malloc>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	6320      	str	r0, [r4, #48]	@ 0x30
 8008a70:	b920      	cbnz	r0, 8008a7c <rand+0x20>
 8008a72:	4b12      	ldr	r3, [pc, #72]	@ (8008abc <rand+0x60>)
 8008a74:	4812      	ldr	r0, [pc, #72]	@ (8008ac0 <rand+0x64>)
 8008a76:	2152      	movs	r1, #82	@ 0x52
 8008a78:	f000 f9b0 	bl	8008ddc <__assert_func>
 8008a7c:	4911      	ldr	r1, [pc, #68]	@ (8008ac4 <rand+0x68>)
 8008a7e:	4b12      	ldr	r3, [pc, #72]	@ (8008ac8 <rand+0x6c>)
 8008a80:	e9c0 1300 	strd	r1, r3, [r0]
 8008a84:	4b11      	ldr	r3, [pc, #68]	@ (8008acc <rand+0x70>)
 8008a86:	6083      	str	r3, [r0, #8]
 8008a88:	230b      	movs	r3, #11
 8008a8a:	8183      	strh	r3, [r0, #12]
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	2001      	movs	r0, #1
 8008a90:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008a94:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008a96:	480e      	ldr	r0, [pc, #56]	@ (8008ad0 <rand+0x74>)
 8008a98:	690b      	ldr	r3, [r1, #16]
 8008a9a:	694c      	ldr	r4, [r1, #20]
 8008a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8008ad4 <rand+0x78>)
 8008a9e:	4358      	muls	r0, r3
 8008aa0:	fb02 0004 	mla	r0, r2, r4, r0
 8008aa4:	fba3 3202 	umull	r3, r2, r3, r2
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	eb40 0002 	adc.w	r0, r0, r2
 8008aae:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008ab2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008ab6:	bd10      	pop	{r4, pc}
 8008ab8:	20000064 	.word	0x20000064
 8008abc:	0800ccc4 	.word	0x0800ccc4
 8008ac0:	0800ccdb 	.word	0x0800ccdb
 8008ac4:	abcd330e 	.word	0xabcd330e
 8008ac8:	e66d1234 	.word	0xe66d1234
 8008acc:	0005deec 	.word	0x0005deec
 8008ad0:	5851f42d 	.word	0x5851f42d
 8008ad4:	4c957f2d 	.word	0x4c957f2d

08008ad8 <std>:
 8008ad8:	2300      	movs	r3, #0
 8008ada:	b510      	push	{r4, lr}
 8008adc:	4604      	mov	r4, r0
 8008ade:	e9c0 3300 	strd	r3, r3, [r0]
 8008ae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ae6:	6083      	str	r3, [r0, #8]
 8008ae8:	8181      	strh	r1, [r0, #12]
 8008aea:	6643      	str	r3, [r0, #100]	@ 0x64
 8008aec:	81c2      	strh	r2, [r0, #14]
 8008aee:	6183      	str	r3, [r0, #24]
 8008af0:	4619      	mov	r1, r3
 8008af2:	2208      	movs	r2, #8
 8008af4:	305c      	adds	r0, #92	@ 0x5c
 8008af6:	f000 f8f4 	bl	8008ce2 <memset>
 8008afa:	4b0d      	ldr	r3, [pc, #52]	@ (8008b30 <std+0x58>)
 8008afc:	6263      	str	r3, [r4, #36]	@ 0x24
 8008afe:	4b0d      	ldr	r3, [pc, #52]	@ (8008b34 <std+0x5c>)
 8008b00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008b02:	4b0d      	ldr	r3, [pc, #52]	@ (8008b38 <std+0x60>)
 8008b04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008b06:	4b0d      	ldr	r3, [pc, #52]	@ (8008b3c <std+0x64>)
 8008b08:	6323      	str	r3, [r4, #48]	@ 0x30
 8008b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008b40 <std+0x68>)
 8008b0c:	6224      	str	r4, [r4, #32]
 8008b0e:	429c      	cmp	r4, r3
 8008b10:	d006      	beq.n	8008b20 <std+0x48>
 8008b12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008b16:	4294      	cmp	r4, r2
 8008b18:	d002      	beq.n	8008b20 <std+0x48>
 8008b1a:	33d0      	adds	r3, #208	@ 0xd0
 8008b1c:	429c      	cmp	r4, r3
 8008b1e:	d105      	bne.n	8008b2c <std+0x54>
 8008b20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b28:	f000 b954 	b.w	8008dd4 <__retarget_lock_init_recursive>
 8008b2c:	bd10      	pop	{r4, pc}
 8008b2e:	bf00      	nop
 8008b30:	08008c5d 	.word	0x08008c5d
 8008b34:	08008c7f 	.word	0x08008c7f
 8008b38:	08008cb7 	.word	0x08008cb7
 8008b3c:	08008cdb 	.word	0x08008cdb
 8008b40:	20001368 	.word	0x20001368

08008b44 <stdio_exit_handler>:
 8008b44:	4a02      	ldr	r2, [pc, #8]	@ (8008b50 <stdio_exit_handler+0xc>)
 8008b46:	4903      	ldr	r1, [pc, #12]	@ (8008b54 <stdio_exit_handler+0x10>)
 8008b48:	4803      	ldr	r0, [pc, #12]	@ (8008b58 <stdio_exit_handler+0x14>)
 8008b4a:	f000 b869 	b.w	8008c20 <_fwalk_sglue>
 8008b4e:	bf00      	nop
 8008b50:	20000058 	.word	0x20000058
 8008b54:	08009121 	.word	0x08009121
 8008b58:	20000068 	.word	0x20000068

08008b5c <cleanup_stdio>:
 8008b5c:	6841      	ldr	r1, [r0, #4]
 8008b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8008b90 <cleanup_stdio+0x34>)
 8008b60:	4299      	cmp	r1, r3
 8008b62:	b510      	push	{r4, lr}
 8008b64:	4604      	mov	r4, r0
 8008b66:	d001      	beq.n	8008b6c <cleanup_stdio+0x10>
 8008b68:	f000 fada 	bl	8009120 <_fflush_r>
 8008b6c:	68a1      	ldr	r1, [r4, #8]
 8008b6e:	4b09      	ldr	r3, [pc, #36]	@ (8008b94 <cleanup_stdio+0x38>)
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d002      	beq.n	8008b7a <cleanup_stdio+0x1e>
 8008b74:	4620      	mov	r0, r4
 8008b76:	f000 fad3 	bl	8009120 <_fflush_r>
 8008b7a:	68e1      	ldr	r1, [r4, #12]
 8008b7c:	4b06      	ldr	r3, [pc, #24]	@ (8008b98 <cleanup_stdio+0x3c>)
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	d004      	beq.n	8008b8c <cleanup_stdio+0x30>
 8008b82:	4620      	mov	r0, r4
 8008b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b88:	f000 baca 	b.w	8009120 <_fflush_r>
 8008b8c:	bd10      	pop	{r4, pc}
 8008b8e:	bf00      	nop
 8008b90:	20001368 	.word	0x20001368
 8008b94:	200013d0 	.word	0x200013d0
 8008b98:	20001438 	.word	0x20001438

08008b9c <global_stdio_init.part.0>:
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8008bcc <global_stdio_init.part.0+0x30>)
 8008ba0:	4c0b      	ldr	r4, [pc, #44]	@ (8008bd0 <global_stdio_init.part.0+0x34>)
 8008ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8008bd4 <global_stdio_init.part.0+0x38>)
 8008ba4:	601a      	str	r2, [r3, #0]
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2104      	movs	r1, #4
 8008bac:	f7ff ff94 	bl	8008ad8 <std>
 8008bb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	2109      	movs	r1, #9
 8008bb8:	f7ff ff8e 	bl	8008ad8 <std>
 8008bbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008bc0:	2202      	movs	r2, #2
 8008bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bc6:	2112      	movs	r1, #18
 8008bc8:	f7ff bf86 	b.w	8008ad8 <std>
 8008bcc:	200014a0 	.word	0x200014a0
 8008bd0:	20001368 	.word	0x20001368
 8008bd4:	08008b45 	.word	0x08008b45

08008bd8 <__sfp_lock_acquire>:
 8008bd8:	4801      	ldr	r0, [pc, #4]	@ (8008be0 <__sfp_lock_acquire+0x8>)
 8008bda:	f000 b8fc 	b.w	8008dd6 <__retarget_lock_acquire_recursive>
 8008bde:	bf00      	nop
 8008be0:	200014a9 	.word	0x200014a9

08008be4 <__sfp_lock_release>:
 8008be4:	4801      	ldr	r0, [pc, #4]	@ (8008bec <__sfp_lock_release+0x8>)
 8008be6:	f000 b8f7 	b.w	8008dd8 <__retarget_lock_release_recursive>
 8008bea:	bf00      	nop
 8008bec:	200014a9 	.word	0x200014a9

08008bf0 <__sinit>:
 8008bf0:	b510      	push	{r4, lr}
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	f7ff fff0 	bl	8008bd8 <__sfp_lock_acquire>
 8008bf8:	6a23      	ldr	r3, [r4, #32]
 8008bfa:	b11b      	cbz	r3, 8008c04 <__sinit+0x14>
 8008bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c00:	f7ff bff0 	b.w	8008be4 <__sfp_lock_release>
 8008c04:	4b04      	ldr	r3, [pc, #16]	@ (8008c18 <__sinit+0x28>)
 8008c06:	6223      	str	r3, [r4, #32]
 8008c08:	4b04      	ldr	r3, [pc, #16]	@ (8008c1c <__sinit+0x2c>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1f5      	bne.n	8008bfc <__sinit+0xc>
 8008c10:	f7ff ffc4 	bl	8008b9c <global_stdio_init.part.0>
 8008c14:	e7f2      	b.n	8008bfc <__sinit+0xc>
 8008c16:	bf00      	nop
 8008c18:	08008b5d 	.word	0x08008b5d
 8008c1c:	200014a0 	.word	0x200014a0

08008c20 <_fwalk_sglue>:
 8008c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c24:	4607      	mov	r7, r0
 8008c26:	4688      	mov	r8, r1
 8008c28:	4614      	mov	r4, r2
 8008c2a:	2600      	movs	r6, #0
 8008c2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c30:	f1b9 0901 	subs.w	r9, r9, #1
 8008c34:	d505      	bpl.n	8008c42 <_fwalk_sglue+0x22>
 8008c36:	6824      	ldr	r4, [r4, #0]
 8008c38:	2c00      	cmp	r4, #0
 8008c3a:	d1f7      	bne.n	8008c2c <_fwalk_sglue+0xc>
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c42:	89ab      	ldrh	r3, [r5, #12]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d907      	bls.n	8008c58 <_fwalk_sglue+0x38>
 8008c48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	d003      	beq.n	8008c58 <_fwalk_sglue+0x38>
 8008c50:	4629      	mov	r1, r5
 8008c52:	4638      	mov	r0, r7
 8008c54:	47c0      	blx	r8
 8008c56:	4306      	orrs	r6, r0
 8008c58:	3568      	adds	r5, #104	@ 0x68
 8008c5a:	e7e9      	b.n	8008c30 <_fwalk_sglue+0x10>

08008c5c <__sread>:
 8008c5c:	b510      	push	{r4, lr}
 8008c5e:	460c      	mov	r4, r1
 8008c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c64:	f000 f868 	bl	8008d38 <_read_r>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	bfab      	itete	ge
 8008c6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c70:	181b      	addge	r3, r3, r0
 8008c72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008c76:	bfac      	ite	ge
 8008c78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008c7a:	81a3      	strhlt	r3, [r4, #12]
 8008c7c:	bd10      	pop	{r4, pc}

08008c7e <__swrite>:
 8008c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c82:	461f      	mov	r7, r3
 8008c84:	898b      	ldrh	r3, [r1, #12]
 8008c86:	05db      	lsls	r3, r3, #23
 8008c88:	4605      	mov	r5, r0
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	4616      	mov	r6, r2
 8008c8e:	d505      	bpl.n	8008c9c <__swrite+0x1e>
 8008c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c94:	2302      	movs	r3, #2
 8008c96:	2200      	movs	r2, #0
 8008c98:	f000 f83c 	bl	8008d14 <_lseek_r>
 8008c9c:	89a3      	ldrh	r3, [r4, #12]
 8008c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ca2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ca6:	81a3      	strh	r3, [r4, #12]
 8008ca8:	4632      	mov	r2, r6
 8008caa:	463b      	mov	r3, r7
 8008cac:	4628      	mov	r0, r5
 8008cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb2:	f000 b853 	b.w	8008d5c <_write_r>

08008cb6 <__sseek>:
 8008cb6:	b510      	push	{r4, lr}
 8008cb8:	460c      	mov	r4, r1
 8008cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cbe:	f000 f829 	bl	8008d14 <_lseek_r>
 8008cc2:	1c43      	adds	r3, r0, #1
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	bf15      	itete	ne
 8008cc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008cca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008cce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008cd2:	81a3      	strheq	r3, [r4, #12]
 8008cd4:	bf18      	it	ne
 8008cd6:	81a3      	strhne	r3, [r4, #12]
 8008cd8:	bd10      	pop	{r4, pc}

08008cda <__sclose>:
 8008cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cde:	f000 b809 	b.w	8008cf4 <_close_r>

08008ce2 <memset>:
 8008ce2:	4402      	add	r2, r0
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d100      	bne.n	8008cec <memset+0xa>
 8008cea:	4770      	bx	lr
 8008cec:	f803 1b01 	strb.w	r1, [r3], #1
 8008cf0:	e7f9      	b.n	8008ce6 <memset+0x4>
	...

08008cf4 <_close_r>:
 8008cf4:	b538      	push	{r3, r4, r5, lr}
 8008cf6:	4d06      	ldr	r5, [pc, #24]	@ (8008d10 <_close_r+0x1c>)
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	4608      	mov	r0, r1
 8008cfe:	602b      	str	r3, [r5, #0]
 8008d00:	f7fa fd26 	bl	8003750 <_close>
 8008d04:	1c43      	adds	r3, r0, #1
 8008d06:	d102      	bne.n	8008d0e <_close_r+0x1a>
 8008d08:	682b      	ldr	r3, [r5, #0]
 8008d0a:	b103      	cbz	r3, 8008d0e <_close_r+0x1a>
 8008d0c:	6023      	str	r3, [r4, #0]
 8008d0e:	bd38      	pop	{r3, r4, r5, pc}
 8008d10:	200014a4 	.word	0x200014a4

08008d14 <_lseek_r>:
 8008d14:	b538      	push	{r3, r4, r5, lr}
 8008d16:	4d07      	ldr	r5, [pc, #28]	@ (8008d34 <_lseek_r+0x20>)
 8008d18:	4604      	mov	r4, r0
 8008d1a:	4608      	mov	r0, r1
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	2200      	movs	r2, #0
 8008d20:	602a      	str	r2, [r5, #0]
 8008d22:	461a      	mov	r2, r3
 8008d24:	f7fa fd3b 	bl	800379e <_lseek>
 8008d28:	1c43      	adds	r3, r0, #1
 8008d2a:	d102      	bne.n	8008d32 <_lseek_r+0x1e>
 8008d2c:	682b      	ldr	r3, [r5, #0]
 8008d2e:	b103      	cbz	r3, 8008d32 <_lseek_r+0x1e>
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	bd38      	pop	{r3, r4, r5, pc}
 8008d34:	200014a4 	.word	0x200014a4

08008d38 <_read_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4d07      	ldr	r5, [pc, #28]	@ (8008d58 <_read_r+0x20>)
 8008d3c:	4604      	mov	r4, r0
 8008d3e:	4608      	mov	r0, r1
 8008d40:	4611      	mov	r1, r2
 8008d42:	2200      	movs	r2, #0
 8008d44:	602a      	str	r2, [r5, #0]
 8008d46:	461a      	mov	r2, r3
 8008d48:	f7fa fcc9 	bl	80036de <_read>
 8008d4c:	1c43      	adds	r3, r0, #1
 8008d4e:	d102      	bne.n	8008d56 <_read_r+0x1e>
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	b103      	cbz	r3, 8008d56 <_read_r+0x1e>
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	bd38      	pop	{r3, r4, r5, pc}
 8008d58:	200014a4 	.word	0x200014a4

08008d5c <_write_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	4d07      	ldr	r5, [pc, #28]	@ (8008d7c <_write_r+0x20>)
 8008d60:	4604      	mov	r4, r0
 8008d62:	4608      	mov	r0, r1
 8008d64:	4611      	mov	r1, r2
 8008d66:	2200      	movs	r2, #0
 8008d68:	602a      	str	r2, [r5, #0]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	f7fa fcd4 	bl	8003718 <_write>
 8008d70:	1c43      	adds	r3, r0, #1
 8008d72:	d102      	bne.n	8008d7a <_write_r+0x1e>
 8008d74:	682b      	ldr	r3, [r5, #0]
 8008d76:	b103      	cbz	r3, 8008d7a <_write_r+0x1e>
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	bd38      	pop	{r3, r4, r5, pc}
 8008d7c:	200014a4 	.word	0x200014a4

08008d80 <__errno>:
 8008d80:	4b01      	ldr	r3, [pc, #4]	@ (8008d88 <__errno+0x8>)
 8008d82:	6818      	ldr	r0, [r3, #0]
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	20000064 	.word	0x20000064

08008d8c <__libc_init_array>:
 8008d8c:	b570      	push	{r4, r5, r6, lr}
 8008d8e:	4d0d      	ldr	r5, [pc, #52]	@ (8008dc4 <__libc_init_array+0x38>)
 8008d90:	4c0d      	ldr	r4, [pc, #52]	@ (8008dc8 <__libc_init_array+0x3c>)
 8008d92:	1b64      	subs	r4, r4, r5
 8008d94:	10a4      	asrs	r4, r4, #2
 8008d96:	2600      	movs	r6, #0
 8008d98:	42a6      	cmp	r6, r4
 8008d9a:	d109      	bne.n	8008db0 <__libc_init_array+0x24>
 8008d9c:	4d0b      	ldr	r5, [pc, #44]	@ (8008dcc <__libc_init_array+0x40>)
 8008d9e:	4c0c      	ldr	r4, [pc, #48]	@ (8008dd0 <__libc_init_array+0x44>)
 8008da0:	f000 ff40 	bl	8009c24 <_init>
 8008da4:	1b64      	subs	r4, r4, r5
 8008da6:	10a4      	asrs	r4, r4, #2
 8008da8:	2600      	movs	r6, #0
 8008daa:	42a6      	cmp	r6, r4
 8008dac:	d105      	bne.n	8008dba <__libc_init_array+0x2e>
 8008dae:	bd70      	pop	{r4, r5, r6, pc}
 8008db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008db4:	4798      	blx	r3
 8008db6:	3601      	adds	r6, #1
 8008db8:	e7ee      	b.n	8008d98 <__libc_init_array+0xc>
 8008dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dbe:	4798      	blx	r3
 8008dc0:	3601      	adds	r6, #1
 8008dc2:	e7f2      	b.n	8008daa <__libc_init_array+0x1e>
 8008dc4:	0800cdac 	.word	0x0800cdac
 8008dc8:	0800cdac 	.word	0x0800cdac
 8008dcc:	0800cdac 	.word	0x0800cdac
 8008dd0:	0800cdb0 	.word	0x0800cdb0

08008dd4 <__retarget_lock_init_recursive>:
 8008dd4:	4770      	bx	lr

08008dd6 <__retarget_lock_acquire_recursive>:
 8008dd6:	4770      	bx	lr

08008dd8 <__retarget_lock_release_recursive>:
 8008dd8:	4770      	bx	lr
	...

08008ddc <__assert_func>:
 8008ddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dde:	4614      	mov	r4, r2
 8008de0:	461a      	mov	r2, r3
 8008de2:	4b09      	ldr	r3, [pc, #36]	@ (8008e08 <__assert_func+0x2c>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4605      	mov	r5, r0
 8008de8:	68d8      	ldr	r0, [r3, #12]
 8008dea:	b954      	cbnz	r4, 8008e02 <__assert_func+0x26>
 8008dec:	4b07      	ldr	r3, [pc, #28]	@ (8008e0c <__assert_func+0x30>)
 8008dee:	461c      	mov	r4, r3
 8008df0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008df4:	9100      	str	r1, [sp, #0]
 8008df6:	462b      	mov	r3, r5
 8008df8:	4905      	ldr	r1, [pc, #20]	@ (8008e10 <__assert_func+0x34>)
 8008dfa:	f000 f9b9 	bl	8009170 <fiprintf>
 8008dfe:	f000 f9d9 	bl	80091b4 <abort>
 8008e02:	4b04      	ldr	r3, [pc, #16]	@ (8008e14 <__assert_func+0x38>)
 8008e04:	e7f4      	b.n	8008df0 <__assert_func+0x14>
 8008e06:	bf00      	nop
 8008e08:	20000064 	.word	0x20000064
 8008e0c:	0800cd6e 	.word	0x0800cd6e
 8008e10:	0800cd40 	.word	0x0800cd40
 8008e14:	0800cd33 	.word	0x0800cd33

08008e18 <_free_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4605      	mov	r5, r0
 8008e1c:	2900      	cmp	r1, #0
 8008e1e:	d041      	beq.n	8008ea4 <_free_r+0x8c>
 8008e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e24:	1f0c      	subs	r4, r1, #4
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	bfb8      	it	lt
 8008e2a:	18e4      	addlt	r4, r4, r3
 8008e2c:	f000 f8e8 	bl	8009000 <__malloc_lock>
 8008e30:	4a1d      	ldr	r2, [pc, #116]	@ (8008ea8 <_free_r+0x90>)
 8008e32:	6813      	ldr	r3, [r2, #0]
 8008e34:	b933      	cbnz	r3, 8008e44 <_free_r+0x2c>
 8008e36:	6063      	str	r3, [r4, #4]
 8008e38:	6014      	str	r4, [r2, #0]
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e40:	f000 b8e4 	b.w	800900c <__malloc_unlock>
 8008e44:	42a3      	cmp	r3, r4
 8008e46:	d908      	bls.n	8008e5a <_free_r+0x42>
 8008e48:	6820      	ldr	r0, [r4, #0]
 8008e4a:	1821      	adds	r1, r4, r0
 8008e4c:	428b      	cmp	r3, r1
 8008e4e:	bf01      	itttt	eq
 8008e50:	6819      	ldreq	r1, [r3, #0]
 8008e52:	685b      	ldreq	r3, [r3, #4]
 8008e54:	1809      	addeq	r1, r1, r0
 8008e56:	6021      	streq	r1, [r4, #0]
 8008e58:	e7ed      	b.n	8008e36 <_free_r+0x1e>
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	b10b      	cbz	r3, 8008e64 <_free_r+0x4c>
 8008e60:	42a3      	cmp	r3, r4
 8008e62:	d9fa      	bls.n	8008e5a <_free_r+0x42>
 8008e64:	6811      	ldr	r1, [r2, #0]
 8008e66:	1850      	adds	r0, r2, r1
 8008e68:	42a0      	cmp	r0, r4
 8008e6a:	d10b      	bne.n	8008e84 <_free_r+0x6c>
 8008e6c:	6820      	ldr	r0, [r4, #0]
 8008e6e:	4401      	add	r1, r0
 8008e70:	1850      	adds	r0, r2, r1
 8008e72:	4283      	cmp	r3, r0
 8008e74:	6011      	str	r1, [r2, #0]
 8008e76:	d1e0      	bne.n	8008e3a <_free_r+0x22>
 8008e78:	6818      	ldr	r0, [r3, #0]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	6053      	str	r3, [r2, #4]
 8008e7e:	4408      	add	r0, r1
 8008e80:	6010      	str	r0, [r2, #0]
 8008e82:	e7da      	b.n	8008e3a <_free_r+0x22>
 8008e84:	d902      	bls.n	8008e8c <_free_r+0x74>
 8008e86:	230c      	movs	r3, #12
 8008e88:	602b      	str	r3, [r5, #0]
 8008e8a:	e7d6      	b.n	8008e3a <_free_r+0x22>
 8008e8c:	6820      	ldr	r0, [r4, #0]
 8008e8e:	1821      	adds	r1, r4, r0
 8008e90:	428b      	cmp	r3, r1
 8008e92:	bf04      	itt	eq
 8008e94:	6819      	ldreq	r1, [r3, #0]
 8008e96:	685b      	ldreq	r3, [r3, #4]
 8008e98:	6063      	str	r3, [r4, #4]
 8008e9a:	bf04      	itt	eq
 8008e9c:	1809      	addeq	r1, r1, r0
 8008e9e:	6021      	streq	r1, [r4, #0]
 8008ea0:	6054      	str	r4, [r2, #4]
 8008ea2:	e7ca      	b.n	8008e3a <_free_r+0x22>
 8008ea4:	bd38      	pop	{r3, r4, r5, pc}
 8008ea6:	bf00      	nop
 8008ea8:	200014b0 	.word	0x200014b0

08008eac <malloc>:
 8008eac:	4b02      	ldr	r3, [pc, #8]	@ (8008eb8 <malloc+0xc>)
 8008eae:	4601      	mov	r1, r0
 8008eb0:	6818      	ldr	r0, [r3, #0]
 8008eb2:	f000 b825 	b.w	8008f00 <_malloc_r>
 8008eb6:	bf00      	nop
 8008eb8:	20000064 	.word	0x20000064

08008ebc <sbrk_aligned>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	4e0f      	ldr	r6, [pc, #60]	@ (8008efc <sbrk_aligned+0x40>)
 8008ec0:	460c      	mov	r4, r1
 8008ec2:	6831      	ldr	r1, [r6, #0]
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	b911      	cbnz	r1, 8008ece <sbrk_aligned+0x12>
 8008ec8:	f000 f964 	bl	8009194 <_sbrk_r>
 8008ecc:	6030      	str	r0, [r6, #0]
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	f000 f95f 	bl	8009194 <_sbrk_r>
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	d103      	bne.n	8008ee2 <sbrk_aligned+0x26>
 8008eda:	f04f 34ff 	mov.w	r4, #4294967295
 8008ede:	4620      	mov	r0, r4
 8008ee0:	bd70      	pop	{r4, r5, r6, pc}
 8008ee2:	1cc4      	adds	r4, r0, #3
 8008ee4:	f024 0403 	bic.w	r4, r4, #3
 8008ee8:	42a0      	cmp	r0, r4
 8008eea:	d0f8      	beq.n	8008ede <sbrk_aligned+0x22>
 8008eec:	1a21      	subs	r1, r4, r0
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f000 f950 	bl	8009194 <_sbrk_r>
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	d1f2      	bne.n	8008ede <sbrk_aligned+0x22>
 8008ef8:	e7ef      	b.n	8008eda <sbrk_aligned+0x1e>
 8008efa:	bf00      	nop
 8008efc:	200014ac 	.word	0x200014ac

08008f00 <_malloc_r>:
 8008f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f04:	1ccd      	adds	r5, r1, #3
 8008f06:	f025 0503 	bic.w	r5, r5, #3
 8008f0a:	3508      	adds	r5, #8
 8008f0c:	2d0c      	cmp	r5, #12
 8008f0e:	bf38      	it	cc
 8008f10:	250c      	movcc	r5, #12
 8008f12:	2d00      	cmp	r5, #0
 8008f14:	4606      	mov	r6, r0
 8008f16:	db01      	blt.n	8008f1c <_malloc_r+0x1c>
 8008f18:	42a9      	cmp	r1, r5
 8008f1a:	d904      	bls.n	8008f26 <_malloc_r+0x26>
 8008f1c:	230c      	movs	r3, #12
 8008f1e:	6033      	str	r3, [r6, #0]
 8008f20:	2000      	movs	r0, #0
 8008f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ffc <_malloc_r+0xfc>
 8008f2a:	f000 f869 	bl	8009000 <__malloc_lock>
 8008f2e:	f8d8 3000 	ldr.w	r3, [r8]
 8008f32:	461c      	mov	r4, r3
 8008f34:	bb44      	cbnz	r4, 8008f88 <_malloc_r+0x88>
 8008f36:	4629      	mov	r1, r5
 8008f38:	4630      	mov	r0, r6
 8008f3a:	f7ff ffbf 	bl	8008ebc <sbrk_aligned>
 8008f3e:	1c43      	adds	r3, r0, #1
 8008f40:	4604      	mov	r4, r0
 8008f42:	d158      	bne.n	8008ff6 <_malloc_r+0xf6>
 8008f44:	f8d8 4000 	ldr.w	r4, [r8]
 8008f48:	4627      	mov	r7, r4
 8008f4a:	2f00      	cmp	r7, #0
 8008f4c:	d143      	bne.n	8008fd6 <_malloc_r+0xd6>
 8008f4e:	2c00      	cmp	r4, #0
 8008f50:	d04b      	beq.n	8008fea <_malloc_r+0xea>
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	4639      	mov	r1, r7
 8008f56:	4630      	mov	r0, r6
 8008f58:	eb04 0903 	add.w	r9, r4, r3
 8008f5c:	f000 f91a 	bl	8009194 <_sbrk_r>
 8008f60:	4581      	cmp	r9, r0
 8008f62:	d142      	bne.n	8008fea <_malloc_r+0xea>
 8008f64:	6821      	ldr	r1, [r4, #0]
 8008f66:	1a6d      	subs	r5, r5, r1
 8008f68:	4629      	mov	r1, r5
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	f7ff ffa6 	bl	8008ebc <sbrk_aligned>
 8008f70:	3001      	adds	r0, #1
 8008f72:	d03a      	beq.n	8008fea <_malloc_r+0xea>
 8008f74:	6823      	ldr	r3, [r4, #0]
 8008f76:	442b      	add	r3, r5
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f7e:	685a      	ldr	r2, [r3, #4]
 8008f80:	bb62      	cbnz	r2, 8008fdc <_malloc_r+0xdc>
 8008f82:	f8c8 7000 	str.w	r7, [r8]
 8008f86:	e00f      	b.n	8008fa8 <_malloc_r+0xa8>
 8008f88:	6822      	ldr	r2, [r4, #0]
 8008f8a:	1b52      	subs	r2, r2, r5
 8008f8c:	d420      	bmi.n	8008fd0 <_malloc_r+0xd0>
 8008f8e:	2a0b      	cmp	r2, #11
 8008f90:	d917      	bls.n	8008fc2 <_malloc_r+0xc2>
 8008f92:	1961      	adds	r1, r4, r5
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	6025      	str	r5, [r4, #0]
 8008f98:	bf18      	it	ne
 8008f9a:	6059      	strne	r1, [r3, #4]
 8008f9c:	6863      	ldr	r3, [r4, #4]
 8008f9e:	bf08      	it	eq
 8008fa0:	f8c8 1000 	streq.w	r1, [r8]
 8008fa4:	5162      	str	r2, [r4, r5]
 8008fa6:	604b      	str	r3, [r1, #4]
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f000 f82f 	bl	800900c <__malloc_unlock>
 8008fae:	f104 000b 	add.w	r0, r4, #11
 8008fb2:	1d23      	adds	r3, r4, #4
 8008fb4:	f020 0007 	bic.w	r0, r0, #7
 8008fb8:	1ac2      	subs	r2, r0, r3
 8008fba:	bf1c      	itt	ne
 8008fbc:	1a1b      	subne	r3, r3, r0
 8008fbe:	50a3      	strne	r3, [r4, r2]
 8008fc0:	e7af      	b.n	8008f22 <_malloc_r+0x22>
 8008fc2:	6862      	ldr	r2, [r4, #4]
 8008fc4:	42a3      	cmp	r3, r4
 8008fc6:	bf0c      	ite	eq
 8008fc8:	f8c8 2000 	streq.w	r2, [r8]
 8008fcc:	605a      	strne	r2, [r3, #4]
 8008fce:	e7eb      	b.n	8008fa8 <_malloc_r+0xa8>
 8008fd0:	4623      	mov	r3, r4
 8008fd2:	6864      	ldr	r4, [r4, #4]
 8008fd4:	e7ae      	b.n	8008f34 <_malloc_r+0x34>
 8008fd6:	463c      	mov	r4, r7
 8008fd8:	687f      	ldr	r7, [r7, #4]
 8008fda:	e7b6      	b.n	8008f4a <_malloc_r+0x4a>
 8008fdc:	461a      	mov	r2, r3
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	42a3      	cmp	r3, r4
 8008fe2:	d1fb      	bne.n	8008fdc <_malloc_r+0xdc>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	6053      	str	r3, [r2, #4]
 8008fe8:	e7de      	b.n	8008fa8 <_malloc_r+0xa8>
 8008fea:	230c      	movs	r3, #12
 8008fec:	6033      	str	r3, [r6, #0]
 8008fee:	4630      	mov	r0, r6
 8008ff0:	f000 f80c 	bl	800900c <__malloc_unlock>
 8008ff4:	e794      	b.n	8008f20 <_malloc_r+0x20>
 8008ff6:	6005      	str	r5, [r0, #0]
 8008ff8:	e7d6      	b.n	8008fa8 <_malloc_r+0xa8>
 8008ffa:	bf00      	nop
 8008ffc:	200014b0 	.word	0x200014b0

08009000 <__malloc_lock>:
 8009000:	4801      	ldr	r0, [pc, #4]	@ (8009008 <__malloc_lock+0x8>)
 8009002:	f7ff bee8 	b.w	8008dd6 <__retarget_lock_acquire_recursive>
 8009006:	bf00      	nop
 8009008:	200014a8 	.word	0x200014a8

0800900c <__malloc_unlock>:
 800900c:	4801      	ldr	r0, [pc, #4]	@ (8009014 <__malloc_unlock+0x8>)
 800900e:	f7ff bee3 	b.w	8008dd8 <__retarget_lock_release_recursive>
 8009012:	bf00      	nop
 8009014:	200014a8 	.word	0x200014a8

08009018 <__sflush_r>:
 8009018:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800901c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009020:	0716      	lsls	r6, r2, #28
 8009022:	4605      	mov	r5, r0
 8009024:	460c      	mov	r4, r1
 8009026:	d454      	bmi.n	80090d2 <__sflush_r+0xba>
 8009028:	684b      	ldr	r3, [r1, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	dc02      	bgt.n	8009034 <__sflush_r+0x1c>
 800902e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009030:	2b00      	cmp	r3, #0
 8009032:	dd48      	ble.n	80090c6 <__sflush_r+0xae>
 8009034:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009036:	2e00      	cmp	r6, #0
 8009038:	d045      	beq.n	80090c6 <__sflush_r+0xae>
 800903a:	2300      	movs	r3, #0
 800903c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009040:	682f      	ldr	r7, [r5, #0]
 8009042:	6a21      	ldr	r1, [r4, #32]
 8009044:	602b      	str	r3, [r5, #0]
 8009046:	d030      	beq.n	80090aa <__sflush_r+0x92>
 8009048:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800904a:	89a3      	ldrh	r3, [r4, #12]
 800904c:	0759      	lsls	r1, r3, #29
 800904e:	d505      	bpl.n	800905c <__sflush_r+0x44>
 8009050:	6863      	ldr	r3, [r4, #4]
 8009052:	1ad2      	subs	r2, r2, r3
 8009054:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009056:	b10b      	cbz	r3, 800905c <__sflush_r+0x44>
 8009058:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800905a:	1ad2      	subs	r2, r2, r3
 800905c:	2300      	movs	r3, #0
 800905e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009060:	6a21      	ldr	r1, [r4, #32]
 8009062:	4628      	mov	r0, r5
 8009064:	47b0      	blx	r6
 8009066:	1c43      	adds	r3, r0, #1
 8009068:	89a3      	ldrh	r3, [r4, #12]
 800906a:	d106      	bne.n	800907a <__sflush_r+0x62>
 800906c:	6829      	ldr	r1, [r5, #0]
 800906e:	291d      	cmp	r1, #29
 8009070:	d82b      	bhi.n	80090ca <__sflush_r+0xb2>
 8009072:	4a2a      	ldr	r2, [pc, #168]	@ (800911c <__sflush_r+0x104>)
 8009074:	410a      	asrs	r2, r1
 8009076:	07d6      	lsls	r6, r2, #31
 8009078:	d427      	bmi.n	80090ca <__sflush_r+0xb2>
 800907a:	2200      	movs	r2, #0
 800907c:	6062      	str	r2, [r4, #4]
 800907e:	04d9      	lsls	r1, r3, #19
 8009080:	6922      	ldr	r2, [r4, #16]
 8009082:	6022      	str	r2, [r4, #0]
 8009084:	d504      	bpl.n	8009090 <__sflush_r+0x78>
 8009086:	1c42      	adds	r2, r0, #1
 8009088:	d101      	bne.n	800908e <__sflush_r+0x76>
 800908a:	682b      	ldr	r3, [r5, #0]
 800908c:	b903      	cbnz	r3, 8009090 <__sflush_r+0x78>
 800908e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009090:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009092:	602f      	str	r7, [r5, #0]
 8009094:	b1b9      	cbz	r1, 80090c6 <__sflush_r+0xae>
 8009096:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800909a:	4299      	cmp	r1, r3
 800909c:	d002      	beq.n	80090a4 <__sflush_r+0x8c>
 800909e:	4628      	mov	r0, r5
 80090a0:	f7ff feba 	bl	8008e18 <_free_r>
 80090a4:	2300      	movs	r3, #0
 80090a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80090a8:	e00d      	b.n	80090c6 <__sflush_r+0xae>
 80090aa:	2301      	movs	r3, #1
 80090ac:	4628      	mov	r0, r5
 80090ae:	47b0      	blx	r6
 80090b0:	4602      	mov	r2, r0
 80090b2:	1c50      	adds	r0, r2, #1
 80090b4:	d1c9      	bne.n	800904a <__sflush_r+0x32>
 80090b6:	682b      	ldr	r3, [r5, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d0c6      	beq.n	800904a <__sflush_r+0x32>
 80090bc:	2b1d      	cmp	r3, #29
 80090be:	d001      	beq.n	80090c4 <__sflush_r+0xac>
 80090c0:	2b16      	cmp	r3, #22
 80090c2:	d11e      	bne.n	8009102 <__sflush_r+0xea>
 80090c4:	602f      	str	r7, [r5, #0]
 80090c6:	2000      	movs	r0, #0
 80090c8:	e022      	b.n	8009110 <__sflush_r+0xf8>
 80090ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090ce:	b21b      	sxth	r3, r3
 80090d0:	e01b      	b.n	800910a <__sflush_r+0xf2>
 80090d2:	690f      	ldr	r7, [r1, #16]
 80090d4:	2f00      	cmp	r7, #0
 80090d6:	d0f6      	beq.n	80090c6 <__sflush_r+0xae>
 80090d8:	0793      	lsls	r3, r2, #30
 80090da:	680e      	ldr	r6, [r1, #0]
 80090dc:	bf08      	it	eq
 80090de:	694b      	ldreq	r3, [r1, #20]
 80090e0:	600f      	str	r7, [r1, #0]
 80090e2:	bf18      	it	ne
 80090e4:	2300      	movne	r3, #0
 80090e6:	eba6 0807 	sub.w	r8, r6, r7
 80090ea:	608b      	str	r3, [r1, #8]
 80090ec:	f1b8 0f00 	cmp.w	r8, #0
 80090f0:	dde9      	ble.n	80090c6 <__sflush_r+0xae>
 80090f2:	6a21      	ldr	r1, [r4, #32]
 80090f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80090f6:	4643      	mov	r3, r8
 80090f8:	463a      	mov	r2, r7
 80090fa:	4628      	mov	r0, r5
 80090fc:	47b0      	blx	r6
 80090fe:	2800      	cmp	r0, #0
 8009100:	dc08      	bgt.n	8009114 <__sflush_r+0xfc>
 8009102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800910a:	81a3      	strh	r3, [r4, #12]
 800910c:	f04f 30ff 	mov.w	r0, #4294967295
 8009110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009114:	4407      	add	r7, r0
 8009116:	eba8 0800 	sub.w	r8, r8, r0
 800911a:	e7e7      	b.n	80090ec <__sflush_r+0xd4>
 800911c:	dfbffffe 	.word	0xdfbffffe

08009120 <_fflush_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	690b      	ldr	r3, [r1, #16]
 8009124:	4605      	mov	r5, r0
 8009126:	460c      	mov	r4, r1
 8009128:	b913      	cbnz	r3, 8009130 <_fflush_r+0x10>
 800912a:	2500      	movs	r5, #0
 800912c:	4628      	mov	r0, r5
 800912e:	bd38      	pop	{r3, r4, r5, pc}
 8009130:	b118      	cbz	r0, 800913a <_fflush_r+0x1a>
 8009132:	6a03      	ldr	r3, [r0, #32]
 8009134:	b90b      	cbnz	r3, 800913a <_fflush_r+0x1a>
 8009136:	f7ff fd5b 	bl	8008bf0 <__sinit>
 800913a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d0f3      	beq.n	800912a <_fflush_r+0xa>
 8009142:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009144:	07d0      	lsls	r0, r2, #31
 8009146:	d404      	bmi.n	8009152 <_fflush_r+0x32>
 8009148:	0599      	lsls	r1, r3, #22
 800914a:	d402      	bmi.n	8009152 <_fflush_r+0x32>
 800914c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800914e:	f7ff fe42 	bl	8008dd6 <__retarget_lock_acquire_recursive>
 8009152:	4628      	mov	r0, r5
 8009154:	4621      	mov	r1, r4
 8009156:	f7ff ff5f 	bl	8009018 <__sflush_r>
 800915a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800915c:	07da      	lsls	r2, r3, #31
 800915e:	4605      	mov	r5, r0
 8009160:	d4e4      	bmi.n	800912c <_fflush_r+0xc>
 8009162:	89a3      	ldrh	r3, [r4, #12]
 8009164:	059b      	lsls	r3, r3, #22
 8009166:	d4e1      	bmi.n	800912c <_fflush_r+0xc>
 8009168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800916a:	f7ff fe35 	bl	8008dd8 <__retarget_lock_release_recursive>
 800916e:	e7dd      	b.n	800912c <_fflush_r+0xc>

08009170 <fiprintf>:
 8009170:	b40e      	push	{r1, r2, r3}
 8009172:	b503      	push	{r0, r1, lr}
 8009174:	4601      	mov	r1, r0
 8009176:	ab03      	add	r3, sp, #12
 8009178:	4805      	ldr	r0, [pc, #20]	@ (8009190 <fiprintf+0x20>)
 800917a:	f853 2b04 	ldr.w	r2, [r3], #4
 800917e:	6800      	ldr	r0, [r0, #0]
 8009180:	9301      	str	r3, [sp, #4]
 8009182:	f000 f847 	bl	8009214 <_vfiprintf_r>
 8009186:	b002      	add	sp, #8
 8009188:	f85d eb04 	ldr.w	lr, [sp], #4
 800918c:	b003      	add	sp, #12
 800918e:	4770      	bx	lr
 8009190:	20000064 	.word	0x20000064

08009194 <_sbrk_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	4d06      	ldr	r5, [pc, #24]	@ (80091b0 <_sbrk_r+0x1c>)
 8009198:	2300      	movs	r3, #0
 800919a:	4604      	mov	r4, r0
 800919c:	4608      	mov	r0, r1
 800919e:	602b      	str	r3, [r5, #0]
 80091a0:	f7fa fb0a 	bl	80037b8 <_sbrk>
 80091a4:	1c43      	adds	r3, r0, #1
 80091a6:	d102      	bne.n	80091ae <_sbrk_r+0x1a>
 80091a8:	682b      	ldr	r3, [r5, #0]
 80091aa:	b103      	cbz	r3, 80091ae <_sbrk_r+0x1a>
 80091ac:	6023      	str	r3, [r4, #0]
 80091ae:	bd38      	pop	{r3, r4, r5, pc}
 80091b0:	200014a4 	.word	0x200014a4

080091b4 <abort>:
 80091b4:	b508      	push	{r3, lr}
 80091b6:	2006      	movs	r0, #6
 80091b8:	f000 fb8e 	bl	80098d8 <raise>
 80091bc:	2001      	movs	r0, #1
 80091be:	f7fa fa83 	bl	80036c8 <_exit>

080091c2 <__sfputc_r>:
 80091c2:	6893      	ldr	r3, [r2, #8]
 80091c4:	3b01      	subs	r3, #1
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	b410      	push	{r4}
 80091ca:	6093      	str	r3, [r2, #8]
 80091cc:	da08      	bge.n	80091e0 <__sfputc_r+0x1e>
 80091ce:	6994      	ldr	r4, [r2, #24]
 80091d0:	42a3      	cmp	r3, r4
 80091d2:	db01      	blt.n	80091d8 <__sfputc_r+0x16>
 80091d4:	290a      	cmp	r1, #10
 80091d6:	d103      	bne.n	80091e0 <__sfputc_r+0x1e>
 80091d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091dc:	f000 bac0 	b.w	8009760 <__swbuf_r>
 80091e0:	6813      	ldr	r3, [r2, #0]
 80091e2:	1c58      	adds	r0, r3, #1
 80091e4:	6010      	str	r0, [r2, #0]
 80091e6:	7019      	strb	r1, [r3, #0]
 80091e8:	4608      	mov	r0, r1
 80091ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <__sfputs_r>:
 80091f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f2:	4606      	mov	r6, r0
 80091f4:	460f      	mov	r7, r1
 80091f6:	4614      	mov	r4, r2
 80091f8:	18d5      	adds	r5, r2, r3
 80091fa:	42ac      	cmp	r4, r5
 80091fc:	d101      	bne.n	8009202 <__sfputs_r+0x12>
 80091fe:	2000      	movs	r0, #0
 8009200:	e007      	b.n	8009212 <__sfputs_r+0x22>
 8009202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009206:	463a      	mov	r2, r7
 8009208:	4630      	mov	r0, r6
 800920a:	f7ff ffda 	bl	80091c2 <__sfputc_r>
 800920e:	1c43      	adds	r3, r0, #1
 8009210:	d1f3      	bne.n	80091fa <__sfputs_r+0xa>
 8009212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009214 <_vfiprintf_r>:
 8009214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009218:	460d      	mov	r5, r1
 800921a:	b09d      	sub	sp, #116	@ 0x74
 800921c:	4614      	mov	r4, r2
 800921e:	4698      	mov	r8, r3
 8009220:	4606      	mov	r6, r0
 8009222:	b118      	cbz	r0, 800922c <_vfiprintf_r+0x18>
 8009224:	6a03      	ldr	r3, [r0, #32]
 8009226:	b90b      	cbnz	r3, 800922c <_vfiprintf_r+0x18>
 8009228:	f7ff fce2 	bl	8008bf0 <__sinit>
 800922c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800922e:	07d9      	lsls	r1, r3, #31
 8009230:	d405      	bmi.n	800923e <_vfiprintf_r+0x2a>
 8009232:	89ab      	ldrh	r3, [r5, #12]
 8009234:	059a      	lsls	r2, r3, #22
 8009236:	d402      	bmi.n	800923e <_vfiprintf_r+0x2a>
 8009238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800923a:	f7ff fdcc 	bl	8008dd6 <__retarget_lock_acquire_recursive>
 800923e:	89ab      	ldrh	r3, [r5, #12]
 8009240:	071b      	lsls	r3, r3, #28
 8009242:	d501      	bpl.n	8009248 <_vfiprintf_r+0x34>
 8009244:	692b      	ldr	r3, [r5, #16]
 8009246:	b99b      	cbnz	r3, 8009270 <_vfiprintf_r+0x5c>
 8009248:	4629      	mov	r1, r5
 800924a:	4630      	mov	r0, r6
 800924c:	f000 fac6 	bl	80097dc <__swsetup_r>
 8009250:	b170      	cbz	r0, 8009270 <_vfiprintf_r+0x5c>
 8009252:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009254:	07dc      	lsls	r4, r3, #31
 8009256:	d504      	bpl.n	8009262 <_vfiprintf_r+0x4e>
 8009258:	f04f 30ff 	mov.w	r0, #4294967295
 800925c:	b01d      	add	sp, #116	@ 0x74
 800925e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009262:	89ab      	ldrh	r3, [r5, #12]
 8009264:	0598      	lsls	r0, r3, #22
 8009266:	d4f7      	bmi.n	8009258 <_vfiprintf_r+0x44>
 8009268:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800926a:	f7ff fdb5 	bl	8008dd8 <__retarget_lock_release_recursive>
 800926e:	e7f3      	b.n	8009258 <_vfiprintf_r+0x44>
 8009270:	2300      	movs	r3, #0
 8009272:	9309      	str	r3, [sp, #36]	@ 0x24
 8009274:	2320      	movs	r3, #32
 8009276:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800927a:	f8cd 800c 	str.w	r8, [sp, #12]
 800927e:	2330      	movs	r3, #48	@ 0x30
 8009280:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009430 <_vfiprintf_r+0x21c>
 8009284:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009288:	f04f 0901 	mov.w	r9, #1
 800928c:	4623      	mov	r3, r4
 800928e:	469a      	mov	sl, r3
 8009290:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009294:	b10a      	cbz	r2, 800929a <_vfiprintf_r+0x86>
 8009296:	2a25      	cmp	r2, #37	@ 0x25
 8009298:	d1f9      	bne.n	800928e <_vfiprintf_r+0x7a>
 800929a:	ebba 0b04 	subs.w	fp, sl, r4
 800929e:	d00b      	beq.n	80092b8 <_vfiprintf_r+0xa4>
 80092a0:	465b      	mov	r3, fp
 80092a2:	4622      	mov	r2, r4
 80092a4:	4629      	mov	r1, r5
 80092a6:	4630      	mov	r0, r6
 80092a8:	f7ff ffa2 	bl	80091f0 <__sfputs_r>
 80092ac:	3001      	adds	r0, #1
 80092ae:	f000 80a7 	beq.w	8009400 <_vfiprintf_r+0x1ec>
 80092b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092b4:	445a      	add	r2, fp
 80092b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80092b8:	f89a 3000 	ldrb.w	r3, [sl]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 809f 	beq.w	8009400 <_vfiprintf_r+0x1ec>
 80092c2:	2300      	movs	r3, #0
 80092c4:	f04f 32ff 	mov.w	r2, #4294967295
 80092c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092cc:	f10a 0a01 	add.w	sl, sl, #1
 80092d0:	9304      	str	r3, [sp, #16]
 80092d2:	9307      	str	r3, [sp, #28]
 80092d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80092da:	4654      	mov	r4, sl
 80092dc:	2205      	movs	r2, #5
 80092de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e2:	4853      	ldr	r0, [pc, #332]	@ (8009430 <_vfiprintf_r+0x21c>)
 80092e4:	f7f6 ff74 	bl	80001d0 <memchr>
 80092e8:	9a04      	ldr	r2, [sp, #16]
 80092ea:	b9d8      	cbnz	r0, 8009324 <_vfiprintf_r+0x110>
 80092ec:	06d1      	lsls	r1, r2, #27
 80092ee:	bf44      	itt	mi
 80092f0:	2320      	movmi	r3, #32
 80092f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092f6:	0713      	lsls	r3, r2, #28
 80092f8:	bf44      	itt	mi
 80092fa:	232b      	movmi	r3, #43	@ 0x2b
 80092fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009300:	f89a 3000 	ldrb.w	r3, [sl]
 8009304:	2b2a      	cmp	r3, #42	@ 0x2a
 8009306:	d015      	beq.n	8009334 <_vfiprintf_r+0x120>
 8009308:	9a07      	ldr	r2, [sp, #28]
 800930a:	4654      	mov	r4, sl
 800930c:	2000      	movs	r0, #0
 800930e:	f04f 0c0a 	mov.w	ip, #10
 8009312:	4621      	mov	r1, r4
 8009314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009318:	3b30      	subs	r3, #48	@ 0x30
 800931a:	2b09      	cmp	r3, #9
 800931c:	d94b      	bls.n	80093b6 <_vfiprintf_r+0x1a2>
 800931e:	b1b0      	cbz	r0, 800934e <_vfiprintf_r+0x13a>
 8009320:	9207      	str	r2, [sp, #28]
 8009322:	e014      	b.n	800934e <_vfiprintf_r+0x13a>
 8009324:	eba0 0308 	sub.w	r3, r0, r8
 8009328:	fa09 f303 	lsl.w	r3, r9, r3
 800932c:	4313      	orrs	r3, r2
 800932e:	9304      	str	r3, [sp, #16]
 8009330:	46a2      	mov	sl, r4
 8009332:	e7d2      	b.n	80092da <_vfiprintf_r+0xc6>
 8009334:	9b03      	ldr	r3, [sp, #12]
 8009336:	1d19      	adds	r1, r3, #4
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	9103      	str	r1, [sp, #12]
 800933c:	2b00      	cmp	r3, #0
 800933e:	bfbb      	ittet	lt
 8009340:	425b      	neglt	r3, r3
 8009342:	f042 0202 	orrlt.w	r2, r2, #2
 8009346:	9307      	strge	r3, [sp, #28]
 8009348:	9307      	strlt	r3, [sp, #28]
 800934a:	bfb8      	it	lt
 800934c:	9204      	strlt	r2, [sp, #16]
 800934e:	7823      	ldrb	r3, [r4, #0]
 8009350:	2b2e      	cmp	r3, #46	@ 0x2e
 8009352:	d10a      	bne.n	800936a <_vfiprintf_r+0x156>
 8009354:	7863      	ldrb	r3, [r4, #1]
 8009356:	2b2a      	cmp	r3, #42	@ 0x2a
 8009358:	d132      	bne.n	80093c0 <_vfiprintf_r+0x1ac>
 800935a:	9b03      	ldr	r3, [sp, #12]
 800935c:	1d1a      	adds	r2, r3, #4
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	9203      	str	r2, [sp, #12]
 8009362:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009366:	3402      	adds	r4, #2
 8009368:	9305      	str	r3, [sp, #20]
 800936a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009440 <_vfiprintf_r+0x22c>
 800936e:	7821      	ldrb	r1, [r4, #0]
 8009370:	2203      	movs	r2, #3
 8009372:	4650      	mov	r0, sl
 8009374:	f7f6 ff2c 	bl	80001d0 <memchr>
 8009378:	b138      	cbz	r0, 800938a <_vfiprintf_r+0x176>
 800937a:	9b04      	ldr	r3, [sp, #16]
 800937c:	eba0 000a 	sub.w	r0, r0, sl
 8009380:	2240      	movs	r2, #64	@ 0x40
 8009382:	4082      	lsls	r2, r0
 8009384:	4313      	orrs	r3, r2
 8009386:	3401      	adds	r4, #1
 8009388:	9304      	str	r3, [sp, #16]
 800938a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938e:	4829      	ldr	r0, [pc, #164]	@ (8009434 <_vfiprintf_r+0x220>)
 8009390:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009394:	2206      	movs	r2, #6
 8009396:	f7f6 ff1b 	bl	80001d0 <memchr>
 800939a:	2800      	cmp	r0, #0
 800939c:	d03f      	beq.n	800941e <_vfiprintf_r+0x20a>
 800939e:	4b26      	ldr	r3, [pc, #152]	@ (8009438 <_vfiprintf_r+0x224>)
 80093a0:	bb1b      	cbnz	r3, 80093ea <_vfiprintf_r+0x1d6>
 80093a2:	9b03      	ldr	r3, [sp, #12]
 80093a4:	3307      	adds	r3, #7
 80093a6:	f023 0307 	bic.w	r3, r3, #7
 80093aa:	3308      	adds	r3, #8
 80093ac:	9303      	str	r3, [sp, #12]
 80093ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b0:	443b      	add	r3, r7
 80093b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093b4:	e76a      	b.n	800928c <_vfiprintf_r+0x78>
 80093b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80093ba:	460c      	mov	r4, r1
 80093bc:	2001      	movs	r0, #1
 80093be:	e7a8      	b.n	8009312 <_vfiprintf_r+0xfe>
 80093c0:	2300      	movs	r3, #0
 80093c2:	3401      	adds	r4, #1
 80093c4:	9305      	str	r3, [sp, #20]
 80093c6:	4619      	mov	r1, r3
 80093c8:	f04f 0c0a 	mov.w	ip, #10
 80093cc:	4620      	mov	r0, r4
 80093ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093d2:	3a30      	subs	r2, #48	@ 0x30
 80093d4:	2a09      	cmp	r2, #9
 80093d6:	d903      	bls.n	80093e0 <_vfiprintf_r+0x1cc>
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d0c6      	beq.n	800936a <_vfiprintf_r+0x156>
 80093dc:	9105      	str	r1, [sp, #20]
 80093de:	e7c4      	b.n	800936a <_vfiprintf_r+0x156>
 80093e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80093e4:	4604      	mov	r4, r0
 80093e6:	2301      	movs	r3, #1
 80093e8:	e7f0      	b.n	80093cc <_vfiprintf_r+0x1b8>
 80093ea:	ab03      	add	r3, sp, #12
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	462a      	mov	r2, r5
 80093f0:	4b12      	ldr	r3, [pc, #72]	@ (800943c <_vfiprintf_r+0x228>)
 80093f2:	a904      	add	r1, sp, #16
 80093f4:	4630      	mov	r0, r6
 80093f6:	f3af 8000 	nop.w
 80093fa:	4607      	mov	r7, r0
 80093fc:	1c78      	adds	r0, r7, #1
 80093fe:	d1d6      	bne.n	80093ae <_vfiprintf_r+0x19a>
 8009400:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009402:	07d9      	lsls	r1, r3, #31
 8009404:	d405      	bmi.n	8009412 <_vfiprintf_r+0x1fe>
 8009406:	89ab      	ldrh	r3, [r5, #12]
 8009408:	059a      	lsls	r2, r3, #22
 800940a:	d402      	bmi.n	8009412 <_vfiprintf_r+0x1fe>
 800940c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800940e:	f7ff fce3 	bl	8008dd8 <__retarget_lock_release_recursive>
 8009412:	89ab      	ldrh	r3, [r5, #12]
 8009414:	065b      	lsls	r3, r3, #25
 8009416:	f53f af1f 	bmi.w	8009258 <_vfiprintf_r+0x44>
 800941a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800941c:	e71e      	b.n	800925c <_vfiprintf_r+0x48>
 800941e:	ab03      	add	r3, sp, #12
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	462a      	mov	r2, r5
 8009424:	4b05      	ldr	r3, [pc, #20]	@ (800943c <_vfiprintf_r+0x228>)
 8009426:	a904      	add	r1, sp, #16
 8009428:	4630      	mov	r0, r6
 800942a:	f000 f879 	bl	8009520 <_printf_i>
 800942e:	e7e4      	b.n	80093fa <_vfiprintf_r+0x1e6>
 8009430:	0800cd6f 	.word	0x0800cd6f
 8009434:	0800cd79 	.word	0x0800cd79
 8009438:	00000000 	.word	0x00000000
 800943c:	080091f1 	.word	0x080091f1
 8009440:	0800cd75 	.word	0x0800cd75

08009444 <_printf_common>:
 8009444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009448:	4616      	mov	r6, r2
 800944a:	4698      	mov	r8, r3
 800944c:	688a      	ldr	r2, [r1, #8]
 800944e:	690b      	ldr	r3, [r1, #16]
 8009450:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009454:	4293      	cmp	r3, r2
 8009456:	bfb8      	it	lt
 8009458:	4613      	movlt	r3, r2
 800945a:	6033      	str	r3, [r6, #0]
 800945c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009460:	4607      	mov	r7, r0
 8009462:	460c      	mov	r4, r1
 8009464:	b10a      	cbz	r2, 800946a <_printf_common+0x26>
 8009466:	3301      	adds	r3, #1
 8009468:	6033      	str	r3, [r6, #0]
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	0699      	lsls	r1, r3, #26
 800946e:	bf42      	ittt	mi
 8009470:	6833      	ldrmi	r3, [r6, #0]
 8009472:	3302      	addmi	r3, #2
 8009474:	6033      	strmi	r3, [r6, #0]
 8009476:	6825      	ldr	r5, [r4, #0]
 8009478:	f015 0506 	ands.w	r5, r5, #6
 800947c:	d106      	bne.n	800948c <_printf_common+0x48>
 800947e:	f104 0a19 	add.w	sl, r4, #25
 8009482:	68e3      	ldr	r3, [r4, #12]
 8009484:	6832      	ldr	r2, [r6, #0]
 8009486:	1a9b      	subs	r3, r3, r2
 8009488:	42ab      	cmp	r3, r5
 800948a:	dc26      	bgt.n	80094da <_printf_common+0x96>
 800948c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009490:	6822      	ldr	r2, [r4, #0]
 8009492:	3b00      	subs	r3, #0
 8009494:	bf18      	it	ne
 8009496:	2301      	movne	r3, #1
 8009498:	0692      	lsls	r2, r2, #26
 800949a:	d42b      	bmi.n	80094f4 <_printf_common+0xb0>
 800949c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80094a0:	4641      	mov	r1, r8
 80094a2:	4638      	mov	r0, r7
 80094a4:	47c8      	blx	r9
 80094a6:	3001      	adds	r0, #1
 80094a8:	d01e      	beq.n	80094e8 <_printf_common+0xa4>
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	6922      	ldr	r2, [r4, #16]
 80094ae:	f003 0306 	and.w	r3, r3, #6
 80094b2:	2b04      	cmp	r3, #4
 80094b4:	bf02      	ittt	eq
 80094b6:	68e5      	ldreq	r5, [r4, #12]
 80094b8:	6833      	ldreq	r3, [r6, #0]
 80094ba:	1aed      	subeq	r5, r5, r3
 80094bc:	68a3      	ldr	r3, [r4, #8]
 80094be:	bf0c      	ite	eq
 80094c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094c4:	2500      	movne	r5, #0
 80094c6:	4293      	cmp	r3, r2
 80094c8:	bfc4      	itt	gt
 80094ca:	1a9b      	subgt	r3, r3, r2
 80094cc:	18ed      	addgt	r5, r5, r3
 80094ce:	2600      	movs	r6, #0
 80094d0:	341a      	adds	r4, #26
 80094d2:	42b5      	cmp	r5, r6
 80094d4:	d11a      	bne.n	800950c <_printf_common+0xc8>
 80094d6:	2000      	movs	r0, #0
 80094d8:	e008      	b.n	80094ec <_printf_common+0xa8>
 80094da:	2301      	movs	r3, #1
 80094dc:	4652      	mov	r2, sl
 80094de:	4641      	mov	r1, r8
 80094e0:	4638      	mov	r0, r7
 80094e2:	47c8      	blx	r9
 80094e4:	3001      	adds	r0, #1
 80094e6:	d103      	bne.n	80094f0 <_printf_common+0xac>
 80094e8:	f04f 30ff 	mov.w	r0, #4294967295
 80094ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094f0:	3501      	adds	r5, #1
 80094f2:	e7c6      	b.n	8009482 <_printf_common+0x3e>
 80094f4:	18e1      	adds	r1, r4, r3
 80094f6:	1c5a      	adds	r2, r3, #1
 80094f8:	2030      	movs	r0, #48	@ 0x30
 80094fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80094fe:	4422      	add	r2, r4
 8009500:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009504:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009508:	3302      	adds	r3, #2
 800950a:	e7c7      	b.n	800949c <_printf_common+0x58>
 800950c:	2301      	movs	r3, #1
 800950e:	4622      	mov	r2, r4
 8009510:	4641      	mov	r1, r8
 8009512:	4638      	mov	r0, r7
 8009514:	47c8      	blx	r9
 8009516:	3001      	adds	r0, #1
 8009518:	d0e6      	beq.n	80094e8 <_printf_common+0xa4>
 800951a:	3601      	adds	r6, #1
 800951c:	e7d9      	b.n	80094d2 <_printf_common+0x8e>
	...

08009520 <_printf_i>:
 8009520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009524:	7e0f      	ldrb	r7, [r1, #24]
 8009526:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009528:	2f78      	cmp	r7, #120	@ 0x78
 800952a:	4691      	mov	r9, r2
 800952c:	4680      	mov	r8, r0
 800952e:	460c      	mov	r4, r1
 8009530:	469a      	mov	sl, r3
 8009532:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009536:	d807      	bhi.n	8009548 <_printf_i+0x28>
 8009538:	2f62      	cmp	r7, #98	@ 0x62
 800953a:	d80a      	bhi.n	8009552 <_printf_i+0x32>
 800953c:	2f00      	cmp	r7, #0
 800953e:	f000 80d2 	beq.w	80096e6 <_printf_i+0x1c6>
 8009542:	2f58      	cmp	r7, #88	@ 0x58
 8009544:	f000 80b9 	beq.w	80096ba <_printf_i+0x19a>
 8009548:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800954c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009550:	e03a      	b.n	80095c8 <_printf_i+0xa8>
 8009552:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009556:	2b15      	cmp	r3, #21
 8009558:	d8f6      	bhi.n	8009548 <_printf_i+0x28>
 800955a:	a101      	add	r1, pc, #4	@ (adr r1, 8009560 <_printf_i+0x40>)
 800955c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009560:	080095b9 	.word	0x080095b9
 8009564:	080095cd 	.word	0x080095cd
 8009568:	08009549 	.word	0x08009549
 800956c:	08009549 	.word	0x08009549
 8009570:	08009549 	.word	0x08009549
 8009574:	08009549 	.word	0x08009549
 8009578:	080095cd 	.word	0x080095cd
 800957c:	08009549 	.word	0x08009549
 8009580:	08009549 	.word	0x08009549
 8009584:	08009549 	.word	0x08009549
 8009588:	08009549 	.word	0x08009549
 800958c:	080096cd 	.word	0x080096cd
 8009590:	080095f7 	.word	0x080095f7
 8009594:	08009687 	.word	0x08009687
 8009598:	08009549 	.word	0x08009549
 800959c:	08009549 	.word	0x08009549
 80095a0:	080096ef 	.word	0x080096ef
 80095a4:	08009549 	.word	0x08009549
 80095a8:	080095f7 	.word	0x080095f7
 80095ac:	08009549 	.word	0x08009549
 80095b0:	08009549 	.word	0x08009549
 80095b4:	0800968f 	.word	0x0800968f
 80095b8:	6833      	ldr	r3, [r6, #0]
 80095ba:	1d1a      	adds	r2, r3, #4
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	6032      	str	r2, [r6, #0]
 80095c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80095c8:	2301      	movs	r3, #1
 80095ca:	e09d      	b.n	8009708 <_printf_i+0x1e8>
 80095cc:	6833      	ldr	r3, [r6, #0]
 80095ce:	6820      	ldr	r0, [r4, #0]
 80095d0:	1d19      	adds	r1, r3, #4
 80095d2:	6031      	str	r1, [r6, #0]
 80095d4:	0606      	lsls	r6, r0, #24
 80095d6:	d501      	bpl.n	80095dc <_printf_i+0xbc>
 80095d8:	681d      	ldr	r5, [r3, #0]
 80095da:	e003      	b.n	80095e4 <_printf_i+0xc4>
 80095dc:	0645      	lsls	r5, r0, #25
 80095de:	d5fb      	bpl.n	80095d8 <_printf_i+0xb8>
 80095e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80095e4:	2d00      	cmp	r5, #0
 80095e6:	da03      	bge.n	80095f0 <_printf_i+0xd0>
 80095e8:	232d      	movs	r3, #45	@ 0x2d
 80095ea:	426d      	negs	r5, r5
 80095ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095f0:	4859      	ldr	r0, [pc, #356]	@ (8009758 <_printf_i+0x238>)
 80095f2:	230a      	movs	r3, #10
 80095f4:	e011      	b.n	800961a <_printf_i+0xfa>
 80095f6:	6821      	ldr	r1, [r4, #0]
 80095f8:	6833      	ldr	r3, [r6, #0]
 80095fa:	0608      	lsls	r0, r1, #24
 80095fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009600:	d402      	bmi.n	8009608 <_printf_i+0xe8>
 8009602:	0649      	lsls	r1, r1, #25
 8009604:	bf48      	it	mi
 8009606:	b2ad      	uxthmi	r5, r5
 8009608:	2f6f      	cmp	r7, #111	@ 0x6f
 800960a:	4853      	ldr	r0, [pc, #332]	@ (8009758 <_printf_i+0x238>)
 800960c:	6033      	str	r3, [r6, #0]
 800960e:	bf14      	ite	ne
 8009610:	230a      	movne	r3, #10
 8009612:	2308      	moveq	r3, #8
 8009614:	2100      	movs	r1, #0
 8009616:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800961a:	6866      	ldr	r6, [r4, #4]
 800961c:	60a6      	str	r6, [r4, #8]
 800961e:	2e00      	cmp	r6, #0
 8009620:	bfa2      	ittt	ge
 8009622:	6821      	ldrge	r1, [r4, #0]
 8009624:	f021 0104 	bicge.w	r1, r1, #4
 8009628:	6021      	strge	r1, [r4, #0]
 800962a:	b90d      	cbnz	r5, 8009630 <_printf_i+0x110>
 800962c:	2e00      	cmp	r6, #0
 800962e:	d04b      	beq.n	80096c8 <_printf_i+0x1a8>
 8009630:	4616      	mov	r6, r2
 8009632:	fbb5 f1f3 	udiv	r1, r5, r3
 8009636:	fb03 5711 	mls	r7, r3, r1, r5
 800963a:	5dc7      	ldrb	r7, [r0, r7]
 800963c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009640:	462f      	mov	r7, r5
 8009642:	42bb      	cmp	r3, r7
 8009644:	460d      	mov	r5, r1
 8009646:	d9f4      	bls.n	8009632 <_printf_i+0x112>
 8009648:	2b08      	cmp	r3, #8
 800964a:	d10b      	bne.n	8009664 <_printf_i+0x144>
 800964c:	6823      	ldr	r3, [r4, #0]
 800964e:	07df      	lsls	r7, r3, #31
 8009650:	d508      	bpl.n	8009664 <_printf_i+0x144>
 8009652:	6923      	ldr	r3, [r4, #16]
 8009654:	6861      	ldr	r1, [r4, #4]
 8009656:	4299      	cmp	r1, r3
 8009658:	bfde      	ittt	le
 800965a:	2330      	movle	r3, #48	@ 0x30
 800965c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009660:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009664:	1b92      	subs	r2, r2, r6
 8009666:	6122      	str	r2, [r4, #16]
 8009668:	f8cd a000 	str.w	sl, [sp]
 800966c:	464b      	mov	r3, r9
 800966e:	aa03      	add	r2, sp, #12
 8009670:	4621      	mov	r1, r4
 8009672:	4640      	mov	r0, r8
 8009674:	f7ff fee6 	bl	8009444 <_printf_common>
 8009678:	3001      	adds	r0, #1
 800967a:	d14a      	bne.n	8009712 <_printf_i+0x1f2>
 800967c:	f04f 30ff 	mov.w	r0, #4294967295
 8009680:	b004      	add	sp, #16
 8009682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	f043 0320 	orr.w	r3, r3, #32
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	4833      	ldr	r0, [pc, #204]	@ (800975c <_printf_i+0x23c>)
 8009690:	2778      	movs	r7, #120	@ 0x78
 8009692:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	6831      	ldr	r1, [r6, #0]
 800969a:	061f      	lsls	r7, r3, #24
 800969c:	f851 5b04 	ldr.w	r5, [r1], #4
 80096a0:	d402      	bmi.n	80096a8 <_printf_i+0x188>
 80096a2:	065f      	lsls	r7, r3, #25
 80096a4:	bf48      	it	mi
 80096a6:	b2ad      	uxthmi	r5, r5
 80096a8:	6031      	str	r1, [r6, #0]
 80096aa:	07d9      	lsls	r1, r3, #31
 80096ac:	bf44      	itt	mi
 80096ae:	f043 0320 	orrmi.w	r3, r3, #32
 80096b2:	6023      	strmi	r3, [r4, #0]
 80096b4:	b11d      	cbz	r5, 80096be <_printf_i+0x19e>
 80096b6:	2310      	movs	r3, #16
 80096b8:	e7ac      	b.n	8009614 <_printf_i+0xf4>
 80096ba:	4827      	ldr	r0, [pc, #156]	@ (8009758 <_printf_i+0x238>)
 80096bc:	e7e9      	b.n	8009692 <_printf_i+0x172>
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	f023 0320 	bic.w	r3, r3, #32
 80096c4:	6023      	str	r3, [r4, #0]
 80096c6:	e7f6      	b.n	80096b6 <_printf_i+0x196>
 80096c8:	4616      	mov	r6, r2
 80096ca:	e7bd      	b.n	8009648 <_printf_i+0x128>
 80096cc:	6833      	ldr	r3, [r6, #0]
 80096ce:	6825      	ldr	r5, [r4, #0]
 80096d0:	6961      	ldr	r1, [r4, #20]
 80096d2:	1d18      	adds	r0, r3, #4
 80096d4:	6030      	str	r0, [r6, #0]
 80096d6:	062e      	lsls	r6, r5, #24
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	d501      	bpl.n	80096e0 <_printf_i+0x1c0>
 80096dc:	6019      	str	r1, [r3, #0]
 80096de:	e002      	b.n	80096e6 <_printf_i+0x1c6>
 80096e0:	0668      	lsls	r0, r5, #25
 80096e2:	d5fb      	bpl.n	80096dc <_printf_i+0x1bc>
 80096e4:	8019      	strh	r1, [r3, #0]
 80096e6:	2300      	movs	r3, #0
 80096e8:	6123      	str	r3, [r4, #16]
 80096ea:	4616      	mov	r6, r2
 80096ec:	e7bc      	b.n	8009668 <_printf_i+0x148>
 80096ee:	6833      	ldr	r3, [r6, #0]
 80096f0:	1d1a      	adds	r2, r3, #4
 80096f2:	6032      	str	r2, [r6, #0]
 80096f4:	681e      	ldr	r6, [r3, #0]
 80096f6:	6862      	ldr	r2, [r4, #4]
 80096f8:	2100      	movs	r1, #0
 80096fa:	4630      	mov	r0, r6
 80096fc:	f7f6 fd68 	bl	80001d0 <memchr>
 8009700:	b108      	cbz	r0, 8009706 <_printf_i+0x1e6>
 8009702:	1b80      	subs	r0, r0, r6
 8009704:	6060      	str	r0, [r4, #4]
 8009706:	6863      	ldr	r3, [r4, #4]
 8009708:	6123      	str	r3, [r4, #16]
 800970a:	2300      	movs	r3, #0
 800970c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009710:	e7aa      	b.n	8009668 <_printf_i+0x148>
 8009712:	6923      	ldr	r3, [r4, #16]
 8009714:	4632      	mov	r2, r6
 8009716:	4649      	mov	r1, r9
 8009718:	4640      	mov	r0, r8
 800971a:	47d0      	blx	sl
 800971c:	3001      	adds	r0, #1
 800971e:	d0ad      	beq.n	800967c <_printf_i+0x15c>
 8009720:	6823      	ldr	r3, [r4, #0]
 8009722:	079b      	lsls	r3, r3, #30
 8009724:	d413      	bmi.n	800974e <_printf_i+0x22e>
 8009726:	68e0      	ldr	r0, [r4, #12]
 8009728:	9b03      	ldr	r3, [sp, #12]
 800972a:	4298      	cmp	r0, r3
 800972c:	bfb8      	it	lt
 800972e:	4618      	movlt	r0, r3
 8009730:	e7a6      	b.n	8009680 <_printf_i+0x160>
 8009732:	2301      	movs	r3, #1
 8009734:	4632      	mov	r2, r6
 8009736:	4649      	mov	r1, r9
 8009738:	4640      	mov	r0, r8
 800973a:	47d0      	blx	sl
 800973c:	3001      	adds	r0, #1
 800973e:	d09d      	beq.n	800967c <_printf_i+0x15c>
 8009740:	3501      	adds	r5, #1
 8009742:	68e3      	ldr	r3, [r4, #12]
 8009744:	9903      	ldr	r1, [sp, #12]
 8009746:	1a5b      	subs	r3, r3, r1
 8009748:	42ab      	cmp	r3, r5
 800974a:	dcf2      	bgt.n	8009732 <_printf_i+0x212>
 800974c:	e7eb      	b.n	8009726 <_printf_i+0x206>
 800974e:	2500      	movs	r5, #0
 8009750:	f104 0619 	add.w	r6, r4, #25
 8009754:	e7f5      	b.n	8009742 <_printf_i+0x222>
 8009756:	bf00      	nop
 8009758:	0800cd80 	.word	0x0800cd80
 800975c:	0800cd91 	.word	0x0800cd91

08009760 <__swbuf_r>:
 8009760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009762:	460e      	mov	r6, r1
 8009764:	4614      	mov	r4, r2
 8009766:	4605      	mov	r5, r0
 8009768:	b118      	cbz	r0, 8009772 <__swbuf_r+0x12>
 800976a:	6a03      	ldr	r3, [r0, #32]
 800976c:	b90b      	cbnz	r3, 8009772 <__swbuf_r+0x12>
 800976e:	f7ff fa3f 	bl	8008bf0 <__sinit>
 8009772:	69a3      	ldr	r3, [r4, #24]
 8009774:	60a3      	str	r3, [r4, #8]
 8009776:	89a3      	ldrh	r3, [r4, #12]
 8009778:	071a      	lsls	r2, r3, #28
 800977a:	d501      	bpl.n	8009780 <__swbuf_r+0x20>
 800977c:	6923      	ldr	r3, [r4, #16]
 800977e:	b943      	cbnz	r3, 8009792 <__swbuf_r+0x32>
 8009780:	4621      	mov	r1, r4
 8009782:	4628      	mov	r0, r5
 8009784:	f000 f82a 	bl	80097dc <__swsetup_r>
 8009788:	b118      	cbz	r0, 8009792 <__swbuf_r+0x32>
 800978a:	f04f 37ff 	mov.w	r7, #4294967295
 800978e:	4638      	mov	r0, r7
 8009790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009792:	6823      	ldr	r3, [r4, #0]
 8009794:	6922      	ldr	r2, [r4, #16]
 8009796:	1a98      	subs	r0, r3, r2
 8009798:	6963      	ldr	r3, [r4, #20]
 800979a:	b2f6      	uxtb	r6, r6
 800979c:	4283      	cmp	r3, r0
 800979e:	4637      	mov	r7, r6
 80097a0:	dc05      	bgt.n	80097ae <__swbuf_r+0x4e>
 80097a2:	4621      	mov	r1, r4
 80097a4:	4628      	mov	r0, r5
 80097a6:	f7ff fcbb 	bl	8009120 <_fflush_r>
 80097aa:	2800      	cmp	r0, #0
 80097ac:	d1ed      	bne.n	800978a <__swbuf_r+0x2a>
 80097ae:	68a3      	ldr	r3, [r4, #8]
 80097b0:	3b01      	subs	r3, #1
 80097b2:	60a3      	str	r3, [r4, #8]
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	1c5a      	adds	r2, r3, #1
 80097b8:	6022      	str	r2, [r4, #0]
 80097ba:	701e      	strb	r6, [r3, #0]
 80097bc:	6962      	ldr	r2, [r4, #20]
 80097be:	1c43      	adds	r3, r0, #1
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d004      	beq.n	80097ce <__swbuf_r+0x6e>
 80097c4:	89a3      	ldrh	r3, [r4, #12]
 80097c6:	07db      	lsls	r3, r3, #31
 80097c8:	d5e1      	bpl.n	800978e <__swbuf_r+0x2e>
 80097ca:	2e0a      	cmp	r6, #10
 80097cc:	d1df      	bne.n	800978e <__swbuf_r+0x2e>
 80097ce:	4621      	mov	r1, r4
 80097d0:	4628      	mov	r0, r5
 80097d2:	f7ff fca5 	bl	8009120 <_fflush_r>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	d0d9      	beq.n	800978e <__swbuf_r+0x2e>
 80097da:	e7d6      	b.n	800978a <__swbuf_r+0x2a>

080097dc <__swsetup_r>:
 80097dc:	b538      	push	{r3, r4, r5, lr}
 80097de:	4b29      	ldr	r3, [pc, #164]	@ (8009884 <__swsetup_r+0xa8>)
 80097e0:	4605      	mov	r5, r0
 80097e2:	6818      	ldr	r0, [r3, #0]
 80097e4:	460c      	mov	r4, r1
 80097e6:	b118      	cbz	r0, 80097f0 <__swsetup_r+0x14>
 80097e8:	6a03      	ldr	r3, [r0, #32]
 80097ea:	b90b      	cbnz	r3, 80097f0 <__swsetup_r+0x14>
 80097ec:	f7ff fa00 	bl	8008bf0 <__sinit>
 80097f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097f4:	0719      	lsls	r1, r3, #28
 80097f6:	d422      	bmi.n	800983e <__swsetup_r+0x62>
 80097f8:	06da      	lsls	r2, r3, #27
 80097fa:	d407      	bmi.n	800980c <__swsetup_r+0x30>
 80097fc:	2209      	movs	r2, #9
 80097fe:	602a      	str	r2, [r5, #0]
 8009800:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009804:	81a3      	strh	r3, [r4, #12]
 8009806:	f04f 30ff 	mov.w	r0, #4294967295
 800980a:	e033      	b.n	8009874 <__swsetup_r+0x98>
 800980c:	0758      	lsls	r0, r3, #29
 800980e:	d512      	bpl.n	8009836 <__swsetup_r+0x5a>
 8009810:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009812:	b141      	cbz	r1, 8009826 <__swsetup_r+0x4a>
 8009814:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009818:	4299      	cmp	r1, r3
 800981a:	d002      	beq.n	8009822 <__swsetup_r+0x46>
 800981c:	4628      	mov	r0, r5
 800981e:	f7ff fafb 	bl	8008e18 <_free_r>
 8009822:	2300      	movs	r3, #0
 8009824:	6363      	str	r3, [r4, #52]	@ 0x34
 8009826:	89a3      	ldrh	r3, [r4, #12]
 8009828:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800982c:	81a3      	strh	r3, [r4, #12]
 800982e:	2300      	movs	r3, #0
 8009830:	6063      	str	r3, [r4, #4]
 8009832:	6923      	ldr	r3, [r4, #16]
 8009834:	6023      	str	r3, [r4, #0]
 8009836:	89a3      	ldrh	r3, [r4, #12]
 8009838:	f043 0308 	orr.w	r3, r3, #8
 800983c:	81a3      	strh	r3, [r4, #12]
 800983e:	6923      	ldr	r3, [r4, #16]
 8009840:	b94b      	cbnz	r3, 8009856 <__swsetup_r+0x7a>
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800984c:	d003      	beq.n	8009856 <__swsetup_r+0x7a>
 800984e:	4621      	mov	r1, r4
 8009850:	4628      	mov	r0, r5
 8009852:	f000 f883 	bl	800995c <__smakebuf_r>
 8009856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800985a:	f013 0201 	ands.w	r2, r3, #1
 800985e:	d00a      	beq.n	8009876 <__swsetup_r+0x9a>
 8009860:	2200      	movs	r2, #0
 8009862:	60a2      	str	r2, [r4, #8]
 8009864:	6962      	ldr	r2, [r4, #20]
 8009866:	4252      	negs	r2, r2
 8009868:	61a2      	str	r2, [r4, #24]
 800986a:	6922      	ldr	r2, [r4, #16]
 800986c:	b942      	cbnz	r2, 8009880 <__swsetup_r+0xa4>
 800986e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009872:	d1c5      	bne.n	8009800 <__swsetup_r+0x24>
 8009874:	bd38      	pop	{r3, r4, r5, pc}
 8009876:	0799      	lsls	r1, r3, #30
 8009878:	bf58      	it	pl
 800987a:	6962      	ldrpl	r2, [r4, #20]
 800987c:	60a2      	str	r2, [r4, #8]
 800987e:	e7f4      	b.n	800986a <__swsetup_r+0x8e>
 8009880:	2000      	movs	r0, #0
 8009882:	e7f7      	b.n	8009874 <__swsetup_r+0x98>
 8009884:	20000064 	.word	0x20000064

08009888 <_raise_r>:
 8009888:	291f      	cmp	r1, #31
 800988a:	b538      	push	{r3, r4, r5, lr}
 800988c:	4605      	mov	r5, r0
 800988e:	460c      	mov	r4, r1
 8009890:	d904      	bls.n	800989c <_raise_r+0x14>
 8009892:	2316      	movs	r3, #22
 8009894:	6003      	str	r3, [r0, #0]
 8009896:	f04f 30ff 	mov.w	r0, #4294967295
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800989e:	b112      	cbz	r2, 80098a6 <_raise_r+0x1e>
 80098a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098a4:	b94b      	cbnz	r3, 80098ba <_raise_r+0x32>
 80098a6:	4628      	mov	r0, r5
 80098a8:	f000 f830 	bl	800990c <_getpid_r>
 80098ac:	4622      	mov	r2, r4
 80098ae:	4601      	mov	r1, r0
 80098b0:	4628      	mov	r0, r5
 80098b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098b6:	f000 b817 	b.w	80098e8 <_kill_r>
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d00a      	beq.n	80098d4 <_raise_r+0x4c>
 80098be:	1c59      	adds	r1, r3, #1
 80098c0:	d103      	bne.n	80098ca <_raise_r+0x42>
 80098c2:	2316      	movs	r3, #22
 80098c4:	6003      	str	r3, [r0, #0]
 80098c6:	2001      	movs	r0, #1
 80098c8:	e7e7      	b.n	800989a <_raise_r+0x12>
 80098ca:	2100      	movs	r1, #0
 80098cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80098d0:	4620      	mov	r0, r4
 80098d2:	4798      	blx	r3
 80098d4:	2000      	movs	r0, #0
 80098d6:	e7e0      	b.n	800989a <_raise_r+0x12>

080098d8 <raise>:
 80098d8:	4b02      	ldr	r3, [pc, #8]	@ (80098e4 <raise+0xc>)
 80098da:	4601      	mov	r1, r0
 80098dc:	6818      	ldr	r0, [r3, #0]
 80098de:	f7ff bfd3 	b.w	8009888 <_raise_r>
 80098e2:	bf00      	nop
 80098e4:	20000064 	.word	0x20000064

080098e8 <_kill_r>:
 80098e8:	b538      	push	{r3, r4, r5, lr}
 80098ea:	4d07      	ldr	r5, [pc, #28]	@ (8009908 <_kill_r+0x20>)
 80098ec:	2300      	movs	r3, #0
 80098ee:	4604      	mov	r4, r0
 80098f0:	4608      	mov	r0, r1
 80098f2:	4611      	mov	r1, r2
 80098f4:	602b      	str	r3, [r5, #0]
 80098f6:	f7f9 fed7 	bl	80036a8 <_kill>
 80098fa:	1c43      	adds	r3, r0, #1
 80098fc:	d102      	bne.n	8009904 <_kill_r+0x1c>
 80098fe:	682b      	ldr	r3, [r5, #0]
 8009900:	b103      	cbz	r3, 8009904 <_kill_r+0x1c>
 8009902:	6023      	str	r3, [r4, #0]
 8009904:	bd38      	pop	{r3, r4, r5, pc}
 8009906:	bf00      	nop
 8009908:	200014a4 	.word	0x200014a4

0800990c <_getpid_r>:
 800990c:	f7f9 bec4 	b.w	8003698 <_getpid>

08009910 <__swhatbuf_r>:
 8009910:	b570      	push	{r4, r5, r6, lr}
 8009912:	460c      	mov	r4, r1
 8009914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009918:	2900      	cmp	r1, #0
 800991a:	b096      	sub	sp, #88	@ 0x58
 800991c:	4615      	mov	r5, r2
 800991e:	461e      	mov	r6, r3
 8009920:	da0d      	bge.n	800993e <__swhatbuf_r+0x2e>
 8009922:	89a3      	ldrh	r3, [r4, #12]
 8009924:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009928:	f04f 0100 	mov.w	r1, #0
 800992c:	bf14      	ite	ne
 800992e:	2340      	movne	r3, #64	@ 0x40
 8009930:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009934:	2000      	movs	r0, #0
 8009936:	6031      	str	r1, [r6, #0]
 8009938:	602b      	str	r3, [r5, #0]
 800993a:	b016      	add	sp, #88	@ 0x58
 800993c:	bd70      	pop	{r4, r5, r6, pc}
 800993e:	466a      	mov	r2, sp
 8009940:	f000 f848 	bl	80099d4 <_fstat_r>
 8009944:	2800      	cmp	r0, #0
 8009946:	dbec      	blt.n	8009922 <__swhatbuf_r+0x12>
 8009948:	9901      	ldr	r1, [sp, #4]
 800994a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800994e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009952:	4259      	negs	r1, r3
 8009954:	4159      	adcs	r1, r3
 8009956:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800995a:	e7eb      	b.n	8009934 <__swhatbuf_r+0x24>

0800995c <__smakebuf_r>:
 800995c:	898b      	ldrh	r3, [r1, #12]
 800995e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009960:	079d      	lsls	r5, r3, #30
 8009962:	4606      	mov	r6, r0
 8009964:	460c      	mov	r4, r1
 8009966:	d507      	bpl.n	8009978 <__smakebuf_r+0x1c>
 8009968:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	6123      	str	r3, [r4, #16]
 8009970:	2301      	movs	r3, #1
 8009972:	6163      	str	r3, [r4, #20]
 8009974:	b003      	add	sp, #12
 8009976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009978:	ab01      	add	r3, sp, #4
 800997a:	466a      	mov	r2, sp
 800997c:	f7ff ffc8 	bl	8009910 <__swhatbuf_r>
 8009980:	9f00      	ldr	r7, [sp, #0]
 8009982:	4605      	mov	r5, r0
 8009984:	4639      	mov	r1, r7
 8009986:	4630      	mov	r0, r6
 8009988:	f7ff faba 	bl	8008f00 <_malloc_r>
 800998c:	b948      	cbnz	r0, 80099a2 <__smakebuf_r+0x46>
 800998e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009992:	059a      	lsls	r2, r3, #22
 8009994:	d4ee      	bmi.n	8009974 <__smakebuf_r+0x18>
 8009996:	f023 0303 	bic.w	r3, r3, #3
 800999a:	f043 0302 	orr.w	r3, r3, #2
 800999e:	81a3      	strh	r3, [r4, #12]
 80099a0:	e7e2      	b.n	8009968 <__smakebuf_r+0xc>
 80099a2:	89a3      	ldrh	r3, [r4, #12]
 80099a4:	6020      	str	r0, [r4, #0]
 80099a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099aa:	81a3      	strh	r3, [r4, #12]
 80099ac:	9b01      	ldr	r3, [sp, #4]
 80099ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099b2:	b15b      	cbz	r3, 80099cc <__smakebuf_r+0x70>
 80099b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099b8:	4630      	mov	r0, r6
 80099ba:	f000 f81d 	bl	80099f8 <_isatty_r>
 80099be:	b128      	cbz	r0, 80099cc <__smakebuf_r+0x70>
 80099c0:	89a3      	ldrh	r3, [r4, #12]
 80099c2:	f023 0303 	bic.w	r3, r3, #3
 80099c6:	f043 0301 	orr.w	r3, r3, #1
 80099ca:	81a3      	strh	r3, [r4, #12]
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	431d      	orrs	r5, r3
 80099d0:	81a5      	strh	r5, [r4, #12]
 80099d2:	e7cf      	b.n	8009974 <__smakebuf_r+0x18>

080099d4 <_fstat_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4d07      	ldr	r5, [pc, #28]	@ (80099f4 <_fstat_r+0x20>)
 80099d8:	2300      	movs	r3, #0
 80099da:	4604      	mov	r4, r0
 80099dc:	4608      	mov	r0, r1
 80099de:	4611      	mov	r1, r2
 80099e0:	602b      	str	r3, [r5, #0]
 80099e2:	f7f9 fec1 	bl	8003768 <_fstat>
 80099e6:	1c43      	adds	r3, r0, #1
 80099e8:	d102      	bne.n	80099f0 <_fstat_r+0x1c>
 80099ea:	682b      	ldr	r3, [r5, #0]
 80099ec:	b103      	cbz	r3, 80099f0 <_fstat_r+0x1c>
 80099ee:	6023      	str	r3, [r4, #0]
 80099f0:	bd38      	pop	{r3, r4, r5, pc}
 80099f2:	bf00      	nop
 80099f4:	200014a4 	.word	0x200014a4

080099f8 <_isatty_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4d06      	ldr	r5, [pc, #24]	@ (8009a14 <_isatty_r+0x1c>)
 80099fc:	2300      	movs	r3, #0
 80099fe:	4604      	mov	r4, r0
 8009a00:	4608      	mov	r0, r1
 8009a02:	602b      	str	r3, [r5, #0]
 8009a04:	f7f9 fec0 	bl	8003788 <_isatty>
 8009a08:	1c43      	adds	r3, r0, #1
 8009a0a:	d102      	bne.n	8009a12 <_isatty_r+0x1a>
 8009a0c:	682b      	ldr	r3, [r5, #0]
 8009a0e:	b103      	cbz	r3, 8009a12 <_isatty_r+0x1a>
 8009a10:	6023      	str	r3, [r4, #0]
 8009a12:	bd38      	pop	{r3, r4, r5, pc}
 8009a14:	200014a4 	.word	0x200014a4

08009a18 <sqrt>:
 8009a18:	b538      	push	{r3, r4, r5, lr}
 8009a1a:	ed2d 8b02 	vpush	{d8}
 8009a1e:	ec55 4b10 	vmov	r4, r5, d0
 8009a22:	f000 f825 	bl	8009a70 <__ieee754_sqrt>
 8009a26:	4622      	mov	r2, r4
 8009a28:	462b      	mov	r3, r5
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	eeb0 8a40 	vmov.f32	s16, s0
 8009a32:	eef0 8a60 	vmov.f32	s17, s1
 8009a36:	f7f7 f871 	bl	8000b1c <__aeabi_dcmpun>
 8009a3a:	b990      	cbnz	r0, 8009a62 <sqrt+0x4a>
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2300      	movs	r3, #0
 8009a40:	4620      	mov	r0, r4
 8009a42:	4629      	mov	r1, r5
 8009a44:	f7f7 f842 	bl	8000acc <__aeabi_dcmplt>
 8009a48:	b158      	cbz	r0, 8009a62 <sqrt+0x4a>
 8009a4a:	f7ff f999 	bl	8008d80 <__errno>
 8009a4e:	2321      	movs	r3, #33	@ 0x21
 8009a50:	6003      	str	r3, [r0, #0]
 8009a52:	2200      	movs	r2, #0
 8009a54:	2300      	movs	r3, #0
 8009a56:	4610      	mov	r0, r2
 8009a58:	4619      	mov	r1, r3
 8009a5a:	f7f6 feef 	bl	800083c <__aeabi_ddiv>
 8009a5e:	ec41 0b18 	vmov	d8, r0, r1
 8009a62:	eeb0 0a48 	vmov.f32	s0, s16
 8009a66:	eef0 0a68 	vmov.f32	s1, s17
 8009a6a:	ecbd 8b02 	vpop	{d8}
 8009a6e:	bd38      	pop	{r3, r4, r5, pc}

08009a70 <__ieee754_sqrt>:
 8009a70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a74:	4a68      	ldr	r2, [pc, #416]	@ (8009c18 <__ieee754_sqrt+0x1a8>)
 8009a76:	ec55 4b10 	vmov	r4, r5, d0
 8009a7a:	43aa      	bics	r2, r5
 8009a7c:	462b      	mov	r3, r5
 8009a7e:	4621      	mov	r1, r4
 8009a80:	d110      	bne.n	8009aa4 <__ieee754_sqrt+0x34>
 8009a82:	4622      	mov	r2, r4
 8009a84:	4620      	mov	r0, r4
 8009a86:	4629      	mov	r1, r5
 8009a88:	f7f6 fdae 	bl	80005e8 <__aeabi_dmul>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	4620      	mov	r0, r4
 8009a92:	4629      	mov	r1, r5
 8009a94:	f7f6 fbf2 	bl	800027c <__adddf3>
 8009a98:	4604      	mov	r4, r0
 8009a9a:	460d      	mov	r5, r1
 8009a9c:	ec45 4b10 	vmov	d0, r4, r5
 8009aa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa4:	2d00      	cmp	r5, #0
 8009aa6:	dc0e      	bgt.n	8009ac6 <__ieee754_sqrt+0x56>
 8009aa8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009aac:	4322      	orrs	r2, r4
 8009aae:	d0f5      	beq.n	8009a9c <__ieee754_sqrt+0x2c>
 8009ab0:	b19d      	cbz	r5, 8009ada <__ieee754_sqrt+0x6a>
 8009ab2:	4622      	mov	r2, r4
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	f7f6 fbde 	bl	8000278 <__aeabi_dsub>
 8009abc:	4602      	mov	r2, r0
 8009abe:	460b      	mov	r3, r1
 8009ac0:	f7f6 febc 	bl	800083c <__aeabi_ddiv>
 8009ac4:	e7e8      	b.n	8009a98 <__ieee754_sqrt+0x28>
 8009ac6:	152a      	asrs	r2, r5, #20
 8009ac8:	d115      	bne.n	8009af6 <__ieee754_sqrt+0x86>
 8009aca:	2000      	movs	r0, #0
 8009acc:	e009      	b.n	8009ae2 <__ieee754_sqrt+0x72>
 8009ace:	0acb      	lsrs	r3, r1, #11
 8009ad0:	3a15      	subs	r2, #21
 8009ad2:	0549      	lsls	r1, r1, #21
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d0fa      	beq.n	8009ace <__ieee754_sqrt+0x5e>
 8009ad8:	e7f7      	b.n	8009aca <__ieee754_sqrt+0x5a>
 8009ada:	462a      	mov	r2, r5
 8009adc:	e7fa      	b.n	8009ad4 <__ieee754_sqrt+0x64>
 8009ade:	005b      	lsls	r3, r3, #1
 8009ae0:	3001      	adds	r0, #1
 8009ae2:	02dc      	lsls	r4, r3, #11
 8009ae4:	d5fb      	bpl.n	8009ade <__ieee754_sqrt+0x6e>
 8009ae6:	1e44      	subs	r4, r0, #1
 8009ae8:	1b12      	subs	r2, r2, r4
 8009aea:	f1c0 0420 	rsb	r4, r0, #32
 8009aee:	fa21 f404 	lsr.w	r4, r1, r4
 8009af2:	4323      	orrs	r3, r4
 8009af4:	4081      	lsls	r1, r0
 8009af6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009afa:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009afe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b02:	07d2      	lsls	r2, r2, #31
 8009b04:	bf5c      	itt	pl
 8009b06:	005b      	lslpl	r3, r3, #1
 8009b08:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009b0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009b10:	bf58      	it	pl
 8009b12:	0049      	lslpl	r1, r1, #1
 8009b14:	2600      	movs	r6, #0
 8009b16:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009b1a:	106d      	asrs	r5, r5, #1
 8009b1c:	0049      	lsls	r1, r1, #1
 8009b1e:	2016      	movs	r0, #22
 8009b20:	4632      	mov	r2, r6
 8009b22:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009b26:	1917      	adds	r7, r2, r4
 8009b28:	429f      	cmp	r7, r3
 8009b2a:	bfde      	ittt	le
 8009b2c:	193a      	addle	r2, r7, r4
 8009b2e:	1bdb      	suble	r3, r3, r7
 8009b30:	1936      	addle	r6, r6, r4
 8009b32:	0fcf      	lsrs	r7, r1, #31
 8009b34:	3801      	subs	r0, #1
 8009b36:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009b3a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009b3e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009b42:	d1f0      	bne.n	8009b26 <__ieee754_sqrt+0xb6>
 8009b44:	4604      	mov	r4, r0
 8009b46:	2720      	movs	r7, #32
 8009b48:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	eb00 0e0c 	add.w	lr, r0, ip
 8009b52:	db02      	blt.n	8009b5a <__ieee754_sqrt+0xea>
 8009b54:	d113      	bne.n	8009b7e <__ieee754_sqrt+0x10e>
 8009b56:	458e      	cmp	lr, r1
 8009b58:	d811      	bhi.n	8009b7e <__ieee754_sqrt+0x10e>
 8009b5a:	f1be 0f00 	cmp.w	lr, #0
 8009b5e:	eb0e 000c 	add.w	r0, lr, ip
 8009b62:	da42      	bge.n	8009bea <__ieee754_sqrt+0x17a>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	db40      	blt.n	8009bea <__ieee754_sqrt+0x17a>
 8009b68:	f102 0801 	add.w	r8, r2, #1
 8009b6c:	1a9b      	subs	r3, r3, r2
 8009b6e:	458e      	cmp	lr, r1
 8009b70:	bf88      	it	hi
 8009b72:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009b76:	eba1 010e 	sub.w	r1, r1, lr
 8009b7a:	4464      	add	r4, ip
 8009b7c:	4642      	mov	r2, r8
 8009b7e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009b82:	3f01      	subs	r7, #1
 8009b84:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009b88:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009b8c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009b90:	d1dc      	bne.n	8009b4c <__ieee754_sqrt+0xdc>
 8009b92:	4319      	orrs	r1, r3
 8009b94:	d01b      	beq.n	8009bce <__ieee754_sqrt+0x15e>
 8009b96:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009c1c <__ieee754_sqrt+0x1ac>
 8009b9a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009c20 <__ieee754_sqrt+0x1b0>
 8009b9e:	e9da 0100 	ldrd	r0, r1, [sl]
 8009ba2:	e9db 2300 	ldrd	r2, r3, [fp]
 8009ba6:	f7f6 fb67 	bl	8000278 <__aeabi_dsub>
 8009baa:	e9da 8900 	ldrd	r8, r9, [sl]
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4640      	mov	r0, r8
 8009bb4:	4649      	mov	r1, r9
 8009bb6:	f7f6 ff93 	bl	8000ae0 <__aeabi_dcmple>
 8009bba:	b140      	cbz	r0, 8009bce <__ieee754_sqrt+0x15e>
 8009bbc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009bc0:	e9da 0100 	ldrd	r0, r1, [sl]
 8009bc4:	e9db 2300 	ldrd	r2, r3, [fp]
 8009bc8:	d111      	bne.n	8009bee <__ieee754_sqrt+0x17e>
 8009bca:	3601      	adds	r6, #1
 8009bcc:	463c      	mov	r4, r7
 8009bce:	1072      	asrs	r2, r6, #1
 8009bd0:	0863      	lsrs	r3, r4, #1
 8009bd2:	07f1      	lsls	r1, r6, #31
 8009bd4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009bd8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009bdc:	bf48      	it	mi
 8009bde:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009be2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009be6:	4618      	mov	r0, r3
 8009be8:	e756      	b.n	8009a98 <__ieee754_sqrt+0x28>
 8009bea:	4690      	mov	r8, r2
 8009bec:	e7be      	b.n	8009b6c <__ieee754_sqrt+0xfc>
 8009bee:	f7f6 fb45 	bl	800027c <__adddf3>
 8009bf2:	e9da 8900 	ldrd	r8, r9, [sl]
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	4640      	mov	r0, r8
 8009bfc:	4649      	mov	r1, r9
 8009bfe:	f7f6 ff65 	bl	8000acc <__aeabi_dcmplt>
 8009c02:	b120      	cbz	r0, 8009c0e <__ieee754_sqrt+0x19e>
 8009c04:	1ca0      	adds	r0, r4, #2
 8009c06:	bf08      	it	eq
 8009c08:	3601      	addeq	r6, #1
 8009c0a:	3402      	adds	r4, #2
 8009c0c:	e7df      	b.n	8009bce <__ieee754_sqrt+0x15e>
 8009c0e:	1c63      	adds	r3, r4, #1
 8009c10:	f023 0401 	bic.w	r4, r3, #1
 8009c14:	e7db      	b.n	8009bce <__ieee754_sqrt+0x15e>
 8009c16:	bf00      	nop
 8009c18:	7ff00000 	.word	0x7ff00000
 8009c1c:	200000c0 	.word	0x200000c0
 8009c20:	200000b8 	.word	0x200000b8

08009c24 <_init>:
 8009c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c26:	bf00      	nop
 8009c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c2a:	bc08      	pop	{r3}
 8009c2c:	469e      	mov	lr, r3
 8009c2e:	4770      	bx	lr

08009c30 <_fini>:
 8009c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c32:	bf00      	nop
 8009c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c36:	bc08      	pop	{r3}
 8009c38:	469e      	mov	lr, r3
 8009c3a:	4770      	bx	lr
